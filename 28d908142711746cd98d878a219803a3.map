{"version":3,"sources":["../node_modules/process/browser.js","../node_modules/rot-js/lib/rot.js","assets/colors.js","assets/glyph.js","assets/dynamicGlyph.js","assets/entity/entity.js","assets/screens/gameOverScreen.js","assets/screens/winScreen.js","../node_modules/hyperapp/src/index.js","assets/screens/itemDetailDialog.js","assets/screens/itemListDialog.js","assets/screens/pickUpDialog.js","assets/screens/confirmation.js","assets/screens/storyScreen.js","assets/screens/helpScreen.js","assets/screens/playerStatusScreen.js","assets/repository.js","assets/item/item.js","assets/sounds/sounds.js","assets/item/itemMixins.js","assets/item/items.js","assets/tile.js","assets/entity/entityMixins.js","assets/entity/entities.js","assets/dungeonMap.js","assets/level.js","assets/gameWorld.js","assets/text.js","assets/screens/playScreen.js","assets/screens/startScreen.js","assets/messageDisplay.js","assets/playerStatusDisplay.js","assets/game.js"],"names":["black","darkBlue","darkPurple","darkGreen","brown","darkGray","lightGray","white","red","orange","yellow","green","blue","indigo","pink","peach","Glyph","fg","bg","char","DynamicGlyph","name","mixins","arguments","attachedMixins","attachedMixinGroups","forEach","mixin","mixinFactory","groupName","Object","assign","hasOwnProperty","capitalize","prefixes","prefix","indexOf","describe","toLowerCase","Entity","x","y","level","Game","speed","game","alive","isAlive","hasMixin","act","getLevel","removeEntity","mod","getTimedStatusEffects","s","property","value","armor","length","Math","pow","max","newLevel","newName","newX","newY","updateEntityPosition","gameOverScreen","inputData","keyCode","VK_RETURN","window","location","reload","display","getDisplay","drawText","WinScreen","switchScreen","h","app","attributes","node","rest","children","push","pop","nodeName","key","state","actions","view","container","renderLock","invokeLaterStack","rootElement","oldNode","toVNode","map","globalState","clone","wiredActions","scheduleRender","wireStateToActions","element","call","childNodes","nodeType","nodeValue","render","next","patch","setTimeout","target","source","obj","i","set","path","slice","get","action","data","then","concat","getKey","setElementProp","isSVG","oldValue","setAttribute","removeAttribute","createElement","document","createTextNode","createElementNS","oncreate","appendChild","updateElement","oldProps","onupdate","removeChildren","ondestroy","removeElement","parent","cb","done","removeChild","onremove","nextSibling","insertBefore","oldElements","oldKeyed","newKeyed","oldChild","oldKey","j","newChild","newKey","recyledNode","ItemDetailDialog","item","classList","add","functions","description","equipped","wieldable","wearable","ItemListDialog","items","masterScreen","player","title","subscreen","inc","incSelectedItem","bind","dec","decSelectedItem","getIndex","selectedItemIndex","getItems","getState","getSelectedItem","removeItem","filter","itemToRemove","min","getInventorySize","weapon","isWearing","body","newValue","exitSubscreen","remove","VK_ESCAPE","exit","detailDialog","innerHTML","VK_Q","renderItemList","VK_J","VK_DOWN","VK_2","VK_K","VK_UP","VK_8","VK_W","wield","getGame","messageDisplay","wear","VK_A","use","VK_U","unequip","VK_D","addItem","getX","getY","PickUpScreen","setItemsAt","Confirmation","text","func","function","confirm","cancel","StoryScreen","p","HelpScreen","screens","screen","movement","margin","VK_PERIOD","shift","VK_COMMA","unshift","PlayerStatusScreen","getAttackValue","getDefenseValue","getSpeed","Repository","ctor","templates","randomTemplates","template","disableRandomCreation","Error","weightMap","keys","reduce","rngWeight","RNG","getWeightedValue","create","Item","canPickUp","blip","Audio","hit00","hit01","hit02","Equippable","attackValue","defenseValue","sightBoost","inventoryBoost","StatusBooster","hpUp","statusEffect","_use","entity","addHp","addTimedStatusEffect","Fireable","charges","maxCharges","rangeDamage","fire","_fire","targetObj","color","targetArray","coords","displayArray","constructor","attack","defense","damage","takeDamage","blocksLight","console","log","xMod","yMod","ItemRepository","define","hpDown","label","timer","WeaponRepository","gray","Tile","isWalkable","stairsUpTile","stairsDownTile","floorTile","wallTile","closedDoorTile","openDoorTile","PlayerActor","_act","incrementTimedStatusEffects","refresh","getEngine","lock","Destructible","maxHp","hp","_takeDamage","_addHp","_getDefenseValue","hit","a","kill","Sight","sightRadius","canSee","_canSee","getSightRadius","_getSightRadius","otherX","otherY","found","fov","FOV","PreciseShadowcasting","getTile","compute","radius","visibility","TaskActor","tasks","huntingTarget","canDoTask","_canDoTask","wander","_wander","hunt","_hunt","gameWorld","currentLevel","task","offsets","abs","Path","AStar","getEntityAt","getMap","count","tryMove","dX","floor","random","dY","InventoryHolder","inventorySize","inventory","_addItem","_removeItem","hasItem","_hasItem","_getInventorySize","MonsterActor","Movable","_tryMove","tile","setPosition","openDoor","Attacker","strength","_attack","_getAttackValue","Equipper","_wield","unwield","_unwield","_wear","takeOff","_takeOff","_unequip","_isWearing","includes","splice","TimedStatusEffects","statusEffects","_incrementTimedStatusEffects","_getTimedStatusEffects","_addTimedStatusEffect","effect","PlayerTemplate","MonsterTemplate","DungeonMap","width","height","tiles","Array","w","maxRoomWidth","maxRoomHeight","generator","Map","Digger","roomWidth","roomHeight","dugPercentage","rooms","getRooms","room","getDoors","e","Level","topLevel","bottomLevel","getScreenWidth","getScreenHeight","entities","exploredTiles","firstRoom","playerStartPosition","getRandomRoomPosition","stairsUp","getRandomFloorPosition","setTile","stairsDown","addEntityAtRandomPosition","addItemAtRandomPosition","createRandom","firstRoomPosition","otherRoomPosition","ship","range","getBottom","getTop","getLeft","getRight","addEntity","oldX","oldY","getScheduler","entityToRemove","GameWorld","firstLevel","secondLevel","thirdLevel","levels","index","introduction","foundShipNoKeys","foundKeys","foundKeysAndShip","playScreen","getCurrentLevel","closing","firing","foundShip","gameOver","win","rangeWeaponDisplay","clear","position","start","enterSubscreen","handleInput","exitFunction","move","array","lookInDirection","unlock","closeDoor","VK_H","VK_4","VK_LEFT","VK_L","VK_6","VK_RIGHT","VK_Y","VK_7","VK_9","VK_B","VK_1","VK_N","VK_3","VK_5","shiftKey","goDownLevel","goUpLevel","VK_C","VK_F","VK_G","describeA","VK_I","VK_SLASH","VK_P","playerStatusDisplay","screenWidth","screenHeight","topLeftX","topLeftY","visibleTiles","r","draw","getChar","getFg","getBg","itemKey","split","parseInt","xy","coord","getEntities","values","startScreen","MessageDisplay","messages","messageScreen","style","background","overflow","textContent","message","PlayerStatusDisplay","playerStatus","scheduler","Scheduler","Speed","engine","Engine","Display","fontFamily","currentScreen","addEventListener","options","onload","isSupported","alert","getContainer"],"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"28d908142711746cd98d878a219803a3.map","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\n\tThis is rot.js, the ROguelike Toolkit in JavaScript.\n\tVersion 0.7~dev, generated on Tue Dec 12 13:34:23 CET 2017.\n*/\n/**\n * Add objects for Node.js environment\n */\nglobal.requestAnimationFrame = function(cb) {\n\treturn setTimeout(function() { cb(Date.now()); }, 1000/60);\n};\n\nglobal.document = {\n\tbody: {\n\t\tappendChild: function(child) {},\n\t\tscrollLeft: 0,\n\t\tscrollTop: 0\n\t},\n\tcreateElement: function(type) {\n\t\tvar canvas;\n\t\treturn canvas = {\n\t\t\tgetBoundingClientRect: function() {\n\t\t\t\tvar rect;\n\t\t\t\treturn rect = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0\n\t\t\t\t};\n\t\t\t},\n\t\t\tgetContext: function(type) {\n\t\t\t\tvar context;\n\t\t\t\treturn context = {\n\t\t\t\t\t_termcolor: null,\n\t\t\t\t\tbeginPath: function() {},\n\t\t\t\t\tcanvas: canvas,\n\t\t\t\t\tclearRect: function(x, y, w, h) {\n\t\t\t\t\t\tif(this._termcolor !== null) {\n\t\t\t\t\t\t\tvar clearCmd = this._termcolor.clearToAnsi(this.fillStyle);\n\t\t\t\t\t\t\tprocess.stdout.write(clearCmd);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdrawImage: function(a, b, c, d, e, f, g, h, i) {},\n\t\t\t\t\tfill: function() {},\n\t\t\t\t\tfillRect: function(x, y, w, h) {\n\t\t\t\t\t\tif(this._termcolor !== null) {\n\t\t\t\t\t\t\tvar clearCmd = this._termcolor.clearToAnsi(this.fillStyle);\n\t\t\t\t\t\t\tprocess.stdout.write(clearCmd);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tfillStyle: \"#000\",\n\t\t\t\t\tfillText: function(chs, x, y) {},\n\t\t\t\t\tfont: \"monospace\",\n\t\t\t\t\tlineTo: function(x, y) {},\n\t\t\t\t\tmeasureText: function(ch) {\n\t\t\t\t\t\tvar result;\n\t\t\t\t\t\treturn result = {\n\t\t\t\t\t\t\twidth: 12\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\tmoveTo: function(x, y) {},\n\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\ttextBaseline: \"middle\"\n\t\t\t\t};\n\t\t\t},\n\t\t\theight: 0,\n\t\t\tstyle: {\n\t\t\t\tleft: \"100px\",\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: \"100px\",\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\twidth: 0\n\t\t};\n\t},\n\tdocumentElement: {\n\t\tscrollLeft: 0,\n\t\tscrollTop: 0\n\t}\n};\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.ROT = factory();\n    }\n}(this, function() {\n/**\n * @namespace Top-level ROT namespace\n */\nvar ROT = {\n\t/**\n\t * @returns {bool} Is rot.js supported by this browser?\n\t */\n\tisSupported: function() {\n\t\treturn !!(document.createElement(\"canvas\").getContext && Function.prototype.bind);\n\t},\n\n\t/** Default with for display and map generators */\n\tDEFAULT_WIDTH: 80,\n\t/** Default height for display and map generators */\n\tDEFAULT_HEIGHT: 25,\n\n\t/** Directional constants. Ordering is important! */\n\tDIRS: {\n\t\t\"4\": [\n\t\t\t[ 0, -1],\n\t\t\t[ 1,  0],\n\t\t\t[ 0,  1],\n\t\t\t[-1,  0]\n\t\t],\n\t\t\"8\": [\n\t\t\t[ 0, -1],\n\t\t\t[ 1, -1],\n\t\t\t[ 1,  0],\n\t\t\t[ 1,  1],\n\t\t\t[ 0,  1],\n\t\t\t[-1,  1],\n\t\t\t[-1,  0],\n\t\t\t[-1, -1]\n\t\t],\n\t\t\"6\": [\n\t\t\t[-1, -1],\n\t\t\t[ 1, -1],\n\t\t\t[ 2,  0],\n\t\t\t[ 1,  1],\n\t\t\t[-1,  1],\n\t\t\t[-2,  0]\n\t\t]\n\t},\n\n\t/** Cancel key. */\n\tVK_CANCEL: 3, \n\t/** Help key. */\n\tVK_HELP: 6, \n\t/** Backspace key. */\n\tVK_BACK_SPACE: 8, \n\t/** Tab key. */\n\tVK_TAB: 9, \n\t/** 5 key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key. */\n\tVK_CLEAR: 12, \n\t/** Return/enter key on the main keyboard. */\n\tVK_RETURN: 13, \n\t/** Reserved, but not used. */\n\tVK_ENTER: 14, \n\t/** Shift key. */\n\tVK_SHIFT: 16, \n\t/** Control key. */\n\tVK_CONTROL: 17, \n\t/** Alt (Option on Mac) key. */\n\tVK_ALT: 18, \n\t/** Pause key. */\n\tVK_PAUSE: 19, \n\t/** Caps lock. */\n\tVK_CAPS_LOCK: 20, \n\t/** Escape key. */\n\tVK_ESCAPE: 27, \n\t/** Space bar. */\n\tVK_SPACE: 32, \n\t/** Page Up key. */\n\tVK_PAGE_UP: 33, \n\t/** Page Down key. */\n\tVK_PAGE_DOWN: 34, \n\t/** End key. */\n\tVK_END: 35, \n\t/** Home key. */\n\tVK_HOME: 36, \n\t/** Left arrow. */\n\tVK_LEFT: 37, \n\t/** Up arrow. */\n\tVK_UP: 38, \n\t/** Right arrow. */\n\tVK_RIGHT: 39, \n\t/** Down arrow. */\n\tVK_DOWN: 40, \n\t/** Print Screen key. */\n\tVK_PRINTSCREEN: 44, \n\t/** Ins(ert) key. */\n\tVK_INSERT: 45, \n\t/** Del(ete) key. */\n\tVK_DELETE: 46, \n\t/***/\n\tVK_0: 48,\n\t/***/\n\tVK_1: 49,\n\t/***/\n\tVK_2: 50,\n\t/***/\n\tVK_3: 51,\n\t/***/\n\tVK_4: 52,\n\t/***/\n\tVK_5: 53,\n\t/***/\n\tVK_6: 54,\n\t/***/\n\tVK_7: 55,\n\t/***/\n\tVK_8: 56,\n\t/***/\n\tVK_9: 57,\n\t/** Colon (:) key. Requires Gecko 15.0 */\n\tVK_COLON: 58, \n\t/** Semicolon (;) key. */\n\tVK_SEMICOLON: 59, \n\t/** Less-than (<) key. Requires Gecko 15.0 */\n\tVK_LESS_THAN: 60, \n\t/** Equals (=) key. */\n\tVK_EQUALS: 61, \n\t/** Greater-than (>) key. Requires Gecko 15.0 */\n\tVK_GREATER_THAN: 62, \n\t/** Question mark (?) key. Requires Gecko 15.0 */\n\tVK_QUESTION_MARK: 63, \n\t/** Atmark (@) key. Requires Gecko 15.0 */\n\tVK_AT: 64, \n\t/***/\n\tVK_A: 65,\n\t/***/\n\tVK_B: 66,\n\t/***/\n\tVK_C: 67,\n\t/***/\n\tVK_D: 68,\n\t/***/\n\tVK_E: 69,\n\t/***/\n\tVK_F: 70,\n\t/***/\n\tVK_G: 71,\n\t/***/\n\tVK_H: 72,\n\t/***/\n\tVK_I: 73,\n\t/***/\n\tVK_J: 74,\n\t/***/\n\tVK_K: 75,\n\t/***/\n\tVK_L: 76,\n\t/***/\n\tVK_M: 77,\n\t/***/\n\tVK_N: 78,\n\t/***/\n\tVK_O: 79,\n\t/***/\n\tVK_P: 80,\n\t/***/\n\tVK_Q: 81,\n\t/***/\n\tVK_R: 82,\n\t/***/\n\tVK_S: 83,\n\t/***/\n\tVK_T: 84,\n\t/***/\n\tVK_U: 85,\n\t/***/\n\tVK_V: 86,\n\t/***/\n\tVK_W: 87,\n\t/***/\n\tVK_X: 88,\n\t/***/\n\tVK_Y: 89,\n\t/***/\n\tVK_Z: 90,\n\t/***/\n\tVK_CONTEXT_MENU: 93,\n\t/** 0 on the numeric keypad. */\n\tVK_NUMPAD0: 96, \n\t/** 1 on the numeric keypad. */\n\tVK_NUMPAD1: 97, \n\t/** 2 on the numeric keypad. */\n\tVK_NUMPAD2: 98, \n\t/** 3 on the numeric keypad. */\n\tVK_NUMPAD3: 99, \n\t/** 4 on the numeric keypad. */\n\tVK_NUMPAD4: 100, \n\t/** 5 on the numeric keypad. */\n\tVK_NUMPAD5: 101, \n\t/** 6 on the numeric keypad. */\n\tVK_NUMPAD6: 102, \n\t/** 7 on the numeric keypad. */\n\tVK_NUMPAD7: 103, \n\t/** 8 on the numeric keypad. */\n\tVK_NUMPAD8: 104, \n\t/** 9 on the numeric keypad. */\n\tVK_NUMPAD9: 105, \n\t/** * on the numeric keypad. */\n\tVK_MULTIPLY: 106,\n\t/** + on the numeric keypad. */\n\tVK_ADD: 107, \n\t/***/\n\tVK_SEPARATOR: 108,\n\t/** - on the numeric keypad. */\n\tVK_SUBTRACT: 109, \n\t/** Decimal point on the numeric keypad. */\n\tVK_DECIMAL: 110, \n\t/** / on the numeric keypad. */\n\tVK_DIVIDE: 111, \n\t/** F1 key. */\n\tVK_F1: 112, \n\t/** F2 key. */\n\tVK_F2: 113, \n\t/** F3 key. */\n\tVK_F3: 114, \n\t/** F4 key. */\n\tVK_F4: 115, \n\t/** F5 key. */\n\tVK_F5: 116, \n\t/** F6 key. */\n\tVK_F6: 117, \n\t/** F7 key. */\n\tVK_F7: 118, \n\t/** F8 key. */\n\tVK_F8: 119, \n\t/** F9 key. */\n\tVK_F9: 120, \n\t/** F10 key. */\n\tVK_F10: 121, \n\t/** F11 key. */\n\tVK_F11: 122, \n\t/** F12 key. */\n\tVK_F12: 123, \n\t/** F13 key. */\n\tVK_F13: 124, \n\t/** F14 key. */\n\tVK_F14: 125, \n\t/** F15 key. */\n\tVK_F15: 126, \n\t/** F16 key. */\n\tVK_F16: 127, \n\t/** F17 key. */\n\tVK_F17: 128, \n\t/** F18 key. */\n\tVK_F18: 129, \n\t/** F19 key. */\n\tVK_F19: 130, \n\t/** F20 key. */\n\tVK_F20: 131, \n\t/** F21 key. */\n\tVK_F21: 132, \n\t/** F22 key. */\n\tVK_F22: 133, \n\t/** F23 key. */\n\tVK_F23: 134, \n\t/** F24 key. */\n\tVK_F24: 135, \n\t/** Num Lock key. */\n\tVK_NUM_LOCK: 144, \n\t/** Scroll Lock key. */\n\tVK_SCROLL_LOCK: 145, \n\t/** Circumflex (^) key. Requires Gecko 15.0 */\n\tVK_CIRCUMFLEX: 160, \n\t/** Exclamation (!) key. Requires Gecko 15.0 */\n\tVK_EXCLAMATION: 161, \n\t/** Double quote () key. Requires Gecko 15.0 */\n\tVK_DOUBLE_QUOTE: 162, \n\t/** Hash (#) key. Requires Gecko 15.0 */\n\tVK_HASH: 163, \n\t/** Dollar sign ($) key. Requires Gecko 15.0 */\n\tVK_DOLLAR: 164, \n\t/** Percent (%) key. Requires Gecko 15.0 */\n\tVK_PERCENT: 165, \n\t/** Ampersand (&) key. Requires Gecko 15.0 */\n\tVK_AMPERSAND: 166, \n\t/** Underscore (_) key. Requires Gecko 15.0 */\n\tVK_UNDERSCORE: 167, \n\t/** Open parenthesis (() key. Requires Gecko 15.0 */\n\tVK_OPEN_PAREN: 168, \n\t/** Close parenthesis ()) key. Requires Gecko 15.0 */\n\tVK_CLOSE_PAREN: 169, \n\t/* Asterisk (*) key. Requires Gecko 15.0 */\n\tVK_ASTERISK: 170,\n\t/** Plus (+) key. Requires Gecko 15.0 */\n\tVK_PLUS: 171, \n\t/** Pipe (|) key. Requires Gecko 15.0 */\n\tVK_PIPE: 172, \n\t/** Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */\n\tVK_HYPHEN_MINUS: 173, \n\t/** Open curly bracket ({) key. Requires Gecko 15.0 */\n\tVK_OPEN_CURLY_BRACKET: 174, \n\t/** Close curly bracket (}) key. Requires Gecko 15.0 */\n\tVK_CLOSE_CURLY_BRACKET: 175, \n\t/** Tilde (~) key. Requires Gecko 15.0 */\n\tVK_TILDE: 176, \n\t/** Comma (,) key. */\n\tVK_COMMA: 188, \n\t/** Period (.) key. */\n\tVK_PERIOD: 190, \n\t/** Slash (/) key. */\n\tVK_SLASH: 191, \n\t/** Back tick (`) key. */\n\tVK_BACK_QUOTE: 192, \n\t/** Open square bracket ([) key. */\n\tVK_OPEN_BRACKET: 219, \n\t/** Back slash (\\) key. */\n\tVK_BACK_SLASH: 220, \n\t/** Close square bracket (]) key. */\n\tVK_CLOSE_BRACKET: 221, \n\t/** Quote (''') key. */\n\tVK_QUOTE: 222, \n\t/** Meta key on Linux, Command key on Mac. */\n\tVK_META: 224, \n\t/** AltGr key on Linux. Requires Gecko 15.0 */\n\tVK_ALTGR: 225, \n\t/** Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0 */\n\tVK_WIN: 91, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_KANA: 21, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_HANGUL: 21, \n\t/** 英数 key on Japanese Mac keyboard. Requires Gecko 15.0 */\n\tVK_EISU: 22, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_JUNJA: 23, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_FINAL: 24, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_HANJA: 25, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_KANJI: 25, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_CONVERT: 28, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_NONCONVERT: 29, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_ACCEPT: 30, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_MODECHANGE: 31, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_SELECT: 41, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_PRINT: 42, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_EXECUTE: 43, \n\t/** Linux support for this keycode was added in Gecko 4.0.\t */\n\tVK_SLEEP: 95 \n};\n/**\n * @namespace\n * Contains text tokenization and breaking routines\n */\nROT.Text = {\n\tRE_COLORS: /%([bc]){([^}]*)}/g,\n\n\t/* token types */\n\tTYPE_TEXT:\t\t0,\n\tTYPE_NEWLINE:\t1,\n\tTYPE_FG:\t\t2,\n\tTYPE_BG:\t\t3,\n\n\t/**\n\t * Measure size of a resulting text block\n\t */\n\tmeasure: function(str, maxWidth) {\n\t\tvar result = {width:0, height:1};\n\t\tvar tokens = this.tokenize(str, maxWidth);\n\t\tvar lineWidth = 0;\n\n\t\tfor (var i=0;i<tokens.length;i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tswitch (token.type) {\n\t\t\t\tcase this.TYPE_TEXT:\n\t\t\t\t\tlineWidth += token.value.length;\n\t\t\t\tbreak;\n\n\t\t\t\tcase this.TYPE_NEWLINE:\n\t\t\t\t\tresult.height++;\n\t\t\t\t\tresult.width = Math.max(result.width, lineWidth);\n\t\t\t\t\tlineWidth = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult.width = Math.max(result.width, lineWidth);\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Convert string to a series of a formatting commands\n\t */\n\ttokenize: function(str, maxWidth) {\n\t\tvar result = [];\n\n\t\t/* first tokenization pass - split texts and color formatting commands */\n\t\tvar offset = 0;\n\t\tstr.replace(this.RE_COLORS, function(match, type, name, index) {\n\t\t\t/* string before */\n\t\t\tvar part = str.substring(offset, index);\n\t\t\tif (part.length) {\n\t\t\t\tresult.push({\n\t\t\t\t\ttype: ROT.Text.TYPE_TEXT,\n\t\t\t\t\tvalue: part\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/* color command */\n\t\t\tresult.push({\n\t\t\t\ttype: (type == \"c\" ? ROT.Text.TYPE_FG : ROT.Text.TYPE_BG),\n\t\t\t\tvalue: name.trim()\n\t\t\t});\n\n\t\t\toffset = index + match.length;\n\t\t\treturn \"\";\n\t\t});\n\n\t\t/* last remaining part */\n\t\tvar part = str.substring(offset);\n\t\tif (part.length) {\n\t\t\tresult.push({\n\t\t\t\ttype: ROT.Text.TYPE_TEXT,\n\t\t\t\tvalue: part\n\t\t\t});\n\t\t}\n\n\t\treturn this._breakLines(result, maxWidth);\n\t},\n\n\t/* insert line breaks into first-pass tokenized data */\n\t_breakLines: function(tokens, maxWidth) {\n\t\tif (!maxWidth) { maxWidth = Infinity; }\n\n\t\tvar i = 0;\n\t\tvar lineLength = 0;\n\t\tvar lastTokenWithSpace = -1;\n\n\t\twhile (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */\n\t\t\tvar token = tokens[i];\n\t\t\tif (token.type == ROT.Text.TYPE_NEWLINE) { /* reset */\n\t\t\t\tlineLength = 0; \n\t\t\t\tlastTokenWithSpace = -1;\n\t\t\t}\n\t\t\tif (token.type != ROT.Text.TYPE_TEXT) { /* skip non-text tokens */\n\t\t\t\ti++;\n\t\t\t\tcontinue; \n\t\t\t}\n\n\t\t\t/* remove spaces at the beginning of line */\n\t\t\twhile (lineLength == 0 && token.value.charAt(0) == \" \") { token.value = token.value.substring(1); }\n\n\t\t\t/* forced newline? insert two new tokens after this one */\n\t\t\tvar index = token.value.indexOf(\"\\n\");\n\t\t\tif (index != -1) { \n\t\t\t\ttoken.value = this._breakInsideToken(tokens, i, index, true); \n\n\t\t\t\t/* if there are spaces at the end, we must remove them (we do not want the line too long) */\n\t\t\t\tvar arr = token.value.split(\"\");\n\t\t\t\twhile (arr.length && arr[arr.length-1] == \" \") { arr.pop(); }\n\t\t\t\ttoken.value = arr.join(\"\");\n\t\t\t}\n\n\t\t\t/* token degenerated? */\n\t\t\tif (!token.value.length) {\n\t\t\t\ttokens.splice(i, 1);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */\n\n\t\t\t\t/* is it possible to break within this token? */\n\t\t\t\tvar index = -1;\n\t\t\t\twhile (1) {\n\t\t\t\t\tvar nextIndex = token.value.indexOf(\" \", index+1);\n\t\t\t\t\tif (nextIndex == -1) { break; }\n\t\t\t\t\tif (lineLength + nextIndex > maxWidth) { break; }\n\t\t\t\t\tindex = nextIndex;\n\t\t\t\t}\n\n\t\t\t\tif (index != -1) { /* break at space within this one */\n\t\t\t\t\ttoken.value = this._breakInsideToken(tokens, i, index, true);\n\t\t\t\t} else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */\n\t\t\t\t\tvar token = tokens[lastTokenWithSpace];\n\t\t\t\t\tvar breakIndex = token.value.lastIndexOf(\" \");\n\t\t\t\t\ttoken.value = this._breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\n\t\t\t\t\ti = lastTokenWithSpace;\n\t\t\t\t} else { /* force break in this token */\n\t\t\t\t\ttoken.value = this._breakInsideToken(tokens, i, maxWidth-lineLength, false);\n\t\t\t\t}\n\n\t\t\t} else { /* line not long, continue */\n\t\t\t\tlineLength += token.value.length;\n\t\t\t\tif (token.value.indexOf(\" \") != -1) { lastTokenWithSpace = i; }\n\t\t\t}\n\t\t\t\n\t\t\ti++; /* advance to next token */\n\t\t}\n\n\n\t\ttokens.push({type: ROT.Text.TYPE_NEWLINE}); /* insert fake newline to fix the last text line */\n\n\t\t/* remove trailing space from text tokens before newlines */\n\t\tvar lastTextToken = null;\n\t\tfor (var i=0;i<tokens.length;i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tswitch (token.type) {\n\t\t\t\tcase ROT.Text.TYPE_TEXT: lastTextToken = token; break;\n\t\t\t\tcase ROT.Text.TYPE_NEWLINE: \n\t\t\t\t\tif (lastTextToken) { /* remove trailing space */\n\t\t\t\t\t\tvar arr = lastTextToken.value.split(\"\");\n\t\t\t\t\t\twhile (arr.length && arr[arr.length-1] == \" \") { arr.pop(); }\n\t\t\t\t\t\tlastTextToken.value = arr.join(\"\");\n\t\t\t\t\t}\n\t\t\t\t\tlastTextToken = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\ttokens.pop(); /* remove fake token */\n\n\t\treturn tokens;\n\t},\n\n\t/**\n\t * Create new tokens and insert them into the stream\n\t * @param {object[]} tokens\n\t * @param {int} tokenIndex Token being processed\n\t * @param {int} breakIndex Index within current token's value\n\t * @param {bool} removeBreakChar Do we want to remove the breaking character?\n\t * @returns {string} remaining unbroken token value\n\t */\n\t_breakInsideToken: function(tokens, tokenIndex, breakIndex, removeBreakChar) {\n\t\tvar newBreakToken = {\n\t\t\ttype: ROT.Text.TYPE_NEWLINE\n\t\t};\n\t\tvar newTextToken = {\n\t\t\ttype: ROT.Text.TYPE_TEXT,\n\t\t\tvalue: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\n\t\t};\n\t\ttokens.splice(tokenIndex+1, 0, newBreakToken, newTextToken);\n\t\treturn tokens[tokenIndex].value.substring(0, breakIndex);\n\t}\n};\n/**\n * @returns {any} Randomly picked item, null when length=0\n */\nArray.prototype.random = Array.prototype.random || function() {\n\tif (!this.length) { return null; }\n\treturn this[Math.floor(ROT.RNG.getUniform() * this.length)];\n};\n\n/**\n * @returns {array} New array with randomized items\n */\nArray.prototype.randomize = Array.prototype.randomize || function() {\n  var result = [];\n  var clone = this.slice();\n  while (clone.length) {\n    var index = clone.indexOf(clone.random());\n    result.push(clone.splice(index, 1)[0]);\n  }\n  return result;\n};\n/**\n * Always positive modulus\n * @param {int} n Modulus\n * @returns {int} this modulo n\n */\nNumber.prototype.mod = Number.prototype.mod || function(n) {\n\treturn ((this%n)+n)%n;\n};\n/**\n * @returns {string} First letter capitalized\n */\nString.prototype.capitalize = String.prototype.capitalize || function() {\n\treturn this.charAt(0).toUpperCase() + this.substring(1);\n};\n\n/** \n * Left pad\n * @param {string} [character=\"0\"]\n * @param {int} [count=2]\n */\nString.prototype.lpad = String.prototype.lpad || function(character, count) {\n\tvar ch = character || \"0\";\n\tvar cnt = count || 2;\n\n\tvar s = \"\";\n\twhile (s.length < (cnt - this.length)) { s += ch; }\n\ts = s.substring(0, cnt-this.length);\n\treturn s+this;\n};\n\n/** \n * Right pad\n * @param {string} [character=\"0\"]\n * @param {int} [count=2]\n */\nString.prototype.rpad = String.prototype.rpad || function(character, count) {\n\tvar ch = character || \"0\";\n\tvar cnt = count || 2;\n\n\tvar s = \"\";\n\twhile (s.length < (cnt - this.length)) { s += ch; }\n\ts = s.substring(0, cnt-this.length);\n\treturn this+s;\n};\n\n/**\n * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.\n * @param {string} template\n * @param {any} [argv]\n */\nString.format = String.format || function(template) {\n\tvar map = String.format.map;\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\tvar replacer = function(match, group1, group2, index) {\n\t\tif (template.charAt(index-1) == \"%\") { return match.substring(1); }\n\t\tif (!args.length) { return match; }\n\t\tvar obj = args[0];\n\n\t\tvar group = group1 || group2;\n\t\tvar parts = group.split(\",\");\n\t\tvar name = parts.shift();\n\t\tvar method = map[name.toLowerCase()];\n\t\tif (!method) { return match; }\n\n\t\tvar obj = args.shift();\n\t\tvar replaced = obj[method].apply(obj, parts);\n\n\t\tvar first = name.charAt(0);\n\t\tif (first != first.toLowerCase()) { replaced = replaced.capitalize(); }\n\n\t\treturn replaced;\n\t};\n\treturn template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\n};\n\nString.format.map = String.format.map || {\n\t\"s\": \"toString\"\n};\n\n/**\n * Convenience shortcut to String.format(this)\n */\nString.prototype.format = String.prototype.format || function() {\n\tvar args = Array.prototype.slice.call(arguments);\n\targs.unshift(this);\n\treturn String.format.apply(String, args);\n};\n\nif (!Object.create) {  \n\t/**\n\t * ES5 Object.create\n\t */\n\tObject.create = function(o) {  \n\t\tvar tmp = function() {};\n\t\ttmp.prototype = o;\n\t\treturn new tmp();\n\t};  \n}  \n/**\n * Sets prototype of this function to an instance of parent function\n * @param {function} parent\n */\nFunction.prototype.extend = Function.prototype.extend || function(parent) {\n\tthis.prototype = Object.create(parent.prototype);\n\tthis.prototype.constructor = this;\n\treturn this;\n};\nif (typeof window != \"undefined\") {\n\twindow.requestAnimationFrame =\n\t\twindow.requestAnimationFrame\n\t\t|| window.mozRequestAnimationFrame\n\t\t|| window.webkitRequestAnimationFrame\n\t\t|| window.oRequestAnimationFrame\n\t\t|| window.msRequestAnimationFrame\n\t\t|| function(cb) { return setTimeout(function() { cb(Date.now()); }, 1000/60); };\n\n\twindow.cancelAnimationFrame =\n\t\twindow.cancelAnimationFrame\n\t\t|| window.mozCancelAnimationFrame\n\t\t|| window.webkitCancelAnimationFrame\n\t\t|| window.oCancelAnimationFrame\n\t\t|| window.msCancelAnimationFrame\n\t\t|| function(id) { return clearTimeout(id); };\n}\n/**\n * @class Visual map display\n * @param {object} [options]\n * @param {int} [options.width=ROT.DEFAULT_WIDTH]\n * @param {int} [options.height=ROT.DEFAULT_HEIGHT]\n * @param {int} [options.fontSize=15]\n * @param {string} [options.fontFamily=\"monospace\"]\n * @param {string} [options.fontStyle=\"\"] bold/italic/none/both\n * @param {string} [options.fg=\"#ccc\"]\n * @param {string} [options.bg=\"#000\"]\n * @param {float} [options.spacing=1]\n * @param {float} [options.border=0]\n * @param {string} [options.layout=\"rect\"]\n * @param {bool} [options.forceSquareRatio=false]\n * @param {int} [options.tileWidth=32]\n * @param {int} [options.tileHeight=32]\n * @param {object} [options.tileMap={}]\n * @param {image} [options.tileSet=null]\n * @param {image} [options.tileColorize=false]\n */\nROT.Display = function(options) {\n\tvar canvas = document.createElement(\"canvas\");\n\tthis._context = canvas.getContext(\"2d\");\n\tthis._data = {};\n\tthis._dirty = false; /* false = nothing, true = all, object = dirty cells */\n\tthis._options = {};\n\tthis._backend = null;\n\t\n\tvar defaultOptions = {\n\t\twidth: ROT.DEFAULT_WIDTH,\n\t\theight: ROT.DEFAULT_HEIGHT,\n\t\ttranspose: false,\n\t\tlayout: \"rect\",\n\t\tfontSize: 15,\n\t\tspacing: 1,\n\t\tborder: 0,\n\t\tforceSquareRatio: false,\n\t\tfontFamily: \"monospace\",\n\t\tfontStyle: \"\",\n\t\tfg: \"#ccc\",\n\t\tbg: \"#000\",\n\t\ttileWidth: 32,\n\t\ttileHeight: 32,\n\t\ttileMap: {},\n\t\ttileSet: null,\n\t\ttileColorize: false,\n\t\ttermColor: \"xterm\"\n\t};\n\tfor (var p in options) { defaultOptions[p] = options[p]; }\n\tthis.setOptions(defaultOptions);\n\tthis.DEBUG = this.DEBUG.bind(this);\n\n\tthis._tick = this._tick.bind(this);\n\trequestAnimationFrame(this._tick);\n};\n\n/**\n * Debug helper, ideal as a map generator callback. Always bound to this.\n * @param {int} x\n * @param {int} y\n * @param {int} what\n */\nROT.Display.prototype.DEBUG = function(x, y, what) {\n\tvar colors = [this._options.bg, this._options.fg];\n\tthis.draw(x, y, null, null, colors[what % colors.length]);\n};\n\n/**\n * Clear the whole display (cover it with background color)\n */\nROT.Display.prototype.clear = function() {\n\tthis._data = {};\n\tthis._dirty = true;\n};\n\n/**\n * @see ROT.Display\n */\nROT.Display.prototype.setOptions = function(options) {\n\tfor (var p in options) { this._options[p] = options[p]; }\n\tif (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\n\t\tif (options.layout) { \n\t\t\tthis._backend = new ROT.Display[options.layout.capitalize()](this._context);\n\t\t}\n\n\t\tvar font = (this._options.fontStyle ? this._options.fontStyle + \" \" : \"\") + this._options.fontSize + \"px \" + this._options.fontFamily;\n\t\tthis._context.font = font;\n\t\tthis._backend.compute(this._options);\n\t\tthis._context.font = font;\n\t\tthis._context.textAlign = \"center\";\n\t\tthis._context.textBaseline = \"middle\";\n\t\tthis._dirty = true;\n\t}\n\treturn this;\n};\n\n/**\n * Returns currently set options\n * @returns {object} Current options object \n */\nROT.Display.prototype.getOptions = function() {\n\treturn this._options;\n};\n\n/**\n * Returns the DOM node of this display\n * @returns {node} DOM node\n */\nROT.Display.prototype.getContainer = function() {\n\treturn this._context.canvas;\n};\n\n/**\n * Compute the maximum width/height to fit into a set of given constraints\n * @param {int} availWidth Maximum allowed pixel width\n * @param {int} availHeight Maximum allowed pixel height\n * @returns {int[2]} cellWidth,cellHeight\n */\nROT.Display.prototype.computeSize = function(availWidth, availHeight) {\n\treturn this._backend.computeSize(availWidth, availHeight, this._options);\n};\n\n/**\n * Compute the maximum font size to fit into a set of given constraints\n * @param {int} availWidth Maximum allowed pixel width\n * @param {int} availHeight Maximum allowed pixel height\n * @returns {int} fontSize\n */\nROT.Display.prototype.computeFontSize = function(availWidth, availHeight) {\n\treturn this._backend.computeFontSize(availWidth, availHeight, this._options);\n};\n\n/**\n * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.\n * @param {Event} e event\n * @returns {int[2]} -1 for values outside of the canvas\n */\nROT.Display.prototype.eventToPosition = function(e) {\n\tif (e.touches) {\n\t\tvar x = e.touches[0].clientX;\n\t\tvar y = e.touches[0].clientY;\n\t} else {\n\t\tvar x = e.clientX;\n\t\tvar y = e.clientY;\n\t}\n\n\tvar rect = this._context.canvas.getBoundingClientRect();\n\tx -= rect.left;\n\ty -= rect.top;\n\t\n\tx *= this._context.canvas.width / this._context.canvas.clientWidth;\n\ty *= this._context.canvas.height / this._context.canvas.clientHeight;\n\n\tif (x < 0 || y < 0 || x >= this._context.canvas.width || y >= this._context.canvas.height) { return [-1, -1]; }\n\n\treturn this._backend.eventToPosition(x, y);\n};\n\n/**\n * @param {int} x\n * @param {int} y\n * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n * @param {string} [fg] foreground color\n * @param {string} [bg] background color\n */\nROT.Display.prototype.draw = function(x, y, ch, fg, bg) {\n\tif (!fg) { fg = this._options.fg; }\n\tif (!bg) { bg = this._options.bg; }\n\tthis._data[x+\",\"+y] = [x, y, ch, fg, bg];\n\t\n\tif (this._dirty === true) { return; } /* will already redraw everything */\n\tif (!this._dirty) { this._dirty = {}; } /* first! */\n\tthis._dirty[x+\",\"+y] = true;\n};\n\n/**\n * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.\n * @param {int} x\n * @param {int} y\n * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.\n * @param {int} [maxWidth] wrap at what width?\n * @returns {int} lines drawn\n */\nROT.Display.prototype.drawText = function(x, y, text, maxWidth) {\n\tvar fg = null;\n\tvar bg = null;\n\tvar cx = x;\n\tvar cy = y;\n\tvar lines = 1;\n\tif (!maxWidth) { maxWidth = this._options.width-x; }\n\n\tvar tokens = ROT.Text.tokenize(text, maxWidth);\n\n\twhile (tokens.length) { /* interpret tokenized opcode stream */\n\t\tvar token = tokens.shift();\n\t\tswitch (token.type) {\n\t\t\tcase ROT.Text.TYPE_TEXT:\n\t\t\t\tvar isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\n\t\t\t\tfor (var i=0;i<token.value.length;i++) {\n\t\t\t\t\tvar cc = token.value.charCodeAt(i);\n\t\t\t\t\tvar c = token.value.charAt(i);\n\t\t\t\t\t// Assign to `true` when the current char is full-width.\n\t\t\t\t\tisFullWidth = (cc > 0xff00 && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) || cc > 0xffee;\n\t\t\t\t\t// Current char is space, whatever full-width or half-width both are OK.\n\t\t\t\t\tisSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);\n\t\t\t\t\t// The previous char is full-width and\n\t\t\t\t\t// current char is nether half-width nor a space.\n\t\t\t\t\tif (isPrevFullWidth && !isFullWidth && !isSpace) { cx++; } // add an extra position\n\t\t\t\t\t// The current char is full-width and\n\t\t\t\t\t// the previous char is not a space.\n\t\t\t\t\tif(isFullWidth && !isPrevSpace) { cx++; } // add an extra position\n\t\t\t\t\tthis.draw(cx++, cy, c, fg, bg);\n\t\t\t\t\tisPrevSpace = isSpace;\n\t\t\t\t\tisPrevFullWidth = isFullWidth;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase ROT.Text.TYPE_FG:\n\t\t\t\tfg = token.value || null;\n\t\t\tbreak;\n\n\t\t\tcase ROT.Text.TYPE_BG:\n\t\t\t\tbg = token.value || null;\n\t\t\tbreak;\n\n\t\t\tcase ROT.Text.TYPE_NEWLINE:\n\t\t\t\tcx = x;\n\t\t\t\tcy++;\n\t\t\t\tlines++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lines;\n};\n\n/**\n * Timer tick: update dirty parts\n */\nROT.Display.prototype._tick = function() {\n\trequestAnimationFrame(this._tick);\n\n\tif (!this._dirty) { return; }\n\n\tif (this._dirty === true) { /* draw all */\n\t\tthis._context.fillStyle = this._options.bg;\n\t\tthis._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n\n\t\tfor (var id in this._data) { /* redraw cached data */\n\t\t\tthis._draw(id, false);\n\t\t}\n\n\t} else { /* draw only dirty */\n\t\tfor (var key in this._dirty) {\n\t\t\tthis._draw(key, true);\n\t\t}\n\t}\n\n\tthis._dirty = false;\n};\n\n/**\n * @param {string} key What to draw\n * @param {bool} clearBefore Is it necessary to clean before?\n */\nROT.Display.prototype._draw = function(key, clearBefore) {\n\tvar data = this._data[key];\n\tif (data[4] != this._options.bg) { clearBefore = true; }\n\n\tthis._backend.draw(data, clearBefore);\n};\n/**\n * @class Abstract display backend module\n * @private\n */\nROT.Display.Backend = function(context) {\n\tthis._context = context;\n};\n\nROT.Display.Backend.prototype.compute = function(options) {\n};\n\nROT.Display.Backend.prototype.draw = function(data, clearBefore) {\n};\n\nROT.Display.Backend.prototype.computeSize = function(availWidth, availHeight) {\n};\n\nROT.Display.Backend.prototype.computeFontSize = function(availWidth, availHeight) {\n};\n\nROT.Display.Backend.prototype.eventToPosition = function(x, y) {\n};\n/**\n * @class Rectangular backend\n * @private\n */\nROT.Display.Rect = function(context) {\n\tROT.Display.Backend.call(this, context);\n\t\n\tthis._spacingX = 0;\n\tthis._spacingY = 0;\n\tthis._canvasCache = {};\n\tthis._options = {};\n};\nROT.Display.Rect.extend(ROT.Display.Backend);\n\nROT.Display.Rect.cache = false;\n\nROT.Display.Rect.prototype.compute = function(options) {\n\tthis._canvasCache = {};\n\tthis._options = options;\n\n\tvar charWidth = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._spacingX = Math.ceil(options.spacing * charWidth);\n\tthis._spacingY = Math.ceil(options.spacing * options.fontSize);\n\n\tif (this._options.forceSquareRatio) {\n\t\tthis._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\n\t}\n\n\tthis._context.canvas.width = options.width * this._spacingX;\n\tthis._context.canvas.height = options.height * this._spacingY;\n};\n\nROT.Display.Rect.prototype.draw = function(data, clearBefore) {\n\tif (this.constructor.cache) {\n\t\tthis._drawWithCache(data, clearBefore);\n\t} else {\n\t\tthis._drawNoCache(data, clearBefore);\n\t}\n};\n\nROT.Display.Rect.prototype._drawWithCache = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tvar hash = \"\"+ch+fg+bg;\n\tif (hash in this._canvasCache) {\n\t\tvar canvas = this._canvasCache[hash];\n\t} else {\n\t\tvar b = this._options.border;\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tcanvas.width = this._spacingX;\n\t\tcanvas.height = this._spacingY;\n\t\tctx.fillStyle = bg;\n\t\tctx.fillRect(b, b, canvas.width-b, canvas.height-b);\n\t\t\n\t\tif (ch) {\n\t\t\tctx.fillStyle = fg;\n\t\t\tctx.font = this._context.font;\n\t\t\tctx.textAlign = \"center\";\n\t\t\tctx.textBaseline = \"middle\";\n\n\t\t\tvar chars = [].concat(ch);\n\t\t\tfor (var i=0;i<chars.length;i++) {\n\t\t\t\tctx.fillText(chars[i], this._spacingX/2, Math.ceil(this._spacingY/2));\n\t\t\t}\n\t\t}\n\t\tthis._canvasCache[hash] = canvas;\n\t}\n\t\n\tthis._context.drawImage(canvas, x*this._spacingX, y*this._spacingY);\n};\n\nROT.Display.Rect.prototype._drawNoCache = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tif (clearBefore) { \n\t\tvar b = this._options.border;\n\t\tthis._context.fillStyle = bg;\n\t\tthis._context.fillRect(x*this._spacingX + b, y*this._spacingY + b, this._spacingX - b, this._spacingY - b);\n\t}\n\t\n\tif (!ch) { return; }\n\n\tthis._context.fillStyle = fg;\n\n\tvar chars = [].concat(ch);\n\tfor (var i=0;i<chars.length;i++) {\n\t\tthis._context.fillText(chars[i], (x+0.5) * this._spacingX, Math.ceil((y+0.5) * this._spacingY));\n\t}\n};\n\nROT.Display.Rect.prototype.computeSize = function(availWidth, availHeight) {\n\tvar width = Math.floor(availWidth / this._spacingX);\n\tvar height = Math.floor(availHeight / this._spacingY);\n\treturn [width, height];\n};\n\nROT.Display.Rect.prototype.computeFontSize = function(availWidth, availHeight) {\n\tvar boxWidth = Math.floor(availWidth / this._options.width);\n\tvar boxHeight = Math.floor(availHeight / this._options.height);\n\n\t/* compute char ratio */\n\tvar oldFont = this._context.font;\n\tthis._context.font = \"100px \" + this._options.fontFamily;\n\tvar width = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._context.font = oldFont;\n\tvar ratio = width / 100;\n\t\t\n\tvar widthFraction = ratio * boxHeight / boxWidth;\n\tif (widthFraction > 1) { /* too wide with current aspect ratio */\n\t\tboxHeight = Math.floor(boxHeight / widthFraction);\n\t}\n\treturn Math.floor(boxHeight / this._options.spacing);\n};\n\nROT.Display.Rect.prototype.eventToPosition = function(x, y) {\n\treturn [Math.floor(x/this._spacingX), Math.floor(y/this._spacingY)];\n};\n/**\n * @class Hexagonal backend\n * @private\n */\nROT.Display.Hex = function(context) {\n\tROT.Display.Backend.call(this, context);\n\n\tthis._spacingX = 0;\n\tthis._spacingY = 0;\n\tthis._hexSize = 0;\n\tthis._options = {};\n};\nROT.Display.Hex.extend(ROT.Display.Backend);\n\nROT.Display.Hex.prototype.compute = function(options) {\n\tthis._options = options;\n\n\t/* FIXME char size computation does not respect transposed hexes */\n\tvar charWidth = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._hexSize = Math.floor(options.spacing * (options.fontSize + charWidth/Math.sqrt(3)) / 2);\n\tthis._spacingX = this._hexSize * Math.sqrt(3) / 2;\n\tthis._spacingY = this._hexSize * 1.5;\n\n\tif (options.transpose) {\n\t\tvar xprop = \"height\";\n\t\tvar yprop = \"width\";\n\t} else {\n\t\tvar xprop = \"width\";\n\t\tvar yprop = \"height\";\n\t}\n\tthis._context.canvas[xprop] = Math.ceil( (options.width + 1) * this._spacingX );\n\tthis._context.canvas[yprop] = Math.ceil( (options.height - 1) * this._spacingY + 2*this._hexSize );\n};\n\nROT.Display.Hex.prototype.draw = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tvar px = [\n\t\t(x+1) * this._spacingX,\n\t\ty * this._spacingY + this._hexSize\n\t];\n\tif (this._options.transpose) { px.reverse(); }\n\n\tif (clearBefore) {\n\t\tthis._context.fillStyle = bg;\n\t\tthis._fill(px[0], px[1]);\n\t}\n\n\tif (!ch) { return; }\n\n\tthis._context.fillStyle = fg;\n\n\tvar chars = [].concat(ch);\n\tfor (var i=0;i<chars.length;i++) {\n\t\tthis._context.fillText(chars[i], px[0], Math.ceil(px[1]));\n\t}\n};\n\nROT.Display.Hex.prototype.computeSize = function(availWidth, availHeight) {\n\tif (this._options.transpose) {\n\t\tavailWidth += availHeight;\n\t\tavailHeight = availWidth - availHeight;\n\t\tavailWidth -= availHeight;\n\t}\n\n\tvar width = Math.floor(availWidth / this._spacingX) - 1;\n\tvar height = Math.floor((availHeight - 2*this._hexSize) / this._spacingY + 1);\n\treturn [width, height];\n};\n\nROT.Display.Hex.prototype.computeFontSize = function(availWidth, availHeight) {\n\tif (this._options.transpose) {\n\t\tavailWidth += availHeight;\n\t\tavailHeight = availWidth - availHeight;\n\t\tavailWidth -= availHeight;\n\t}\n\n\tvar hexSizeWidth = 2*availWidth / ((this._options.width+1) * Math.sqrt(3)) - 1;\n\tvar hexSizeHeight = availHeight / (2 + 1.5*(this._options.height-1));\n\tvar hexSize = Math.min(hexSizeWidth, hexSizeHeight);\n\n\t/* compute char ratio */\n\tvar oldFont = this._context.font;\n\tthis._context.font = \"100px \" + this._options.fontFamily;\n\tvar width = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._context.font = oldFont;\n\tvar ratio = width / 100;\n\n\thexSize = Math.floor(hexSize)+1; /* closest larger hexSize */\n\n\t/* FIXME char size computation does not respect transposed hexes */\n\tvar fontSize = 2*hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\n\n\t/* closest smaller fontSize */\n\treturn Math.ceil(fontSize)-1;\n};\n\nROT.Display.Hex.prototype.eventToPosition = function(x, y) {\n\tif (this._options.transpose) {\n\t\tx += y;\n\t\ty = x-y;\n\t\tx -= y;\n\t\tvar nodeSize = this._context.canvas.width;\n\t} else {\n\t\tvar nodeSize = this._context.canvas.height;\n\t}\n\tvar size = nodeSize / this._options.height;\n\ty = Math.floor(y/size);\n\n\tif (y.mod(2)) { /* odd row */\n\t\tx -= this._spacingX;\n\t\tx = 1 + 2*Math.floor(x/(2*this._spacingX));\n\t} else {\n\t\tx = 2*Math.floor(x/(2*this._spacingX));\n\t}\n\n\treturn [x, y];\n};\n\n/**\n * Arguments are pixel values. If \"transposed\" mode is enabled, then these two are already swapped.\n */\nROT.Display.Hex.prototype._fill = function(cx, cy) {\n\tvar a = this._hexSize;\n\tvar b = this._options.border;\n\n\tthis._context.beginPath();\n\n\tif (this._options.transpose) {\n\t\tthis._context.moveTo(cx-a+b,\tcy);\n\t\tthis._context.lineTo(cx-a/2+b,\tcy+this._spacingX-b);\n\t\tthis._context.lineTo(cx+a/2-b,\tcy+this._spacingX-b);\n\t\tthis._context.lineTo(cx+a-b,\tcy);\n\t\tthis._context.lineTo(cx+a/2-b,\tcy-this._spacingX+b);\n\t\tthis._context.lineTo(cx-a/2+b,\tcy-this._spacingX+b);\n\t\tthis._context.lineTo(cx-a+b,\tcy);\n\t} else {\n\t\tthis._context.moveTo(cx,\t\t\t\t\tcy-a+b);\n\t\tthis._context.lineTo(cx+this._spacingX-b,\tcy-a/2+b);\n\t\tthis._context.lineTo(cx+this._spacingX-b,\tcy+a/2-b);\n\t\tthis._context.lineTo(cx,\t\t\t\t\tcy+a-b);\n\t\tthis._context.lineTo(cx-this._spacingX+b,\tcy+a/2-b);\n\t\tthis._context.lineTo(cx-this._spacingX+b,\tcy-a/2+b);\n\t\tthis._context.lineTo(cx,\t\t\t\t\tcy-a+b);\n\t}\n\tthis._context.fill();\n};\n/**\n * @class Tile backend\n * @private\n */\nROT.Display.Tile = function(context) {\n\tROT.Display.Rect.call(this, context);\n\t\n\tthis._options = {};\n\tthis._colorCanvas = document.createElement(\"canvas\");\n};\nROT.Display.Tile.extend(ROT.Display.Rect);\n\nROT.Display.Tile.prototype.compute = function(options) {\n\tthis._options = options;\n\tthis._context.canvas.width = options.width * options.tileWidth;\n\tthis._context.canvas.height = options.height * options.tileHeight;\n\tthis._colorCanvas.width = options.tileWidth;\n\tthis._colorCanvas.height = options.tileHeight;\n};\n\nROT.Display.Tile.prototype.draw = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tvar tileWidth = this._options.tileWidth;\n\tvar tileHeight = this._options.tileHeight;\n\n\tif (clearBefore) {\n\t\tif (this._options.tileColorize) {\n\t\t\tthis._context.clearRect(x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n\t\t} else {\n\t\t\tthis._context.fillStyle = bg;\n\t\t\tthis._context.fillRect(x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n\t\t}\n\t}\n\n\tif (!ch) { return; }\n\n\tvar chars = [].concat(ch);\n\tfor (var i=0;i<chars.length;i++) {\n\t\tvar tile = this._options.tileMap[chars[i]];\n\t\tif (!tile) { throw new Error(\"Char '\" + chars[i] + \"' not found in tileMap\"); }\n\t\t\n\t\tif (this._options.tileColorize) { /* apply colorization */\n\t\t\tvar canvas = this._colorCanvas;\n\t\t\tvar context = canvas.getContext(\"2d\");\n\t\t\tcontext.clearRect(0, 0, tileWidth, tileHeight);\n\n\t\t\tcontext.drawImage(\n\t\t\t\tthis._options.tileSet,\n\t\t\t\ttile[0], tile[1], tileWidth, tileHeight,\n\t\t\t\t0, 0, tileWidth, tileHeight\n\t\t\t);\n\n\t\t\tif (fg != \"transparent\") {\n\t\t\t\tcontext.fillStyle = fg;\n\t\t\t\tcontext.globalCompositeOperation = \"source-atop\";\n\t\t\t\tcontext.fillRect(0, 0, tileWidth, tileHeight);\n\t\t\t}\n\n\t\t\tif (bg != \"transparent\") {\n\t\t\t\tcontext.fillStyle = bg;\n\t\t\t\tcontext.globalCompositeOperation = \"destination-over\";\n\t\t\t\tcontext.fillRect(0, 0, tileWidth, tileHeight);\n\t\t\t}\n\n\t\t\tthis._context.drawImage(canvas, x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n\n\t\t} else { /* no colorizing, easy */\n\t\t\tthis._context.drawImage(\n\t\t\t\tthis._options.tileSet,\n\t\t\t\ttile[0], tile[1], tileWidth, tileHeight,\n\t\t\t\tx*tileWidth, y*tileHeight, tileWidth, tileHeight\n\t\t\t);\n\t\t}\n\t}\n};\n\nROT.Display.Tile.prototype.computeSize = function(availWidth, availHeight) {\n\tvar width = Math.floor(availWidth / this._options.tileWidth);\n\tvar height = Math.floor(availHeight / this._options.tileHeight);\n\treturn [width, height];\n};\n\nROT.Display.Tile.prototype.computeFontSize = function(availWidth, availHeight) {\n\tvar width = Math.floor(availWidth / this._options.width);\n\tvar height = Math.floor(availHeight / this._options.height);\n\treturn [width, height];\n};\n\nROT.Display.Tile.prototype.eventToPosition = function(x, y) {\n\treturn [Math.floor(x/this._options.tileWidth), Math.floor(y/this._options.tileHeight)];\n};\n/**\n * @namespace\n * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baagøe.\n * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.\n */\nROT.RNG = {\n\t/**\n\t * @returns {number} \n\t */\n\tgetSeed: function() {\n\t\treturn this._seed;\n\t},\n\n\t/**\n\t * @param {number} seed Seed the number generator\n\t */\n\tsetSeed: function(seed) {\n\t\tseed = (seed < 1 ? 1/seed : seed);\n\n\t\tthis._seed = seed;\n\t\tthis._s0 = (seed >>> 0) * this._frac;\n\n\t\tseed = (seed*69069 + 1) >>> 0;\n\t\tthis._s1 = seed * this._frac;\n\n\t\tseed = (seed*69069 + 1) >>> 0;\n\t\tthis._s2 = seed * this._frac;\n\n\t\tthis._c = 1;\n\t\treturn this;\n\t},\n\n\t/**\n\t * @returns {float} Pseudorandom value [0,1), uniformly distributed\n\t */\n\tgetUniform: function() {\n\t\tvar t = 2091639 * this._s0 + this._c * this._frac;\n\t\tthis._s0 = this._s1;\n\t\tthis._s1 = this._s2;\n\t\tthis._c = t | 0;\n\t\tthis._s2 = t - this._c;\n\t\treturn this._s2;\n\t},\n\n\t/**\n\t * @param {int} lowerBound The lower end of the range to return a value from, inclusive\n\t * @param {int} upperBound The upper end of the range to return a value from, inclusive\n\t * @returns {int} Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value\n\t */\n\tgetUniformInt: function(lowerBound, upperBound) {\n\t\tvar max = Math.max(lowerBound, upperBound);\n\t\tvar min = Math.min(lowerBound, upperBound);\n\t\treturn Math.floor(this.getUniform() * (max - min + 1)) + min;\n\t},\n\n\t/**\n\t * @param {float} [mean=0] Mean value\n\t * @param {float} [stddev=1] Standard deviation. ~95% of the absolute values will be lower than 2*stddev.\n\t * @returns {float} A normally distributed pseudorandom value\n\t */\n\tgetNormal: function(mean, stddev) {\n\t\tdo {\n\t\t\tvar u = 2*this.getUniform()-1;\n\t\t\tvar v = 2*this.getUniform()-1;\n\t\t\tvar r = u*u + v*v;\n\t\t} while (r > 1 || r == 0);\n\n\t\tvar gauss = u * Math.sqrt(-2*Math.log(r)/r);\n\t\treturn (mean || 0) + gauss*(stddev || 1);\n\t},\n\n\t/**\n\t * @returns {int} Pseudorandom value [1,100] inclusive, uniformly distributed\n\t */\n\tgetPercentage: function() {\n\t\treturn 1 + Math.floor(this.getUniform()*100);\n\t},\n\t\n\t/**\n\t * @param {object} data key=whatever, value=weight (relative probability)\n\t * @returns {string} whatever\n\t */\n\tgetWeightedValue: function(data) {\n\t\tvar total = 0;\n\t\t\n\t\tfor (var id in data) {\n\t\t\ttotal += data[id];\n\t\t}\n\t\tvar random = this.getUniform()*total;\n\t\t\n\t\tvar part = 0;\n\t\tfor (var id in data) {\n\t\t\tpart += data[id];\n\t\t\tif (random < part) { return id; }\n\t\t}\n\n\t\t// If by some floating-point annoyance we have\n\t\t// random >= total, just return the last id.\n\t\treturn id;\n\t},\n\n\t/**\n\t * Get RNG state. Useful for storing the state and re-setting it via setState.\n\t * @returns {?} Internal state\n\t */\n\tgetState: function() {\n\t\treturn [this._s0, this._s1, this._s2, this._c];\n\t},\n\n\t/**\n\t * Set a previously retrieved state.\n\t * @param {?} state\n\t */\n\tsetState: function(state) {\n\t\tthis._s0 = state[0];\n\t\tthis._s1 = state[1];\n\t\tthis._s2 = state[2];\n\t\tthis._c  = state[3];\n\t\treturn this;\n\t},\n\n\t/**\n\t * Returns a cloned RNG\n\t */\n\tclone: function() {\n\t\tvar clone = Object.create(this);\n\t\tclone.setState(this.getState());\n\t\treturn clone;\n\t},\n\n\t_s0: 0,\n\t_s1: 0,\n\t_s2: 0,\n\t_c: 0,\n\t_frac: 2.3283064365386963e-10 /* 2^-32 */\n};\n\nROT.RNG.setSeed(Date.now());\n/**\n * @class (Markov process)-based string generator. \n * Copied from a <a href=\"http://www.roguebasin.roguelikedevelopment.org/index.php?title=Names_from_a_high_order_Markov_Process_and_a_simplified_Katz_back-off_scheme\">RogueBasin article</a>. \n * Offers configurable order and prior.\n * @param {object} [options]\n * @param {bool} [options.words=false] Use word mode?\n * @param {int} [options.order=3]\n * @param {float} [options.prior=0.001]\n */\nROT.StringGenerator = function(options) {\n\tthis._options = {\n\t\twords: false,\n\t\torder: 3,\n\t\tprior: 0.001\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\tthis._boundary = String.fromCharCode(0);\n\tthis._suffix = this._boundary;\n\tthis._prefix = [];\n\tfor (var i=0;i<this._options.order;i++) { this._prefix.push(this._boundary); }\n\n\tthis._priorValues = {};\n\tthis._priorValues[this._boundary] = this._options.prior;\n\n\tthis._data = {};\n};\n\n/**\n * Remove all learning data\n */\nROT.StringGenerator.prototype.clear = function() {\n\tthis._data = {};\n\tthis._priorValues = {};\n};\n\n/**\n * @returns {string} Generated string\n */\nROT.StringGenerator.prototype.generate = function() {\n\tvar result = [this._sample(this._prefix)];\n\twhile (result[result.length-1] != this._boundary) {\n\t\tresult.push(this._sample(result));\n\t}\n\treturn this._join(result.slice(0, -1));\n};\n\n/**\n * Observe (learn) a string from a training set\n */\nROT.StringGenerator.prototype.observe = function(string) {\n\tvar tokens = this._split(string);\n\n\tfor (var i=0; i<tokens.length; i++) {\n\t\tthis._priorValues[tokens[i]] = this._options.prior;\n\t}\n\n\ttokens = this._prefix.concat(tokens).concat(this._suffix); /* add boundary symbols */\n\n\tfor (var i=this._options.order; i<tokens.length; i++) {\n\t\tvar context = tokens.slice(i-this._options.order, i);\n\t\tvar event = tokens[i];\n\t\tfor (var j=0; j<context.length; j++) {\n\t\t\tvar subcontext = context.slice(j);\n\t\t\tthis._observeEvent(subcontext, event);\n\t\t}\n\t}\n};\n\nROT.StringGenerator.prototype.getStats = function() {\n\tvar parts = [];\n\n\tvar priorCount = 0;\n\tfor (var p in this._priorValues) { priorCount++; }\n\tpriorCount--; /* boundary */\n\tparts.push(\"distinct samples: \" + priorCount);\n\n\tvar dataCount = 0;\n\tvar eventCount = 0;\n\tfor (var p in this._data) { \n\t\tdataCount++; \n\t\tfor (var key in this._data[p]) {\n\t\t\teventCount++;\n\t\t}\n\t}\n\tparts.push(\"dictionary size (contexts): \" + dataCount);\n\tparts.push(\"dictionary size (events): \" + eventCount);\n\n\treturn parts.join(\", \");\n};\n\n/**\n * @param {string}\n * @returns {string[]}\n */\nROT.StringGenerator.prototype._split = function(str) {\n\treturn str.split(this._options.words ? /\\s+/ : \"\");\n};\n\n/**\n * @param {string[]}\n * @returns {string} \n */\nROT.StringGenerator.prototype._join = function(arr) {\n\treturn arr.join(this._options.words ? \" \" : \"\");\n};\n\n/**\n * @param {string[]} context\n * @param {string} event\n */\nROT.StringGenerator.prototype._observeEvent = function(context, event) {\n\tvar key = this._join(context);\n\tif (!(key in this._data)) { this._data[key] = {}; }\n\tvar data = this._data[key];\n\n\tif (!(event in data)) { data[event] = 0; }\n\tdata[event]++;\n};\n\n/**\n * @param {string[]}\n * @returns {string}\n */\nROT.StringGenerator.prototype._sample = function(context) {\n\tcontext = this._backoff(context);\n\tvar key = this._join(context);\n\tvar data = this._data[key];\n\n\tvar available = {};\n\n\tif (this._options.prior) {\n\t\tfor (var event in this._priorValues) { available[event] = this._priorValues[event]; }\n\t\tfor (var event in data) { available[event] += data[event]; }\n\t} else { \n\t\tavailable = data;\n\t}\n\n\treturn ROT.RNG.getWeightedValue(available);\n};\n\n/**\n * @param {string[]}\n * @returns {string[]}\n */\nROT.StringGenerator.prototype._backoff = function(context) {\n\tif (context.length > this._options.order) {\n\t\tcontext = context.slice(-this._options.order);\n\t} else if (context.length < this._options.order) {\n\t\tcontext = this._prefix.slice(0, this._options.order - context.length).concat(context);\n\t}\n\n\twhile (!(this._join(context) in this._data) && context.length > 0) { context = context.slice(1); }\n\n\treturn context;\n};\n/**\n * @class Generic event queue: stores events and retrieves them based on their time\n */\nROT.EventQueue = function() {\n\tthis._time = 0;\n\tthis._events = [];\n\tthis._eventTimes = [];\n};\n\n/**\n * @returns {number} Elapsed time\n */\nROT.EventQueue.prototype.getTime = function() {\n\treturn this._time;\n};\n\n/**\n * Clear all scheduled events\n */\nROT.EventQueue.prototype.clear = function() {\n\tthis._events = [];\n\tthis._eventTimes = [];\n\treturn this;\n};\n\n/**\n * @param {?} event\n * @param {number} time\n */\nROT.EventQueue.prototype.add = function(event, time) {\n\tvar index = this._events.length;\n\tfor (var i=0;i<this._eventTimes.length;i++) {\n\t\tif (this._eventTimes[i] > time) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tthis._events.splice(index, 0, event);\n\tthis._eventTimes.splice(index, 0, time);\n};\n\n/**\n * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.\n * @returns {? || null} The event previously added by addEvent, null if no event available\n */\nROT.EventQueue.prototype.get = function() {\n\tif (!this._events.length) { return null; }\n\n\tvar time = this._eventTimes.splice(0, 1)[0];\n\tif (time > 0) { /* advance */\n\t\tthis._time += time;\n\t\tfor (var i=0;i<this._eventTimes.length;i++) { this._eventTimes[i] -= time; }\n\t}\n\n\treturn this._events.splice(0, 1)[0];\n};\n\n/**\n * Get the time associated with the given event\n * @param {?} event\n * @returns {number} time\n */\nROT.EventQueue.prototype.getEventTime = function(event) {\n\tvar index = this._events.indexOf(event);\n\tif (index == -1) { return undefined }\n\treturn this._eventTimes[index];\n};\n\n/**\n * Remove an event from the queue\n * @param {?} event\n * @returns {bool} success?\n */\nROT.EventQueue.prototype.remove = function(event) {\n\tvar index = this._events.indexOf(event);\n\tif (index == -1) { return false }\n\tthis._remove(index);\n\treturn true;\n};\n\n/**\n * Remove an event from the queue\n * @param {int} index\n */\nROT.EventQueue.prototype._remove = function(index) {\n\tthis._events.splice(index, 1);\n\tthis._eventTimes.splice(index, 1);\n};\n/**\n * @class Abstract scheduler\n */\nROT.Scheduler = function() {\n\tthis._queue = new ROT.EventQueue();\n\tthis._repeat = [];\n\tthis._current = null;\n};\n\n/**\n * @see ROT.EventQueue#getTime\n */\nROT.Scheduler.prototype.getTime = function() {\n\treturn this._queue.getTime();\n};\n\n/**\n * @param {?} item\n * @param {bool} repeat\n */\nROT.Scheduler.prototype.add = function(item, repeat) {\n\tif (repeat) { this._repeat.push(item); }\n\treturn this;\n};\n\n/**\n * Get the time the given item is scheduled for\n * @param {?} item\n * @returns {number} time\n */\nROT.Scheduler.prototype.getTimeOf = function(item) {\n\treturn this._queue.getEventTime(item);\n};\n\n/**\n * Clear all items\n */\nROT.Scheduler.prototype.clear = function() {\n\tthis._queue.clear();\n\tthis._repeat = [];\n\tthis._current = null;\n\treturn this;\n};\n\n/**\n * Remove a previously added item\n * @param {?} item\n * @returns {bool} successful?\n */\nROT.Scheduler.prototype.remove = function(item) {\n\tvar result = this._queue.remove(item);\n\n\tvar index = this._repeat.indexOf(item);\n\tif (index != -1) { this._repeat.splice(index, 1); }\n\n\tif (this._current == item) { this._current = null; }\n\n\treturn result;\n};\n\n/**\n * Schedule next item\n * @returns {?}\n */\nROT.Scheduler.prototype.next = function() {\n\tthis._current = this._queue.get();\n\treturn this._current;\n};\n/**\n * @class Simple fair scheduler (round-robin style)\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Simple = function() {\n\tROT.Scheduler.call(this);\n};\nROT.Scheduler.Simple.extend(ROT.Scheduler);\n\n/**\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Simple.prototype.add = function(item, repeat) {\n\tthis._queue.add(item, 0);\n\treturn ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\n/**\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Simple.prototype.next = function() {\n\tif (this._current && this._repeat.indexOf(this._current) != -1) {\n\t\tthis._queue.add(this._current, 0);\n\t}\n\treturn ROT.Scheduler.prototype.next.call(this);\n};\n/**\n * @class Speed-based scheduler\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Speed = function() {\n\tROT.Scheduler.call(this);\n};\nROT.Scheduler.Speed.extend(ROT.Scheduler);\n\n/**\n * @param {object} item anything with \"getSpeed\" method\n * @param {bool} repeat\n * @param {number} [time=1/item.getSpeed()]\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Speed.prototype.add = function(item, repeat, time) {\n\tthis._queue.add(item, time !== undefined ? time : 1/item.getSpeed());\n\treturn ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\n/**\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Speed.prototype.next = function() {\n\tif (this._current && this._repeat.indexOf(this._current) != -1) {\n\t\tthis._queue.add(this._current, 1/this._current.getSpeed());\n\t}\n\treturn ROT.Scheduler.prototype.next.call(this);\n};\n/**\n * @class Action-based scheduler\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Action = function() {\n\tROT.Scheduler.call(this);\n\tthis._defaultDuration = 1; /* for newly added */\n\tthis._duration = this._defaultDuration; /* for this._current */\n};\nROT.Scheduler.Action.extend(ROT.Scheduler);\n\n/**\n * @param {object} item\n * @param {bool} repeat\n * @param {number} [time=1]\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Action.prototype.add = function(item, repeat, time) {\n\tthis._queue.add(item, time || this._defaultDuration);\n\treturn ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\nROT.Scheduler.Action.prototype.clear = function() {\n\tthis._duration = this._defaultDuration;\n\treturn ROT.Scheduler.prototype.clear.call(this);\n};\n\nROT.Scheduler.Action.prototype.remove = function(item) {\n\tif (item == this._current) { this._duration = this._defaultDuration; }\n\treturn ROT.Scheduler.prototype.remove.call(this, item);\n};\n\n/**\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Action.prototype.next = function() {\n\tif (this._current && this._repeat.indexOf(this._current) != -1) {\n\t\tthis._queue.add(this._current, this._duration || this._defaultDuration);\n\t\tthis._duration = this._defaultDuration;\n\t}\n\treturn ROT.Scheduler.prototype.next.call(this);\n};\n\n/**\n * Set duration for the active item\n */\nROT.Scheduler.Action.prototype.setDuration = function(time) {\n\tif (this._current) { this._duration = time; }\n\treturn this;\n};\n/**\n * @class Asynchronous main loop\n * @param {ROT.Scheduler} scheduler\n */\nROT.Engine = function(scheduler) {\n\tthis._scheduler = scheduler;\n\tthis._lock = 1;\n};\n\n/**\n * Start the main loop. When this call returns, the loop is locked.\n */\nROT.Engine.prototype.start = function() {\n\treturn this.unlock();\n};\n\n/**\n * Interrupt the engine by an asynchronous action\n */\nROT.Engine.prototype.lock = function() {\n\tthis._lock++;\n\treturn this;\n};\n\n/**\n * Resume execution (paused by a previous lock)\n */\nROT.Engine.prototype.unlock = function() {\n\tif (!this._lock) { throw new Error(\"Cannot unlock unlocked engine\"); }\n\tthis._lock--;\n\n\twhile (!this._lock) {\n\t\tvar actor = this._scheduler.next();\n\t\tif (!actor) { return this.lock(); } /* no actors */\n\t\tvar result = actor.act();\n\t\tif (result && result.then) { /* actor returned a \"thenable\", looks like a Promise */\n\t\t\tthis.lock();\n\t\t\tresult.then(this.unlock.bind(this));\n\t\t}\n\t}\n\n\treturn this;\n};\n/**\n * @class Base map generator\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n */\nROT.Map = function(width, height) {\n\tthis._width = width || ROT.DEFAULT_WIDTH;\n\tthis._height = height || ROT.DEFAULT_HEIGHT;\n};\n\nROT.Map.prototype.create = function(callback) {};\n\nROT.Map.prototype._fillMap = function(value) {\n\tvar map = [];\n\tfor (var i=0;i<this._width;i++) {\n\t\tmap.push([]);\n\t\tfor (var j=0;j<this._height;j++) { map[i].push(value); }\n\t}\n\treturn map;\n};\n/**\n * @class Simple empty rectangular room\n * @augments ROT.Map\n */\nROT.Map.Arena = function(width, height) {\n\tROT.Map.call(this, width, height);\n};\nROT.Map.Arena.extend(ROT.Map);\n\nROT.Map.Arena.prototype.create = function(callback) {\n\tvar w = this._width-1;\n\tvar h = this._height-1;\n\tfor (var i=0;i<=w;i++) {\n\t\tfor (var j=0;j<=h;j++) {\n\t\t\tvar empty = (i && j && i<w && j<h);\n\t\t\tcallback(i, j, empty ? 0 : 1);\n\t\t}\n\t}\n\treturn this;\n};\n/**\n * @class Recursively divided maze, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method\n * @augments ROT.Map\n */\nROT.Map.DividedMaze = function(width, height) {\n\tROT.Map.call(this, width, height);\n\tthis._stack = [];\n};\nROT.Map.DividedMaze.extend(ROT.Map);\n\nROT.Map.DividedMaze.prototype.create = function(callback) {\n\tvar w = this._width;\n\tvar h = this._height;\n\t\n\tthis._map = [];\n\t\n\tfor (var i=0;i<w;i++) {\n\t\tthis._map.push([]);\n\t\tfor (var j=0;j<h;j++) {\n\t\t\tvar border = (i == 0 || j == 0 || i+1 == w || j+1 == h);\n\t\t\tthis._map[i].push(border ? 1 : 0);\n\t\t}\n\t}\n\t\n\tthis._stack = [\n\t\t[1, 1, w-2, h-2]\n\t];\n\tthis._process();\n\t\n\tfor (var i=0;i<w;i++) {\n\t\tfor (var j=0;j<h;j++) {\n\t\t\tcallback(i, j, this._map[i][j]);\n\t\t}\n\t}\n\tthis._map = null;\n\treturn this;\n};\n\nROT.Map.DividedMaze.prototype._process = function() {\n\twhile (this._stack.length) {\n\t\tvar room = this._stack.shift(); /* [left, top, right, bottom] */\n\t\tthis._partitionRoom(room);\n\t}\n};\n\nROT.Map.DividedMaze.prototype._partitionRoom = function(room) {\n\tvar availX = [];\n\tvar availY = [];\n\t\n\tfor (var i=room[0]+1;i<room[2];i++) {\n\t\tvar top = this._map[i][room[1]-1];\n\t\tvar bottom = this._map[i][room[3]+1];\n\t\tif (top && bottom && !(i % 2)) { availX.push(i); }\n\t}\n\t\n\tfor (var j=room[1]+1;j<room[3];j++) {\n\t\tvar left = this._map[room[0]-1][j];\n\t\tvar right = this._map[room[2]+1][j];\n\t\tif (left && right && !(j % 2)) { availY.push(j); }\n\t}\n\n\tif (!availX.length || !availY.length) { return; }\n\n\tvar x = availX.random();\n\tvar y = availY.random();\n\t\n\tthis._map[x][y] = 1;\n\t\n\tvar walls = [];\n\t\n\tvar w = []; walls.push(w); /* left part */\n\tfor (var i=room[0]; i<x; i++) { \n\t\tthis._map[i][y] = 1;\n\t\tw.push([i, y]); \n\t}\n\t\n\tvar w = []; walls.push(w); /* right part */\n\tfor (var i=x+1; i<=room[2]; i++) { \n\t\tthis._map[i][y] = 1;\n\t\tw.push([i, y]); \n\t}\n\n\tvar w = []; walls.push(w); /* top part */\n\tfor (var j=room[1]; j<y; j++) { \n\t\tthis._map[x][j] = 1;\n\t\tw.push([x, j]); \n\t}\n\t\n\tvar w = []; walls.push(w); /* bottom part */\n\tfor (var j=y+1; j<=room[3]; j++) { \n\t\tthis._map[x][j] = 1;\n\t\tw.push([x, j]); \n\t}\n\t\t\n\tvar solid = walls.random();\n\tfor (var i=0;i<walls.length;i++) {\n\t\tvar w = walls[i];\n\t\tif (w == solid) { continue; }\n\t\t\n\t\tvar hole = w.random();\n\t\tthis._map[hole[0]][hole[1]] = 0;\n\t}\n\n\tthis._stack.push([room[0], room[1], x-1, y-1]); /* left top */\n\tthis._stack.push([x+1, room[1], room[2], y-1]); /* right top */\n\tthis._stack.push([room[0], y+1, x-1, room[3]]); /* left bottom */\n\tthis._stack.push([x+1, y+1, room[2], room[3]]); /* right bottom */\n};\n/**\n * @class Icey's Maze generator\n * See http://www.roguebasin.roguelikedevelopment.org/index.php?title=Simple_maze for explanation\n * @augments ROT.Map\n */\nROT.Map.IceyMaze = function(width, height, regularity) {\n\tROT.Map.call(this, width, height);\n\tthis._regularity = regularity || 0;\n};\nROT.Map.IceyMaze.extend(ROT.Map);\n\nROT.Map.IceyMaze.prototype.create = function(callback) {\n\tvar width = this._width;\n\tvar height = this._height;\n\t\n\tvar map = this._fillMap(1);\n\t\n\twidth -= (width % 2 ? 1 : 2);\n\theight -= (height % 2 ? 1 : 2);\n\n\tvar cx = 0;\n\tvar cy = 0;\n\tvar nx = 0;\n\tvar ny = 0;\n\n\tvar done = 0;\n\tvar blocked = false;\n\tvar dirs = [\n\t\t[0, 0],\n\t\t[0, 0],\n\t\t[0, 0],\n\t\t[0, 0]\n\t];\n\tdo {\n\t\tcx = 1 + 2*Math.floor(ROT.RNG.getUniform()*(width-1) / 2);\n\t\tcy = 1 + 2*Math.floor(ROT.RNG.getUniform()*(height-1) / 2);\n\n\t\tif (!done) { map[cx][cy] = 0; }\n\t\t\n\t\tif (!map[cx][cy]) {\n\t\t\tthis._randomize(dirs);\n\t\t\tdo {\n\t\t\t\tif (Math.floor(ROT.RNG.getUniform()*(this._regularity+1)) == 0) { this._randomize(dirs); }\n\t\t\t\tblocked = true;\n\t\t\t\tfor (var i=0;i<4;i++) {\n\t\t\t\t\tnx = cx + dirs[i][0]*2;\n\t\t\t\t\tny = cy + dirs[i][1]*2;\n\t\t\t\t\tif (this._isFree(map, nx, ny, width, height)) {\n\t\t\t\t\t\tmap[nx][ny] = 0;\n\t\t\t\t\t\tmap[cx + dirs[i][0]][cy + dirs[i][1]] = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcx = nx;\n\t\t\t\t\t\tcy = ny;\n\t\t\t\t\t\tblocked = false;\n\t\t\t\t\t\tdone++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (!blocked);\n\t\t}\n\t} while (done+1 < width*height/4);\n\t\n\tfor (var i=0;i<this._width;i++) {\n\t\tfor (var j=0;j<this._height;j++) {\n\t\t\tcallback(i, j, map[i][j]);\n\t\t}\n\t}\n\tthis._map = null;\n\treturn this;\n};\n\nROT.Map.IceyMaze.prototype._randomize = function(dirs) {\n\tfor (var i=0;i<4;i++) {\n\t\tdirs[i][0] = 0;\n\t\tdirs[i][1] = 0;\n\t}\n\t\n\tswitch (Math.floor(ROT.RNG.getUniform()*4)) {\n\t\tcase 0:\n\t\t\tdirs[0][0] = -1; dirs[1][0] = 1;\n\t\t\tdirs[2][1] = -1; dirs[3][1] = 1;\n\t\tbreak;\n\t\tcase 1:\n\t\t\tdirs[3][0] = -1; dirs[2][0] = 1;\n\t\t\tdirs[1][1] = -1; dirs[0][1] = 1;\n\t\tbreak;\n\t\tcase 2:\n\t\t\tdirs[2][0] = -1; dirs[3][0] = 1;\n\t\t\tdirs[0][1] = -1; dirs[1][1] = 1;\n\t\tbreak;\n\t\tcase 3:\n\t\t\tdirs[1][0] = -1; dirs[0][0] = 1;\n\t\t\tdirs[3][1] = -1; dirs[2][1] = 1;\n\t\tbreak;\n\t}\n};\n\nROT.Map.IceyMaze.prototype._isFree = function(map, x, y, width, height) {\n\tif (x < 1 || y < 1 || x >= width || y >= height) { return false; }\n\treturn map[x][y];\n};\n/**\n * @class Maze generator - Eller's algorithm\n * See http://homepages.cwi.nl/~tromp/maze.html for explanation\n * @augments ROT.Map\n */\nROT.Map.EllerMaze = function(width, height) {\n\tROT.Map.call(this, width, height);\n};\nROT.Map.EllerMaze.extend(ROT.Map);\n\nROT.Map.EllerMaze.prototype.create = function(callback) {\n\tvar map = this._fillMap(1);\n\tvar w = Math.ceil((this._width-2)/2);\n\t\n\tvar rand = 9/24;\n\t\n\tvar L = [];\n\tvar R = [];\n\t\n\tfor (var i=0;i<w;i++) {\n\t\tL.push(i);\n\t\tR.push(i);\n\t}\n\tL.push(w-1); /* fake stop-block at the right side */\n\n\tfor (var j=1;j+3<this._height;j+=2) {\n\t\t/* one row */\n\t\tfor (var i=0;i<w;i++) {\n\t\t\t/* cell coords (will be always empty) */\n\t\t\tvar x = 2*i+1;\n\t\t\tvar y = j;\n\t\t\tmap[x][y] = 0;\n\t\t\t\n\t\t\t/* right connection */\n\t\t\tif (i != L[i+1] && ROT.RNG.getUniform() > rand) {\n\t\t\t\tthis._addToList(i, L, R);\n\t\t\t\tmap[x+1][y] = 0;\n\t\t\t}\n\t\t\t\n\t\t\t/* bottom connection */\n\t\t\tif (i != L[i] && ROT.RNG.getUniform() > rand) {\n\t\t\t\t/* remove connection */\n\t\t\t\tthis._removeFromList(i, L, R);\n\t\t\t} else {\n\t\t\t\t/* create connection */\n\t\t\t\tmap[x][y+1] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* last row */\n\tfor (var i=0;i<w;i++) {\n\t\t/* cell coords (will be always empty) */\n\t\tvar x = 2*i+1;\n\t\tvar y = j;\n\t\tmap[x][y] = 0;\n\t\t\n\t\t/* right connection */\n\t\tif (i != L[i+1] && (i == L[i] || ROT.RNG.getUniform() > rand)) {\n\t\t\t/* dig right also if the cell is separated, so it gets connected to the rest of maze */\n\t\t\tthis._addToList(i, L, R);\n\t\t\tmap[x+1][y] = 0;\n\t\t}\n\t\t\n\t\tthis._removeFromList(i, L, R);\n\t}\n\t\n\tfor (var i=0;i<this._width;i++) {\n\t\tfor (var j=0;j<this._height;j++) {\n\t\t\tcallback(i, j, map[i][j]);\n\t\t}\n\t}\n\t\n\treturn this;\n};\n\n/**\n * Remove \"i\" from its list\n */\nROT.Map.EllerMaze.prototype._removeFromList = function(i, L, R) {\n\tR[L[i]] = R[i];\n\tL[R[i]] = L[i];\n\tR[i] = i;\n\tL[i] = i;\n};\n\n/**\n * Join lists with \"i\" and \"i+1\"\n */\nROT.Map.EllerMaze.prototype._addToList = function(i, L, R) {\n\tR[L[i+1]] = R[i];\n\tL[R[i]] = L[i+1];\n\tR[i] = i+1;\n\tL[i+1] = i;\n};\n/**\n * @class Cellular automaton map generator\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.born] List of neighbor counts for a new cell to be born in empty space\n * @param {int[]} [options.survive] List of neighbor counts for an existing  cell to survive\n * @param {int} [options.topology] Topology 4 or 6 or 8\n */\nROT.Map.Cellular = function(width, height, options) {\n\tROT.Map.call(this, width, height);\n\tthis._options = {\n\t\tborn: [5, 6, 7, 8],\n\t\tsurvive: [4, 5, 6, 7, 8],\n\t\ttopology: 8\n\t};\n\tthis.setOptions(options);\n\n\tthis._dirs = ROT.DIRS[this._options.topology];\n\tthis._map = this._fillMap(0);\n};\nROT.Map.Cellular.extend(ROT.Map);\n\n/**\n * Fill the map with random values\n * @param {float} probability Probability for a cell to become alive; 0 = all empty, 1 = all full\n */\nROT.Map.Cellular.prototype.randomize = function(probability) {\n\tfor (var i=0;i<this._width;i++) {\n\t\tfor (var j=0;j<this._height;j++) {\n\t\t\tthis._map[i][j] = (ROT.RNG.getUniform() < probability ? 1 : 0);\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * Change options.\n * @see ROT.Map.Cellular\n */\nROT.Map.Cellular.prototype.setOptions = function(options) {\n\tfor (var p in options) { this._options[p] = options[p]; }\n};\n\nROT.Map.Cellular.prototype.set = function(x, y, value) {\n\tthis._map[x][y] = value;\n};\n\nROT.Map.Cellular.prototype.create = function(callback) {\n\tvar newMap = this._fillMap(0);\n\tvar born = this._options.born;\n\tvar survive = this._options.survive;\n\n\n\tfor (var j=0;j<this._height;j++) {\n\t\tvar widthStep = 1;\n\t\tvar widthStart = 0;\n\t\tif (this._options.topology == 6) {\n\t\t\twidthStep = 2;\n\t\t\twidthStart = j%2;\n\t\t}\n\n\t\tfor (var i=widthStart; i<this._width; i+=widthStep) {\n\t\t\tvar cur = this._map[i][j];\n\t\t\tvar ncount = this._getNeighbors(i, j);\n\n\t\t\tif (cur && survive.indexOf(ncount) != -1) { /* survive */\n\t\t\t\tnewMap[i][j] = 1;\n\t\t\t} else if (!cur && born.indexOf(ncount) != -1) { /* born */\n\t\t\t\tnewMap[i][j] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tthis._map = newMap;\n\tcallback && this._serviceCallback(callback);\n};\n\nROT.Map.Cellular.prototype._serviceCallback = function(callback) {\n\tfor (var j=0;j<this._height;j++) {\n\t\tvar widthStep = 1;\n\t\tvar widthStart = 0;\n\t\tif (this._options.topology == 6) {\n\t\t\twidthStep = 2;\n\t\t\twidthStart = j%2;\n\t\t}\n\t\tfor (var i=widthStart; i<this._width; i+=widthStep) {\n\t\t\tcallback(i, j, this._map[i][j]);\n\t\t}\n\t}\n};\n\n/**\n * Get neighbor count at [i,j] in this._map\n */\nROT.Map.Cellular.prototype._getNeighbors = function(cx, cy) {\n\tvar result = 0;\n\tfor (var i=0;i<this._dirs.length;i++) {\n\t\tvar dir = this._dirs[i];\n\t\tvar x = cx + dir[0];\n\t\tvar y = cy + dir[1];\n\n\t\tif (x < 0 || x >= this._width || y < 0 || y >= this._height) { continue; }\n\t\tresult += (this._map[x][y] == 1 ? 1 : 0);\n\t}\n\n\treturn result;\n};\n\n/**\n * Make sure every non-wall space is accessible.\n * @param {function} callback to call to display map when do\n * @param {int} value to consider empty space - defaults to 0\n * @param {function} callback to call when a new connection is made\n */\nROT.Map.Cellular.prototype.connect = function(callback, value, connectionCallback) {\n\tif (!value) value = 0;\n\n\tvar allFreeSpace = [];\n\tvar notConnected = {};\n\n\t// find all free space\n\tvar widthStep = 1;\n\tvar widthStarts = [0, 0];\n\tif (this._options.topology == 6) {\n\t\twidthStep = 2;\n\t\twidthStarts = [0, 1];\n\t}\n\tfor (var y = 0; y < this._height; y++) {\n\t\tfor (var x = widthStarts[y % 2]; x < this._width; x += widthStep) {\n\t\t\tif (this._freeSpace(x, y, value)) {\n\t\t\t\tvar p = [x, y];\n\t\t\t\tnotConnected[this._pointKey(p)] = p;\n\t\t\t\tallFreeSpace.push([x, y]);\n\t\t\t}\n\t\t}\n\t}\n\tvar start = allFreeSpace[ROT.RNG.getUniformInt(0, allFreeSpace.length - 1)];\n\n\tvar key = this._pointKey(start);\n\tvar connected = {};\n\tconnected[key] = start;\n\tdelete notConnected[key];\n\n\t// find what's connected to the starting point\n\tthis._findConnected(connected, notConnected, [start], false, value);\n\n\twhile (Object.keys(notConnected).length > 0) {\n\t\t// find two points from notConnected to connected\n\t\tvar p = this._getFromTo(connected, notConnected);\n\t\tvar from = p[0]; // notConnected\n\t\tvar to = p[1]; // connected\n\n\t\t// find everything connected to the starting point\n\t\tvar local = {};\n\t\tlocal[this._pointKey(from)] = from;\n\t\tthis._findConnected(local, notConnected, [from], true, value);\n\n\t\t// connect to a connected cell\n\t\tvar tunnelFn = (this._options.topology == 6 ? this._tunnelToConnected6 : this._tunnelToConnected);\n\t\ttunnelFn.call(this, to, from, connected, notConnected, value, connectionCallback);\n\n\t\t// now all of local is connected\n\t\tfor (var k in local) {\n\t\t\tvar pp = local[k];\n\t\t\tthis._map[pp[0]][pp[1]] = value;\n\t\t\tconnected[k] = pp;\n\t\t\tdelete notConnected[k];\n\t\t}\n\t}\n\n\tcallback && this._serviceCallback(callback);\n};\n\n/**\n * Find random points to connect. Search for the closest point in the larger space.\n * This is to minimize the length of the passage while maintaining good performance.\n */\nROT.Map.Cellular.prototype._getFromTo = function(connected, notConnected) {\n\tvar from, to, d;\n\tvar connectedKeys = Object.keys(connected);\n\tvar notConnectedKeys = Object.keys(notConnected);\n\tfor (var i = 0; i < 5; i++) {\n\t\tif (connectedKeys.length < notConnectedKeys.length) {\n\t\t\tvar keys = connectedKeys;\n\t\t\tto = connected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]];\n\t\t\tfrom = this._getClosest(to, notConnected);\n\t\t} else {\n\t\t\tvar keys = notConnectedKeys;\n\t\t\tfrom = notConnected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]];\n\t\t\tto = this._getClosest(from, connected);\n\t\t}\n\t\td = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);\n\t\tif (d < 64) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t// console.log(\">>> connected=\" + to + \" notConnected=\" + from + \" dist=\" + d);\n\treturn [from, to];\n};\n\nROT.Map.Cellular.prototype._getClosest = function(point, space) {\n\tvar minPoint = null;\n\tvar minDist = null;\n\tfor (k in space) {\n\t\tvar p = space[k];\n\t\tvar d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);\n\t\tif (minDist == null || d < minDist) {\n\t\t\tminDist = d;\n\t\t\tminPoint = p;\n\t\t}\n\t}\n\treturn minPoint;\n};\n\nROT.Map.Cellular.prototype._findConnected = function(connected, notConnected, stack, keepNotConnected, value) {\n\twhile(stack.length > 0) {\n\t\tvar p = stack.splice(0, 1)[0];\n\t\tvar tests;\n\n\t\tif (this._options.topology == 6) {\n\t\t\ttests = [\n\t\t\t\t[p[0] + 2, p[1]],\n\t\t\t\t[p[0] + 1, p[1] - 1],\n\t\t\t\t[p[0] - 1, p[1] - 1],\n\t\t\t\t[p[0] - 2, p[1]],\n\t\t\t\t[p[0] - 1, p[1] + 1],\n\t\t\t\t[p[0] + 1, p[1] + 1],\n\t\t\t];\n\t\t} else {\n\t\t\ttests = [\n\t\t\t\t[p[0] + 1, p[1]],\n\t\t\t\t[p[0] - 1, p[1]],\n\t\t\t\t[p[0],     p[1] + 1],\n\t\t\t\t[p[0],     p[1] - 1]\n\t\t\t];\n\t\t}\n\n\t\tfor (var i = 0; i < tests.length; i++) {\n\t\t\tvar key = this._pointKey(tests[i]);\n\t\t\tif (connected[key] == null && this._freeSpace(tests[i][0], tests[i][1], value)) {\n\t\t\t\tconnected[key] = tests[i];\n\t\t\t\tif (!keepNotConnected) {\n\t\t\t\t\tdelete notConnected[key];\n\t\t\t\t}\n\t\t\t\tstack.push(tests[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\nROT.Map.Cellular.prototype._tunnelToConnected = function(to, from, connected, notConnected, value, connectionCallback) {\n\tvar key = this._pointKey(from);\n\tvar a, b;\n\tif (from[0] < to[0]) {\n\t\ta = from;\n\t\tb = to;\n\t} else {\n\t\ta = to;\n\t\tb = from;\n\t}\n\tfor (var xx = a[0]; xx <= b[0]; xx++) {\n\t\tthis._map[xx][a[1]] = value;\n\t\tvar p = [xx, a[1]];\n\t\tvar pkey = this._pointKey(p);\n\t\tconnected[pkey] = p;\n\t\tdelete notConnected[pkey];\n\t}\n\tif (connectionCallback && a[0] < b[0]) {\n\t\tconnectionCallback(a, [b[0], a[1]]);\n\t}\n\n\t// x is now fixed\n\tvar x = b[0];\n\n\tif (from[1] < to[1]) {\n\t\ta = from;\n\t\tb = to;\n\t} else {\n\t\ta = to;\n\t\tb = from;\n\t}\n\tfor (var yy = a[1]; yy < b[1]; yy++) {\n\t\tthis._map[x][yy] = value;\n\t\tvar p = [x, yy];\n\t\tvar pkey = this._pointKey(p);\n\t\tconnected[pkey] = p;\n\t\tdelete notConnected[pkey];\n\t}\n\tif (connectionCallback && a[1] < b[1]) { connectionCallback([b[0], a[1]], [b[0], b[1]]); }\n}\n\nROT.Map.Cellular.prototype._tunnelToConnected6 = function(to, from, connected, notConnected, value, connectionCallback) {\n\tvar a, b;\n\tif (from[0] < to[0]) {\n\t\ta = from;\n\t\tb = to;\n\t} else {\n\t\ta = to;\n\t\tb = from;\n\t}\n\n\t// tunnel diagonally until horizontally level\n\tvar xx = a[0];\n\tvar yy = a[1];\n\twhile (!(xx == b[0] && yy == b[1])) {\n\t\tvar stepWidth = 2;\n\t\tif (yy < b[1]) {\n\t\t\tyy++;\n\t\t\tstepWidth = 1;\n\t\t} else if (yy > b[1]) {\n\t\t\tyy--;\n\t\t\tstepWidth = 1;\n\t\t}\n\t\tif (xx < b[0]) {\n\t\t\txx += stepWidth\n\t\t} else if (xx > b[0]) {\n\t\t\txx -= stepWidth\n\t\t} else if (b[1] % 2) {\n\t\t\t// Won't step outside map if destination on is map's right edge\n\t\t\txx -= stepWidth;\n\t\t} else {\n\t\t\t// ditto for left edge\n\t\t\txx += stepWidth;\n\t\t}\n\t\tthis._map[xx][yy] = value;\n\t\tvar p = [xx, yy]\n\t\tvar pkey = this._pointKey(p);\n\t\tconnected[pkey] = p;\n\t\tdelete notConnected[pkey];\n\t}\n\n\tif (connectionCallback) { connectionCallback(from, to); }\n}\n\nROT.Map.Cellular.prototype._freeSpace = function(x, y, value) {\n\treturn x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] == value;\n}\n\nROT.Map.Cellular.prototype._pointKey = function(p) {\n\treturn p[0] + \".\" + p[1];\n}\n/**\n * @class Dungeon map: has rooms and corridors\n * @augments ROT.Map\n */\nROT.Map.Dungeon = function(width, height) {\n\tROT.Map.call(this, width, height);\n\tthis._rooms = []; /* list of all rooms */\n\tthis._corridors = [];\n};\nROT.Map.Dungeon.extend(ROT.Map);\n\n/**\n * Get all generated rooms\n * @returns {ROT.Map.Feature.Room[]}\n */\nROT.Map.Dungeon.prototype.getRooms = function() {\n\treturn this._rooms;\n};\n\n/**\n * Get all generated corridors\n * @returns {ROT.Map.Feature.Corridor[]}\n */\nROT.Map.Dungeon.prototype.getCorridors = function() {\n\treturn this._corridors;\n};\n/**\n * @class Random dungeon generator using human-like digging patterns.\n * Heavily based on Mike Anderson's ideas from the \"Tyrant\" algo, mentioned at \n * http://www.roguebasin.roguelikedevelopment.org/index.php?title=Dungeon-Building_Algorithm.\n * @augments ROT.Map.Dungeon\n */\nROT.Map.Digger = function(width, height, options) {\n\tROT.Map.Dungeon.call(this, width, height);\n\t\n\tthis._options = {\n\t\troomWidth: [3, 9], /* room minimum and maximum width */\n\t\troomHeight: [3, 5], /* room minimum and maximum height */\n\t\tcorridorLength: [3, 10], /* corridor minimum and maximum length */\n\t\tdugPercentage: 0.2, /* we stop after this percentage of level area has been dug out */\n\t\ttimeLimit: 1000 /* we stop after this much time has passed (msec) */\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\t\n\tthis._features = {\n\t\t\"Room\": 4,\n\t\t\"Corridor\": 4\n\t};\n\tthis._featureAttempts = 20; /* how many times do we try to create a feature on a suitable wall */\n\tthis._walls = {}; /* these are available for digging */\n\t\n\tthis._digCallback = this._digCallback.bind(this);\n\tthis._canBeDugCallback = this._canBeDugCallback.bind(this);\n\tthis._isWallCallback = this._isWallCallback.bind(this);\n\tthis._priorityWallCallback = this._priorityWallCallback.bind(this);\n};\nROT.Map.Digger.extend(ROT.Map.Dungeon);\n\n/**\n * Create a map\n * @see ROT.Map#create\n */\nROT.Map.Digger.prototype.create = function(callback) {\n\tthis._rooms = [];\n\tthis._corridors = [];\n\tthis._map = this._fillMap(1);\n\tthis._walls = {};\n\tthis._dug = 0;\n\tvar area = (this._width-2) * (this._height-2);\n\n\tthis._firstRoom();\n\t\n\tvar t1 = Date.now();\n\n\tdo {\n\t\tvar t2 = Date.now();\n\t\tif (t2 - t1 > this._options.timeLimit) { break; }\n\n\t\t/* find a good wall */\n\t\tvar wall = this._findWall();\n\t\tif (!wall) { break; } /* no more walls */\n\t\t\n\t\tvar parts = wall.split(\",\");\n\t\tvar x = parseInt(parts[0]);\n\t\tvar y = parseInt(parts[1]);\n\t\tvar dir = this._getDiggingDirection(x, y);\n\t\tif (!dir) { continue; } /* this wall is not suitable */\n\t\t\n//\t\tconsole.log(\"wall\", x, y);\n\n\t\t/* try adding a feature */\n\t\tvar featureAttempts = 0;\n\t\tdo {\n\t\t\tfeatureAttempts++;\n\t\t\tif (this._tryFeature(x, y, dir[0], dir[1])) { /* feature added */\n\t\t\t\t//if (this._rooms.length + this._corridors.length == 2) { this._rooms[0].addDoor(x, y); } /* first room oficially has doors */\n\t\t\t\tthis._removeSurroundingWalls(x, y);\n\t\t\t\tthis._removeSurroundingWalls(x-dir[0], y-dir[1]);\n\t\t\t\tbreak; \n\t\t\t}\n\t\t} while (featureAttempts < this._featureAttempts);\n\t\t\n\t\tvar priorityWalls = 0;\n\t\tfor (var id in this._walls) { \n\t\t\tif (this._walls[id] > 1) { priorityWalls++; }\n\t\t}\n\n\t} while (this._dug/area < this._options.dugPercentage || priorityWalls); /* fixme number of priority walls */\n\n\tthis._addDoors();\n\n\tif (callback) {\n\t\tfor (var i=0;i<this._width;i++) {\n\t\t\tfor (var j=0;j<this._height;j++) {\n\t\t\t\tcallback(i, j, this._map[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis._walls = {};\n\tthis._map = null;\n\n\treturn this;\n};\n\nROT.Map.Digger.prototype._digCallback = function(x, y, value) {\n\tif (value == 0 || value == 2) { /* empty */\n\t\tthis._map[x][y] = 0;\n\t\tthis._dug++;\n\t} else { /* wall */\n\t\tthis._walls[x+\",\"+y] = 1;\n\t}\n};\n\nROT.Map.Digger.prototype._isWallCallback = function(x, y) {\n\tif (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\nROT.Map.Digger.prototype._canBeDugCallback = function(x, y) {\n\tif (x < 1 || y < 1 || x+1 >= this._width || y+1 >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\nROT.Map.Digger.prototype._priorityWallCallback = function(x, y) {\n\tthis._walls[x+\",\"+y] = 2;\n};\n\nROT.Map.Digger.prototype._firstRoom = function() {\n\tvar cx = Math.floor(this._width/2);\n\tvar cy = Math.floor(this._height/2);\n\tvar room = ROT.Map.Feature.Room.createRandomCenter(cx, cy, this._options);\n\tthis._rooms.push(room);\n\troom.create(this._digCallback);\n};\n\n/**\n * Get a suitable wall\n */\nROT.Map.Digger.prototype._findWall = function() {\n\tvar prio1 = [];\n\tvar prio2 = [];\n\tfor (var id in this._walls) {\n\t\tvar prio = this._walls[id];\n\t\tif (prio == 2) { \n\t\t\tprio2.push(id); \n\t\t} else {\n\t\t\tprio1.push(id);\n\t\t}\n\t}\n\t\n\tvar arr = (prio2.length ? prio2 : prio1);\n\tif (!arr.length) { return null; } /* no walls :/ */\n\t\n\tvar id = arr.sort().random(); // sort to make the order deterministic\n\tdelete this._walls[id];\n\n\treturn id;\n};\n\n/**\n * Tries adding a feature\n * @returns {bool} was this a successful try?\n */\nROT.Map.Digger.prototype._tryFeature = function(x, y, dx, dy) {\n\tvar feature = ROT.RNG.getWeightedValue(this._features);\n\tfeature = ROT.Map.Feature[feature].createRandomAt(x, y, dx, dy, this._options);\n\t\n\tif (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {\n//\t\tconsole.log(\"not valid\");\n//\t\tfeature.debug();\n\t\treturn false;\n\t}\n\t\n\tfeature.create(this._digCallback);\n//\tfeature.debug();\n\n\tif (feature instanceof ROT.Map.Feature.Room) { this._rooms.push(feature); }\n\tif (feature instanceof ROT.Map.Feature.Corridor) { \n\t\tfeature.createPriorityWalls(this._priorityWallCallback);\n\t\tthis._corridors.push(feature); \n\t}\n\t\n\treturn true;\n};\n\nROT.Map.Digger.prototype._removeSurroundingWalls = function(cx, cy) {\n\tvar deltas = ROT.DIRS[4];\n\n\tfor (var i=0;i<deltas.length;i++) {\n\t\tvar delta = deltas[i];\n\t\tvar x = cx + delta[0];\n\t\tvar y = cy + delta[1];\n\t\tdelete this._walls[x+\",\"+y];\n\t\tvar x = cx + 2*delta[0];\n\t\tvar y = cy + 2*delta[1];\n\t\tdelete this._walls[x+\",\"+y];\n\t}\n};\n\n/**\n * Returns vector in \"digging\" direction, or false, if this does not exist (or is not unique)\n */\nROT.Map.Digger.prototype._getDiggingDirection = function(cx, cy) {\n\tif (cx <= 0 || cy <= 0 || cx >= this._width - 1 || cy >= this._height - 1) { return null; }\n\n\tvar result = null;\n\tvar deltas = ROT.DIRS[4];\n\t\n\tfor (var i=0;i<deltas.length;i++) {\n\t\tvar delta = deltas[i];\n\t\tvar x = cx + delta[0];\n\t\tvar y = cy + delta[1];\n\t\t\n\t\tif (!this._map[x][y]) { /* there already is another empty neighbor! */\n\t\t\tif (result) { return null; }\n\t\t\tresult = delta;\n\t\t}\n\t}\n\t\n\t/* no empty neighbor */\n\tif (!result) { return null; }\n\t\n\treturn [-result[0], -result[1]];\n};\n\n/**\n * Find empty spaces surrounding rooms, and apply doors.\n */\nROT.Map.Digger.prototype._addDoors = function() {\n\tvar data = this._map;\n\tvar isWallCallback = function(x, y) {\n\t\treturn (data[x][y] == 1);\n\t};\n\tfor (var i = 0; i < this._rooms.length; i++ ) {\n\t\tvar room = this._rooms[i];\n\t\troom.clearDoors();\n\t\troom.addDoors(isWallCallback);\n\t}\n};\n/**\n * @class Dungeon generator which tries to fill the space evenly. Generates independent rooms and tries to connect them.\n * @augments ROT.Map.Dungeon\n */\nROT.Map.Uniform = function(width, height, options) {\n\tROT.Map.Dungeon.call(this, width, height);\n\n\tthis._options = {\n\t\troomWidth: [3, 9], /* room minimum and maximum width */\n\t\troomHeight: [3, 5], /* room minimum and maximum height */\n\t\troomDugPercentage: 0.1, /* we stop after this percentage of level area has been dug out by rooms */\n\t\ttimeLimit: 1000 /* we stop after this much time has passed (msec) */\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\tthis._roomAttempts = 20; /* new room is created N-times until is considered as impossible to generate */\n\tthis._corridorAttempts = 20; /* corridors are tried N-times until the level is considered as impossible to connect */\n\n\tthis._connected = []; /* list of already connected rooms */\n\tthis._unconnected = []; /* list of remaining unconnected rooms */\n\t\n\tthis._digCallback = this._digCallback.bind(this);\n\tthis._canBeDugCallback = this._canBeDugCallback.bind(this);\n\tthis._isWallCallback = this._isWallCallback.bind(this);\n};\nROT.Map.Uniform.extend(ROT.Map.Dungeon);\n\n/**\n * Create a map. If the time limit has been hit, returns null.\n * @see ROT.Map#create\n */\nROT.Map.Uniform.prototype.create = function(callback) {\n\tvar t1 = Date.now();\n\twhile (1) {\n\t\tvar t2 = Date.now();\n\t\tif (t2 - t1 > this._options.timeLimit) { return null; } /* time limit! */\n\t\n\t\tthis._map = this._fillMap(1);\n\t\tthis._dug = 0;\n\t\tthis._rooms = [];\n\t\tthis._unconnected = [];\n\t\tthis._generateRooms();\n\t\tif (this._rooms.length < 2) { continue; }\n\t\tif (this._generateCorridors()) { break; }\n\t}\n\t\n\tif (callback) {\n\t\tfor (var i=0;i<this._width;i++) {\n\t\t\tfor (var j=0;j<this._height;j++) {\n\t\t\t\tcallback(i, j, this._map[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this;\n};\n\n/**\n * Generates a suitable amount of rooms\n */\nROT.Map.Uniform.prototype._generateRooms = function() {\n\tvar w = this._width-2;\n\tvar h = this._height-2;\n\n\tdo {\n\t\tvar room = this._generateRoom();\n\t\tif (this._dug/(w*h) > this._options.roomDugPercentage) { break; } /* achieved requested amount of free space */\n\t} while (room);\n\n\t/* either enough rooms, or not able to generate more of them :) */\n};\n\n/**\n * Try to generate one room\n */\nROT.Map.Uniform.prototype._generateRoom = function() {\n\tvar count = 0;\n\twhile (count < this._roomAttempts) {\n\t\tcount++;\n\t\t\n\t\tvar room = ROT.Map.Feature.Room.createRandom(this._width, this._height, this._options);\n\t\tif (!room.isValid(this._isWallCallback, this._canBeDugCallback)) { continue; }\n\t\t\n\t\troom.create(this._digCallback);\n\t\tthis._rooms.push(room);\n\t\treturn room;\n\t} \n\n\t/* no room was generated in a given number of attempts */\n\treturn null;\n};\n\n/**\n * Generates connectors beween rooms\n * @returns {bool} success Was this attempt successfull?\n */\nROT.Map.Uniform.prototype._generateCorridors = function() {\n\tvar cnt = 0;\n\twhile (cnt < this._corridorAttempts) {\n\t\tcnt++;\n\t\tthis._corridors = [];\n\n\t\t/* dig rooms into a clear map */\n\t\tthis._map = this._fillMap(1);\n\t\tfor (var i=0;i<this._rooms.length;i++) { \n\t\t\tvar room = this._rooms[i];\n\t\t\troom.clearDoors();\n\t\t\troom.create(this._digCallback); \n\t\t}\n\n\t\tthis._unconnected = this._rooms.slice().randomize();\n\t\tthis._connected = [];\n\t\tif (this._unconnected.length) { this._connected.push(this._unconnected.pop()); } /* first one is always connected */\n\t\t\n\t\twhile (1) {\n\t\t\t/* 1. pick random connected room */\n\t\t\tvar connected = this._connected.random();\n\t\t\t\n\t\t\t/* 2. find closest unconnected */\n\t\t\tvar room1 = this._closestRoom(this._unconnected, connected);\n\t\t\t\n\t\t\t/* 3. connect it to closest connected */\n\t\t\tvar room2 = this._closestRoom(this._connected, room1);\n\t\t\t\n\t\t\tvar ok = this._connectRooms(room1, room2);\n\t\t\tif (!ok) { break; } /* stop connecting, re-shuffle */\n\t\t\t\n\t\t\tif (!this._unconnected.length) { return true; } /* done; no rooms remain */\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * For a given room, find the closest one from the list\n */\nROT.Map.Uniform.prototype._closestRoom = function(rooms, room) {\n\tvar dist = Infinity;\n\tvar center = room.getCenter();\n\tvar result = null;\n\t\n\tfor (var i=0;i<rooms.length;i++) {\n\t\tvar r = rooms[i];\n\t\tvar c = r.getCenter();\n\t\tvar dx = c[0]-center[0];\n\t\tvar dy = c[1]-center[1];\n\t\tvar d = dx*dx+dy*dy;\n\t\t\n\t\tif (d < dist) {\n\t\t\tdist = d;\n\t\t\tresult = r;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\nROT.Map.Uniform.prototype._connectRooms = function(room1, room2) {\n\t/*\n\t\troom1.debug();\n\t\troom2.debug();\n\t*/\n\n\tvar center1 = room1.getCenter();\n\tvar center2 = room2.getCenter();\n\n\tvar diffX = center2[0] - center1[0];\n\tvar diffY = center2[1] - center1[1];\n\n\tif (Math.abs(diffX) < Math.abs(diffY)) { /* first try connecting north-south walls */\n\t\tvar dirIndex1 = (diffY > 0 ? 2 : 0);\n\t\tvar dirIndex2 = (dirIndex1 + 2) % 4;\n\t\tvar min = room2.getLeft();\n\t\tvar max = room2.getRight();\n\t\tvar index = 0;\n\t} else { /* first try connecting east-west walls */\n\t\tvar dirIndex1 = (diffX > 0 ? 1 : 3);\n\t\tvar dirIndex2 = (dirIndex1 + 2) % 4;\n\t\tvar min = room2.getTop();\n\t\tvar max = room2.getBottom();\n\t\tvar index = 1;\n\t}\n\n\tvar start = this._placeInWall(room1, dirIndex1); /* corridor will start here */\n\tif (!start) { return false; }\n\n\tif (start[index] >= min && start[index] <= max) { /* possible to connect with straight line (I-like) */\n\t\tvar end = start.slice();\n\t\tvar value = null;\n\t\tswitch (dirIndex2) {\n\t\t\tcase 0: value = room2.getTop()-1; break;\n\t\t\tcase 1: value = room2.getRight()+1; break;\n\t\t\tcase 2: value = room2.getBottom()+1; break;\n\t\t\tcase 3: value = room2.getLeft()-1; break;\n\t\t}\n\t\tend[(index+1)%2] = value;\n\t\tthis._digLine([start, end]);\n\t\t\n\t} else if (start[index] < min-1 || start[index] > max+1) { /* need to switch target wall (L-like) */\n\n\t\tvar diff = start[index] - center2[index];\n\t\tswitch (dirIndex2) {\n\t\t\tcase 0:\n\t\t\tcase 1:\tvar rotation = (diff < 0 ? 3 : 1); break;\n\t\t\tcase 2:\n\t\t\tcase 3:\tvar rotation = (diff < 0 ? 1 : 3); break;\n\t\t}\n\t\tdirIndex2 = (dirIndex2 + rotation) % 4;\n\t\t\n\t\tvar end = this._placeInWall(room2, dirIndex2);\n\t\tif (!end) { return false; }\n\n\t\tvar mid = [0, 0];\n\t\tmid[index] = start[index];\n\t\tvar index2 = (index+1)%2;\n\t\tmid[index2] = end[index2];\n\t\tthis._digLine([start, mid, end]);\n\t\t\n\t} else { /* use current wall pair, but adjust the line in the middle (S-like) */\n\t\n\t\tvar index2 = (index+1)%2;\n\t\tvar end = this._placeInWall(room2, dirIndex2);\n\t\tif (!end) { return false; }\n\t\tvar mid = Math.round((end[index2] + start[index2])/2);\n\n\t\tvar mid1 = [0, 0];\n\t\tvar mid2 = [0, 0];\n\t\tmid1[index] = start[index];\n\t\tmid1[index2] = mid;\n\t\tmid2[index] = end[index];\n\t\tmid2[index2] = mid;\n\t\tthis._digLine([start, mid1, mid2, end]);\n\t}\n\n\troom1.addDoor(start[0], start[1]);\n\troom2.addDoor(end[0], end[1]);\n\t\n\tvar index = this._unconnected.indexOf(room1);\n\tif (index != -1) {\n\t\tthis._unconnected.splice(index, 1);\n\t\tthis._connected.push(room1);\n\t}\n\n\tvar index = this._unconnected.indexOf(room2);\n\tif (index != -1) {\n\t\tthis._unconnected.splice(index, 1);\n\t\tthis._connected.push(room2);\n\t}\n\t\n\treturn true;\n};\n\nROT.Map.Uniform.prototype._placeInWall = function(room, dirIndex) {\n\tvar start = [0, 0];\n\tvar dir = [0, 0];\n\tvar length = 0;\n\t\n\tswitch (dirIndex) {\n\t\tcase 0:\n\t\t\tdir = [1, 0];\n\t\t\tstart = [room.getLeft(), room.getTop()-1];\n\t\t\tlength = room.getRight()-room.getLeft()+1;\n\t\tbreak;\n\t\tcase 1:\n\t\t\tdir = [0, 1];\n\t\t\tstart = [room.getRight()+1, room.getTop()];\n\t\t\tlength = room.getBottom()-room.getTop()+1;\n\t\tbreak;\n\t\tcase 2:\n\t\t\tdir = [1, 0];\n\t\t\tstart = [room.getLeft(), room.getBottom()+1];\n\t\t\tlength = room.getRight()-room.getLeft()+1;\n\t\tbreak;\n\t\tcase 3:\n\t\t\tdir = [0, 1];\n\t\t\tstart = [room.getLeft()-1, room.getTop()];\n\t\t\tlength = room.getBottom()-room.getTop()+1;\n\t\tbreak;\n\t}\n\t\n\tvar avail = [];\n\tvar lastBadIndex = -2;\n\n\tfor (var i=0;i<length;i++) {\n\t\tvar x = start[0] + i*dir[0];\n\t\tvar y = start[1] + i*dir[1];\n\t\tavail.push(null);\n\t\t\n\t\tvar isWall = (this._map[x][y] == 1);\n\t\tif (isWall) {\n\t\t\tif (lastBadIndex != i-1) { avail[i] = [x, y]; }\n\t\t} else {\n\t\t\tlastBadIndex = i;\n\t\t\tif (i) { avail[i-1] = null; }\n\t\t}\n\t}\n\t\n\tfor (var i=avail.length-1; i>=0; i--) {\n\t\tif (!avail[i]) { avail.splice(i, 1); }\n\t}\n\treturn (avail.length ? avail.random() : null);\n};\n\n/**\n * Dig a polyline.\n */\nROT.Map.Uniform.prototype._digLine = function(points) {\n\tfor (var i=1;i<points.length;i++) {\n\t\tvar start = points[i-1];\n\t\tvar end = points[i];\n\t\tvar corridor = new ROT.Map.Feature.Corridor(start[0], start[1], end[0], end[1]);\n\t\tcorridor.create(this._digCallback);\n\t\tthis._corridors.push(corridor);\n\t}\n};\n\nROT.Map.Uniform.prototype._digCallback = function(x, y, value) {\n\tthis._map[x][y] = value;\n\tif (value == 0) { this._dug++; }\n};\n\nROT.Map.Uniform.prototype._isWallCallback = function(x, y) {\n\tif (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\nROT.Map.Uniform.prototype._canBeDugCallback = function(x, y) {\n\tif (x < 1 || y < 1 || x+1 >= this._width || y+1 >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\n/**\n * @author hyakugei\n * @class Dungeon generator which uses the \"orginal\" Rogue dungeon generation algorithm. See http://kuoi.com/~kamikaze/GameDesign/art07_rogue_dungeon.php\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.cellWidth=3] Number of cells to create on the horizontal (number of rooms horizontally)\n * @param {int[]} [options.cellHeight=3] Number of cells to create on the vertical (number of rooms vertically)\n * @param {int} [options.roomWidth] Room min and max width - normally set auto-magically via the constructor.\n * @param {int} [options.roomHeight] Room min and max height - normally set auto-magically via the constructor.\n */\nROT.Map.Rogue = function (width, height, options) {\n\tROT.Map.call(this, width, height);\n\n\tthis._options = {\n\t\tcellWidth: 3,  // NOTE to self, these could probably work the same as the roomWidth/room Height values\n\t\tcellHeight: 3  //     ie. as an array with min-max values for each direction....\n\t};\n\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\t/*\n\tSet the room sizes according to the over-all width of the map,\n\tand the cell sizes.\n\t*/\n\tif (!this._options.hasOwnProperty(\"roomWidth\")) {\n\t\tthis._options[\"roomWidth\"] = this._calculateRoomSize(this._width, this._options[\"cellWidth\"]);\n\t}\n\tif (!this._options.hasOwnProperty(\"roomHeight\")) {\n\t\tthis._options[\"roomHeight\"] = this._calculateRoomSize(this._height, this._options[\"cellHeight\"]);\n\t}\n\n};\n\nROT.Map.Rogue.extend(ROT.Map);\n\n/**\n * @see ROT.Map#create\n */\nROT.Map.Rogue.prototype.create = function (callback) {\n\tthis.map = this._fillMap(1);\n\tthis.rooms = [];\n\tthis.connectedCells = [];\n\n\tthis._initRooms();\n\tthis._connectRooms();\n\tthis._connectUnconnectedRooms();\n\tthis._createRandomRoomConnections();\n\tthis._createRooms();\n\tthis._createCorridors();\n\n\tif (callback) {\n\t\tfor (var i = 0; i < this._width; i++) {\n\t\t\tfor (var j = 0; j < this._height; j++) {\n\t\t\t\tcallback(i, j, this.map[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this;\n};\n\nROT.Map.Rogue.prototype._calculateRoomSize = function (size, cell) {\n\tvar max = Math.floor((size/cell) * 0.8);\n\tvar min = Math.floor((size/cell) * 0.25);\n\tif (min < 2) { min = 2; }\n\tif (max < 2) { max = 2; }\n\treturn [min, max];\n};\n\nROT.Map.Rogue.prototype._initRooms = function () {\n\t// create rooms array. This is the \"grid\" list from the algo.\n\tfor (var i = 0; i < this._options.cellWidth; i++) {\n\t\tthis.rooms.push([]);\n\t\tfor(var j = 0; j < this._options.cellHeight; j++) {\n\t\t\tthis.rooms[i].push({\"x\":0, \"y\":0, \"width\":0, \"height\":0, \"connections\":[], \"cellx\":i, \"celly\":j});\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._connectRooms = function () {\n\t//pick random starting grid\n\tvar cgx = ROT.RNG.getUniformInt(0, this._options.cellWidth-1);\n\tvar cgy = ROT.RNG.getUniformInt(0, this._options.cellHeight-1);\n\n\tvar idx;\n\tvar ncgx;\n\tvar ncgy;\n\n\tvar found = false;\n\tvar room;\n\tvar otherRoom;\n\n\t// find  unconnected neighbour cells\n\tdo {\n\n\t\t//var dirToCheck = [0, 1, 2, 3, 4, 5, 6, 7];\n\t\tvar dirToCheck = [0, 2, 4, 6];\n\t\tdirToCheck = dirToCheck.randomize();\n\n\t\tdo {\n\t\t\tfound = false;\n\t\t\tidx = dirToCheck.pop();\n\n\t\t\tncgx = cgx + ROT.DIRS[8][idx][0];\n\t\t\tncgy = cgy + ROT.DIRS[8][idx][1];\n\n\t\t\tif (ncgx < 0 || ncgx >= this._options.cellWidth) { continue; }\n\t\t\tif (ncgy < 0 || ncgy >= this._options.cellHeight) { continue; }\n\n\t\t\troom = this.rooms[cgx][cgy];\n\n\t\t\tif (room[\"connections\"].length > 0) {\n\t\t\t\t// as long as this room doesn't already coonect to me, we are ok with it.\n\t\t\t\tif (room[\"connections\"][0][0] == ncgx && room[\"connections\"][0][1] == ncgy) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\totherRoom = this.rooms[ncgx][ncgy];\n\n\t\t\tif (otherRoom[\"connections\"].length == 0) {\n\t\t\t\totherRoom[\"connections\"].push([cgx, cgy]);\n\n\t\t\t\tthis.connectedCells.push([ncgx, ncgy]);\n\t\t\t\tcgx = ncgx;\n\t\t\t\tcgy = ncgy;\n\t\t\t\tfound = true;\n\t\t\t}\n\n\t\t} while (dirToCheck.length > 0 && found == false);\n\n\t} while (dirToCheck.length > 0);\n\n};\n\nROT.Map.Rogue.prototype._connectUnconnectedRooms = function () {\n\t//While there are unconnected rooms, try to connect them to a random connected neighbor\n\t//(if a room has no connected neighbors yet, just keep cycling, you'll fill out to it eventually).\n\tvar cw = this._options.cellWidth;\n\tvar ch = this._options.cellHeight;\n\n\tthis.connectedCells = this.connectedCells.randomize();\n\tvar room;\n\tvar otherRoom;\n\tvar validRoom;\n\n\tfor (var i = 0; i < this._options.cellWidth; i++) {\n\t\tfor (var j = 0; j < this._options.cellHeight; j++)  {\n\n\t\t\troom = this.rooms[i][j];\n\n\t\t\tif (room[\"connections\"].length == 0) {\n\t\t\t\tvar directions = [0, 2, 4, 6];\n\t\t\t\tdirections = directions.randomize();\n\n\t\t\t\tvalidRoom = false;\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvar dirIdx = directions.pop();\n\t\t\t\t\tvar newI = i + ROT.DIRS[8][dirIdx][0];\n\t\t\t\t\tvar newJ = j + ROT.DIRS[8][dirIdx][1];\n\n\t\t\t\t\tif (newI < 0 || newI >= cw || newJ < 0 || newJ >= ch) { continue; }\n\n\t\t\t\t\totherRoom = this.rooms[newI][newJ];\n\n\t\t\t\t\tvalidRoom = true;\n\n\t\t\t\t\tif (otherRoom[\"connections\"].length == 0) { break; }\n\n\t\t\t\t\tfor (var k = 0; k < otherRoom[\"connections\"].length; k++) {\n\t\t\t\t\t\tif (otherRoom[\"connections\"][k][0] == i && otherRoom[\"connections\"][k][1] == j) {\n\t\t\t\t\t\t\tvalidRoom = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validRoom) { break; }\n\n\t\t\t\t} while (directions.length);\n\n\t\t\t\tif (validRoom) {\n\t\t\t\t\troom[\"connections\"].push([otherRoom[\"cellx\"], otherRoom[\"celly\"]]);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"-- Unable to connect room.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._createRandomRoomConnections = function (connections) {\n\t// Empty for now.\n};\n\n\nROT.Map.Rogue.prototype._createRooms = function () {\n\t// Create Rooms\n\n\tvar w = this._width;\n\tvar h = this._height;\n\n\tvar cw = this._options.cellWidth;\n\tvar ch = this._options.cellHeight;\n\n\tvar cwp = Math.floor(this._width / cw);\n\tvar chp = Math.floor(this._height / ch);\n\n\tvar roomw;\n\tvar roomh;\n\tvar roomWidth = this._options[\"roomWidth\"];\n\tvar roomHeight = this._options[\"roomHeight\"];\n\tvar sx;\n\tvar sy;\n\tvar otherRoom;\n\n\tfor (var i = 0; i < cw; i++) {\n\t\tfor (var j = 0; j < ch; j++) {\n\t\t\tsx = cwp * i;\n\t\t\tsy = chp * j;\n\n\t\t\tif (sx == 0) { sx = 1; }\n\t\t\tif (sy == 0) { sy = 1; }\n\n\t\t\troomw = ROT.RNG.getUniformInt(roomWidth[0], roomWidth[1]);\n\t\t\troomh = ROT.RNG.getUniformInt(roomHeight[0], roomHeight[1]);\n\n\t\t\tif (j > 0) {\n\t\t\t\totherRoom = this.rooms[i][j-1];\n\t\t\t\twhile (sy - (otherRoom[\"y\"] + otherRoom[\"height\"] ) < 3) {\n\t\t\t\t\tsy++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\totherRoom = this.rooms[i-1][j];\n\t\t\t\twhile(sx - (otherRoom[\"x\"] + otherRoom[\"width\"]) < 3) {\n\t\t\t\t\tsx++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar sxOffset = Math.round(ROT.RNG.getUniformInt(0, cwp-roomw)/2);\n\t\t\tvar syOffset = Math.round(ROT.RNG.getUniformInt(0, chp-roomh)/2);\n\n\t\t\twhile (sx + sxOffset + roomw >= w) {\n\t\t\t\tif(sxOffset) {\n\t\t\t\t\tsxOffset--;\n\t\t\t\t} else {\n\t\t\t\t\troomw--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (sy + syOffset + roomh >= h) {\n\t\t\t\tif(syOffset) {\n\t\t\t\t\tsyOffset--;\n\t\t\t\t} else {\n\t\t\t\t\troomh--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsx = sx + sxOffset;\n\t\t\tsy = sy + syOffset;\n\n\t\t\tthis.rooms[i][j][\"x\"] = sx;\n\t\t\tthis.rooms[i][j][\"y\"] = sy;\n\t\t\tthis.rooms[i][j][\"width\"] = roomw;\n\t\t\tthis.rooms[i][j][\"height\"] = roomh;\n\n\t\t\tfor (var ii = sx; ii < sx + roomw; ii++) {\n\t\t\t\tfor (var jj = sy; jj < sy + roomh; jj++) {\n\t\t\t\t\tthis.map[ii][jj] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._getWallPosition = function (aRoom, aDirection) {\n\tvar rx;\n\tvar ry;\n\tvar door;\n\n\tif (aDirection == 1 || aDirection == 3) {\n\t\trx = ROT.RNG.getUniformInt(aRoom[\"x\"] + 1, aRoom[\"x\"] + aRoom[\"width\"] - 2);\n\t\tif (aDirection == 1) {\n\t\t\try = aRoom[\"y\"] - 2;\n\t\t\tdoor = ry + 1;\n\t\t} else {\n\t\t\try = aRoom[\"y\"] + aRoom[\"height\"] + 1;\n\t\t\tdoor = ry -1;\n\t\t}\n\n\t\tthis.map[rx][door] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n\n\t} else if (aDirection == 2 || aDirection == 4) {\n\t\try = ROT.RNG.getUniformInt(aRoom[\"y\"] + 1, aRoom[\"y\"] + aRoom[\"height\"] - 2);\n\t\tif(aDirection == 2) {\n\t\t\trx = aRoom[\"x\"] + aRoom[\"width\"] + 1;\n\t\t\tdoor = rx - 1;\n\t\t} else {\n\t\t\trx = aRoom[\"x\"] - 2;\n\t\t\tdoor = rx + 1;\n\t\t}\n\n\t\tthis.map[door][ry] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n\n\t}\n\treturn [rx, ry];\n};\n\n/***\n* @param startPosition a 2 element array\n* @param endPosition a 2 element array\n*/\nROT.Map.Rogue.prototype._drawCorridor = function (startPosition, endPosition) {\n\tvar xOffset = endPosition[0] - startPosition[0];\n\tvar yOffset = endPosition[1] - startPosition[1];\n\n\tvar xpos = startPosition[0];\n\tvar ypos = startPosition[1];\n\n\tvar tempDist;\n\tvar xDir;\n\tvar yDir;\n\n\tvar move; // 2 element array, element 0 is the direction, element 1 is the total value to move.\n\tvar moves = []; // a list of 2 element arrays\n\n\tvar xAbs = Math.abs(xOffset);\n\tvar yAbs = Math.abs(yOffset);\n\n\tvar percent = ROT.RNG.getUniform(); // used to split the move at different places along the long axis\n\tvar firstHalf = percent;\n\tvar secondHalf = 1 - percent;\n\n\txDir = xOffset > 0 ? 2 : 6;\n\tyDir = yOffset > 0 ? 4 : 0;\n\n\tif (xAbs < yAbs) {\n\t\t// move firstHalf of the y offset\n\t\ttempDist = Math.ceil(yAbs * firstHalf);\n\t\tmoves.push([yDir, tempDist]);\n\t\t// move all the x offset\n\t\tmoves.push([xDir, xAbs]);\n\t\t// move sendHalf of the  y offset\n\t\ttempDist = Math.floor(yAbs * secondHalf);\n\t\tmoves.push([yDir, tempDist]);\n\t} else {\n\t\t//  move firstHalf of the x offset\n\t\ttempDist = Math.ceil(xAbs * firstHalf);\n\t\tmoves.push([xDir, tempDist]);\n\t\t// move all the y offset\n\t\tmoves.push([yDir, yAbs]);\n\t\t// move secondHalf of the x offset.\n\t\ttempDist = Math.floor(xAbs * secondHalf);\n\t\tmoves.push([xDir, tempDist]);\n\t}\n\n\tthis.map[xpos][ypos] = 0;\n\n\twhile (moves.length > 0) {\n\t\tmove = moves.pop();\n\t\twhile (move[1] > 0) {\n\t\t\txpos += ROT.DIRS[8][move[0]][0];\n\t\t\typos += ROT.DIRS[8][move[0]][1];\n\t\t\tthis.map[xpos][ypos] = 0;\n\t\t\tmove[1] = move[1] - 1;\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._createCorridors = function () {\n\t// Draw Corridors between connected rooms\n\n\tvar cw = this._options.cellWidth;\n\tvar ch = this._options.cellHeight;\n\tvar room;\n\tvar connection;\n\tvar otherRoom;\n\tvar wall;\n\tvar otherWall;\n\n\tfor (var i = 0; i < cw; i++) {\n\t\tfor (var j = 0; j < ch; j++) {\n\t\t\troom = this.rooms[i][j];\n\n\t\t\tfor (var k = 0; k < room[\"connections\"].length; k++) {\n\n\t\t\t\tconnection = room[\"connections\"][k];\n\n\t\t\t\totherRoom = this.rooms[connection[0]][connection[1]];\n\n\t\t\t\t// figure out what wall our corridor will start one.\n\t\t\t\t// figure out what wall our corridor will end on.\n\t\t\t\tif (otherRoom[\"cellx\"] > room[\"cellx\"]) {\n\t\t\t\t\twall = 2;\n\t\t\t\t\totherWall = 4;\n\t\t\t\t} else if (otherRoom[\"cellx\"] < room[\"cellx\"]) {\n\t\t\t\t\twall = 4;\n\t\t\t\t\totherWall = 2;\n\t\t\t\t} else if(otherRoom[\"celly\"] > room[\"celly\"]) {\n\t\t\t\t\twall = 3;\n\t\t\t\t\totherWall = 1;\n\t\t\t\t} else if(otherRoom[\"celly\"] < room[\"celly\"]) {\n\t\t\t\t\twall = 1;\n\t\t\t\t\totherWall = 3;\n\t\t\t\t}\n\n\t\t\t\tthis._drawCorridor(this._getWallPosition(room, wall), this._getWallPosition(otherRoom, otherWall));\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * @class Dungeon feature; has own .create() method\n */\nROT.Map.Feature = function() {};\nROT.Map.Feature.prototype.isValid = function(canBeDugCallback) {};\nROT.Map.Feature.prototype.create = function(digCallback) {};\nROT.Map.Feature.prototype.debug = function() {};\nROT.Map.Feature.createRandomAt = function(x, y, dx, dy, options) {};\n\n/**\n * @class Room\n * @augments ROT.Map.Feature\n * @param {int} x1\n * @param {int} y1\n * @param {int} x2\n * @param {int} y2\n * @param {int} [doorX]\n * @param {int} [doorY]\n */\nROT.Map.Feature.Room = function(x1, y1, x2, y2, doorX, doorY) {\n\tthis._x1 = x1;\n\tthis._y1 = y1;\n\tthis._x2 = x2;\n\tthis._y2 = y2;\n\tthis._doors = {};\n\tif (arguments.length > 4) { this.addDoor(doorX, doorY); }\n};\nROT.Map.Feature.Room.extend(ROT.Map.Feature);\n\n/**\n * Room of random size, with a given doors and direction\n */\nROT.Map.Feature.Room.createRandomAt = function(x, y, dx, dy, options) {\n\tvar min = options.roomWidth[0];\n\tvar max = options.roomWidth[1];\n\tvar width = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar min = options.roomHeight[0];\n\tvar max = options.roomHeight[1];\n\tvar height = ROT.RNG.getUniformInt(min, max);\n\t\n\tif (dx == 1) { /* to the right */\n\t\tvar y2 = y - Math.floor(ROT.RNG.getUniform() * height);\n\t\treturn new this(x+1, y2, x+width, y2+height-1, x, y);\n\t}\n\t\n\tif (dx == -1) { /* to the left */\n\t\tvar y2 = y - Math.floor(ROT.RNG.getUniform() * height);\n\t\treturn new this(x-width, y2, x-1, y2+height-1, x, y);\n\t}\n\n\tif (dy == 1) { /* to the bottom */\n\t\tvar x2 = x - Math.floor(ROT.RNG.getUniform() * width);\n\t\treturn new this(x2, y+1, x2+width-1, y+height, x, y);\n\t}\n\n\tif (dy == -1) { /* to the top */\n\t\tvar x2 = x - Math.floor(ROT.RNG.getUniform() * width);\n\t\treturn new this(x2, y-height, x2+width-1, y-1, x, y);\n\t}\n\n        throw new Error(\"dx or dy must be 1 or -1\");\n};\n\n/**\n * Room of random size, positioned around center coords\n */\nROT.Map.Feature.Room.createRandomCenter = function(cx, cy, options) {\n\tvar min = options.roomWidth[0];\n\tvar max = options.roomWidth[1];\n\tvar width = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar min = options.roomHeight[0];\n\tvar max = options.roomHeight[1];\n\tvar height = ROT.RNG.getUniformInt(min, max);\n\n\tvar x1 = cx - Math.floor(ROT.RNG.getUniform()*width);\n\tvar y1 = cy - Math.floor(ROT.RNG.getUniform()*height);\n\tvar x2 = x1 + width - 1;\n\tvar y2 = y1 + height - 1;\n\n\treturn new this(x1, y1, x2, y2);\n};\n\n/**\n * Room of random size within a given dimensions\n */\nROT.Map.Feature.Room.createRandom = function(availWidth, availHeight, options) {\n\tvar min = options.roomWidth[0];\n\tvar max = options.roomWidth[1];\n\tvar width = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar min = options.roomHeight[0];\n\tvar max = options.roomHeight[1];\n\tvar height = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar left = availWidth - width - 1;\n\tvar top = availHeight - height - 1;\n\n\tvar x1 = 1 + Math.floor(ROT.RNG.getUniform()*left);\n\tvar y1 = 1 + Math.floor(ROT.RNG.getUniform()*top);\n\tvar x2 = x1 + width - 1;\n\tvar y2 = y1 + height - 1;\n\n\treturn new this(x1, y1, x2, y2);\n};\n\nROT.Map.Feature.Room.prototype.addDoor = function(x, y) {\n\tthis._doors[x+\",\"+y] = 1;\n\treturn this;\n};\n\n/**\n * @param {function}\n */\nROT.Map.Feature.Room.prototype.getDoors = function(callback) {\n\tfor (var key in this._doors) {\n\t\tvar parts = key.split(\",\");\n\t\tcallback(parseInt(parts[0]), parseInt(parts[1]));\n\t}\n\treturn this;\n};\n\nROT.Map.Feature.Room.prototype.clearDoors = function() {\n\tthis._doors = {};\n\treturn this;\n};\n\nROT.Map.Feature.Room.prototype.addDoors = function(isWallCallback) {\n\tvar left = this._x1-1;\n\tvar right = this._x2+1;\n\tvar top = this._y1-1;\n\tvar bottom = this._y2+1;\n\n\tfor (var x=left; x<=right; x++) {\n\t\tfor (var y=top; y<=bottom; y++) {\n\t\t\tif (x != left && x != right && y != top && y != bottom) { continue; }\n\t\t\tif (isWallCallback(x, y)) { continue; }\n\n\t\t\tthis.addDoor(x, y);\n\t\t}\n\t}\n\n\treturn this;\n};\n\nROT.Map.Feature.Room.prototype.debug = function() {\n\tconsole.log(\"room\", this._x1, this._y1, this._x2, this._y2);\n};\n\nROT.Map.Feature.Room.prototype.isValid = function(isWallCallback, canBeDugCallback) { \n\tvar left = this._x1-1;\n\tvar right = this._x2+1;\n\tvar top = this._y1-1;\n\tvar bottom = this._y2+1;\n\t\n\tfor (var x=left; x<=right; x++) {\n\t\tfor (var y=top; y<=bottom; y++) {\n\t\t\tif (x == left || x == right || y == top || y == bottom) {\n\t\t\t\tif (!isWallCallback(x, y)) { return false; }\n\t\t\t} else {\n\t\t\t\tif (!canBeDugCallback(x, y)) { return false; }\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty, 1 = wall, 2 = door. Multiple doors are allowed.\n */\nROT.Map.Feature.Room.prototype.create = function(digCallback) { \n\tvar left = this._x1-1;\n\tvar right = this._x2+1;\n\tvar top = this._y1-1;\n\tvar bottom = this._y2+1;\n\t\n\tvar value = 0;\n\tfor (var x=left; x<=right; x++) {\n\t\tfor (var y=top; y<=bottom; y++) {\n\t\t\tif (x+\",\"+y in this._doors) {\n\t\t\t\tvalue = 2;\n\t\t\t} else if (x == left || x == right || y == top || y == bottom) {\n\t\t\t\tvalue = 1;\n\t\t\t} else {\n\t\t\t\tvalue = 0;\n\t\t\t}\n\t\t\tdigCallback(x, y, value);\n\t\t}\n\t}\n};\n\nROT.Map.Feature.Room.prototype.getCenter = function() {\n\treturn [Math.round((this._x1 + this._x2)/2), Math.round((this._y1 + this._y2)/2)];\n};\n\nROT.Map.Feature.Room.prototype.getLeft = function() {\n\treturn this._x1;\n};\n\nROT.Map.Feature.Room.prototype.getRight = function() {\n\treturn this._x2;\n};\n\nROT.Map.Feature.Room.prototype.getTop = function() {\n\treturn this._y1;\n};\n\nROT.Map.Feature.Room.prototype.getBottom = function() {\n\treturn this._y2;\n};\n\n/**\n * @class Corridor\n * @augments ROT.Map.Feature\n * @param {int} startX\n * @param {int} startY\n * @param {int} endX\n * @param {int} endY\n */\nROT.Map.Feature.Corridor = function(startX, startY, endX, endY) {\n\tthis._startX = startX;\n\tthis._startY = startY;\n\tthis._endX = endX; \n\tthis._endY = endY;\n\tthis._endsWithAWall = true;\n};\nROT.Map.Feature.Corridor.extend(ROT.Map.Feature);\n\nROT.Map.Feature.Corridor.createRandomAt = function(x, y, dx, dy, options) {\n\tvar min = options.corridorLength[0];\n\tvar max = options.corridorLength[1];\n\tvar length = ROT.RNG.getUniformInt(min, max);\n\t\n\treturn new this(x, y, x + dx*length, y + dy*length);\n};\n\nROT.Map.Feature.Corridor.prototype.debug = function() {\n\tconsole.log(\"corridor\", this._startX, this._startY, this._endX, this._endY);\n};\n\nROT.Map.Feature.Corridor.prototype.isValid = function(isWallCallback, canBeDugCallback){ \n\tvar sx = this._startX;\n\tvar sy = this._startY;\n\tvar dx = this._endX-sx;\n\tvar dy = this._endY-sy;\n\tvar length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n\t\n\tif (dx) { dx = dx/Math.abs(dx); }\n\tif (dy) { dy = dy/Math.abs(dy); }\n\tvar nx = dy;\n\tvar ny = -dx;\n\t\n\tvar ok = true;\n\tfor (var i=0; i<length; i++) {\n\t\tvar x = sx + i*dx;\n\t\tvar y = sy + i*dy;\n\n\t\tif (!canBeDugCallback(     x,      y)) { ok = false; }\n\t\tif (!isWallCallback  (x + nx, y + ny)) { ok = false; }\n\t\tif (!isWallCallback  (x - nx, y - ny)) { ok = false; }\n\t\t\n\t\tif (!ok) {\n\t\t\tlength = i;\n\t\t\tthis._endX = x-dx;\n\t\t\tthis._endY = y-dy;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t/**\n\t * If the length degenerated, this corridor might be invalid\n\t */\n\t \n\t/* not supported */\n\tif (length == 0) { return false; } \n\t\n\t /* length 1 allowed only if the next space is empty */\n\tif (length == 1 && isWallCallback(this._endX + dx, this._endY + dy)) { return false; }\n\t\n\t/**\n\t * We do not want the corridor to crash into a corner of a room;\n\t * if any of the ending corners is empty, the N+1th cell of this corridor must be empty too.\n\t * \n\t * Situation:\n\t * #######1\n\t * .......?\n\t * #######2\n\t * \n\t * The corridor was dug from left to right.\n\t * 1, 2 - problematic corners, ? = N+1th cell (not dug)\n\t */\n\tvar firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);\n\tvar secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);\n\tthis._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);\n\tif ((firstCornerBad || secondCornerBad) && this._endsWithAWall) { return false; }\n\n\treturn true;\n};\n\n/**\n * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty.\n */\nROT.Map.Feature.Corridor.prototype.create = function(digCallback) { \n\tvar sx = this._startX;\n\tvar sy = this._startY;\n\tvar dx = this._endX-sx;\n\tvar dy = this._endY-sy;\n\tvar length = 1+Math.max(Math.abs(dx), Math.abs(dy));\n\t\n\tif (dx) { dx = dx/Math.abs(dx); }\n\tif (dy) { dy = dy/Math.abs(dy); }\n\tvar nx = dy;\n\tvar ny = -dx;\n\t\n\tfor (var i=0; i<length; i++) {\n\t\tvar x = sx + i*dx;\n\t\tvar y = sy + i*dy;\n\t\tdigCallback(x, y, 0);\n\t}\n\t\n\treturn true;\n};\n\nROT.Map.Feature.Corridor.prototype.createPriorityWalls = function(priorityWallCallback) {\n\tif (!this._endsWithAWall) { return; }\n\n\tvar sx = this._startX;\n\tvar sy = this._startY;\n\n\tvar dx = this._endX-sx;\n\tvar dy = this._endY-sy;\n\tif (dx) { dx = dx/Math.abs(dx); }\n\tif (dy) { dy = dy/Math.abs(dy); }\n\tvar nx = dy;\n\tvar ny = -dx;\n\n\tpriorityWallCallback(this._endX + dx, this._endY + dy);\n\tpriorityWallCallback(this._endX + nx, this._endY + ny);\n\tpriorityWallCallback(this._endX - nx, this._endY - ny);\n};\n/**\n * @class Base noise generator\n */\nROT.Noise = function() {\n};\n\nROT.Noise.prototype.get = function(x, y) {};\n/**\n * A simple 2d implementation of simplex noise by Ondrej Zara\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n */\n\n/**\n * @class 2D simplex noise generator\n * @param {int} [gradients=256] Random gradients\n */\nROT.Noise.Simplex = function(gradients) {\n\tROT.Noise.call(this);\n\n\tthis._F2 = 0.5 * (Math.sqrt(3) - 1);\n\tthis._G2 = (3 - Math.sqrt(3)) / 6;\n\n\tthis._gradients = [\n\t\t[ 0, -1],\n\t\t[ 1, -1],\n\t\t[ 1,  0],\n\t\t[ 1,  1],\n\t\t[ 0,  1],\n\t\t[-1,  1],\n\t\t[-1,  0],\n\t\t[-1, -1]\n\t];\n\n\tvar permutations = [];\n\tvar count = gradients || 256;\n\tfor (var i=0;i<count;i++) { permutations.push(i); }\n\tpermutations = permutations.randomize();\n\n\tthis._perms = [];\n\tthis._indexes = [];\n\n\tfor (var i=0;i<2*count;i++) {\n\t\tthis._perms.push(permutations[i % count]);\n\t\tthis._indexes.push(this._perms[i] % this._gradients.length);\n\t}\n\n};\nROT.Noise.Simplex.extend(ROT.Noise);\n\nROT.Noise.Simplex.prototype.get = function(xin, yin) {\n\tvar perms = this._perms;\n\tvar indexes = this._indexes;\n\tvar count = perms.length/2;\n\tvar G2 = this._G2;\n\n\tvar n0 =0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners\n\n\t// Skew the input space to determine which simplex cell we're in\n\tvar s = (xin + yin) * this._F2; // Hairy factor for 2D\n\tvar i = Math.floor(xin + s);\n\tvar j = Math.floor(yin + s);\n\tvar t = (i + j) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif (x0 > y0) {\n\t\ti1 = 1;\n\t\tj1 = 0;\n\t} else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\t\ti1 = 0;\n\t\tj1 = 1;\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1 + 2*G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1 + 2*G2;\n\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i.mod(count);\n\tvar jj = j.mod(count);\n\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0*x0 - y0*y0;\n\tif (t0 >= 0) {\n\t\tt0 *= t0;\n\t\tgi = indexes[ii+perms[jj]];\n\t\tvar grad = this._gradients[gi];\n\t\tn0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\n\t}\n\t\n\tvar t1 = 0.5 - x1*x1 - y1*y1;\n\tif (t1 >= 0) {\n\t\tt1 *= t1;\n\t\tgi = indexes[ii+i1+perms[jj+j1]];\n\t\tvar grad = this._gradients[gi];\n\t\tn1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\n\t}\n\t\n\tvar t2 = 0.5 - x2*x2 - y2*y2;\n\tif (t2 >= 0) {\n\t\tt2 *= t2;\n\t\tgi = indexes[ii+1+perms[jj+1]];\n\t\tvar grad = this._gradients[gi];\n\t\tn2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\n\t}\n\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70 * (n0 + n1 + n2);\n}\n/**\n * @class Abstract FOV algorithm\n * @param {function} lightPassesCallback Does the light pass through x,y?\n * @param {object} [options]\n * @param {int} [options.topology=8] 4/6/8\n */\nROT.FOV = function(lightPassesCallback, options) {\n\tthis._lightPasses = lightPassesCallback;\n\tthis._options = {\n\t\ttopology: 8\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n};\n\n/**\n * Compute visibility for a 360-degree circle\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.prototype.compute = function(x, y, R, callback) {};\n\n/**\n * Return all neighbors in a concentric ring\n * @param {int} cx center-x\n * @param {int} cy center-y\n * @param {int} r range\n */\nROT.FOV.prototype._getCircle = function(cx, cy, r) {\n\tvar result = [];\n\tvar dirs, countFactor, startOffset;\n\n\tswitch (this._options.topology) {\n\t\tcase 4:\n\t\t\tcountFactor = 1;\n\t\t\tstartOffset = [0, 1];\n\t\t\tdirs = [\n\t\t\t\tROT.DIRS[8][7],\n\t\t\t\tROT.DIRS[8][1],\n\t\t\t\tROT.DIRS[8][3],\n\t\t\t\tROT.DIRS[8][5]\n\t\t\t];\n\t\tbreak;\n\n\t\tcase 6:\n\t\t\tdirs = ROT.DIRS[6];\n\t\t\tcountFactor = 1;\n\t\t\tstartOffset = [-1, 1];\n\t\tbreak;\n\n\t\tcase 8:\n\t\t\tdirs = ROT.DIRS[4];\n\t\t\tcountFactor = 2;\n\t\t\tstartOffset = [-1, 1];\n\t\tbreak;\n\t}\n\n\t/* starting neighbor */\n\tvar x = cx + startOffset[0]*r;\n\tvar y = cy + startOffset[1]*r;\n\n\t/* circle */\n\tfor (var i=0;i<dirs.length;i++) {\n\t\tfor (var j=0;j<r*countFactor;j++) {\n\t\t\tresult.push([x, y]);\n\t\t\tx += dirs[i][0];\n\t\t\ty += dirs[i][1];\n\n\t\t}\n\t}\n\n\treturn result;\n};\n/**\n * @class Discrete shadowcasting algorithm. Obsoleted by Precise shadowcasting.\n * @augments ROT.FOV\n */\nROT.FOV.DiscreteShadowcasting = function(lightPassesCallback, options) {\n\tROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.DiscreteShadowcasting.extend(ROT.FOV);\n\n/**\n * @see ROT.FOV#compute\n */\nROT.FOV.DiscreteShadowcasting.prototype.compute = function(x, y, R, callback) {\n\tvar center = this._coords;\n\tvar map = this._map;\n\n\t/* this place is always visible */\n\tcallback(x, y, 0, 1);\n\n\t/* standing in a dark place. FIXME is this a good idea?  */\n\tif (!this._lightPasses(x, y)) { return; }\n\t\n\t/* start and end angles */\n\tvar DATA = [];\n\t\n\tvar A, B, cx, cy, blocks;\n\n\t/* analyze surrounding cells in concentric rings, starting from the center */\n\tfor (var r=1; r<=R; r++) {\n\t\tvar neighbors = this._getCircle(x, y, r);\n\t\tvar angle = 360 / neighbors.length;\n\n\t\tfor (var i=0;i<neighbors.length;i++) {\n\t\t\tcx = neighbors[i][0];\n\t\t\tcy = neighbors[i][1];\n\t\t\tA = angle * (i - 0.5);\n\t\t\tB = A + angle;\n\t\t\t\n\t\t\tblocks = !this._lightPasses(cx, cy);\n\t\t\tif (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) { callback(cx, cy, r, 1); }\n\t\t\t\n\t\t\tif (DATA.length == 2 && DATA[0] == 0 && DATA[1] == 360) { return; } /* cutoff? */\n\n\t\t} /* for all cells in this ring */\n\t} /* for all rings */\n};\n\n/**\n * @param {int} A start angle\n * @param {int} B end angle\n * @param {bool} blocks Does current cell block visibility?\n * @param {int[][]} DATA shadowed angle pairs\n */\nROT.FOV.DiscreteShadowcasting.prototype._visibleCoords = function(A, B, blocks, DATA) {\n\tif (A < 0) { \n\t\tvar v1 = this._visibleCoords(0, B, blocks, DATA);\n\t\tvar v2 = this._visibleCoords(360+A, 360, blocks, DATA);\n\t\treturn v1 || v2;\n\t}\n\t\n\tvar index = 0;\n\twhile (index < DATA.length && DATA[index] < A) { index++; }\n\t\n\tif (index == DATA.length) { /* completely new shadow */\n\t\tif (blocks) { DATA.push(A, B); } \n\t\treturn true;\n\t}\n\t\n\tvar count = 0;\n\t\n\tif (index % 2) { /* this shadow starts in an existing shadow, or within its ending boundary */\n\t\twhile (index < DATA.length && DATA[index] < B) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif (count == 0) { return false; }\n\t\t\n\t\tif (blocks) { \n\t\t\tif (count % 2) {\n\t\t\t\tDATA.splice(index-count, count, B);\n\t\t\t} else {\n\t\t\t\tDATA.splice(index-count, count);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\n\t} else { /* this shadow starts outside an existing shadow, or within a starting boundary */\n\t\twhile (index < DATA.length && DATA[index] < B) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\t/* visible when outside an existing shadow, or when overlapping */\n\t\tif (A == DATA[index-count] && count == 1) { return false; }\n\t\t\n\t\tif (blocks) { \n\t\t\tif (count % 2) {\n\t\t\t\tDATA.splice(index-count, count, A);\n\t\t\t} else {\n\t\t\t\tDATA.splice(index-count, count, A, B);\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn true;\n\t}\n};\n/**\n * @class Precise shadowcasting algorithm\n * @augments ROT.FOV\n */\nROT.FOV.PreciseShadowcasting = function(lightPassesCallback, options) {\n\tROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.PreciseShadowcasting.extend(ROT.FOV);\n\n/**\n * @see ROT.FOV#compute\n */\nROT.FOV.PreciseShadowcasting.prototype.compute = function(x, y, R, callback) {\n\t/* this place is always visible */\n\tcallback(x, y, 0, 1);\n\n\t/* standing in a dark place. FIXME is this a good idea?  */\n\tif (!this._lightPasses(x, y)) { return; }\n\t\n\t/* list of all shadows */\n\tvar SHADOWS = [];\n\t\n\tvar cx, cy, blocks, A1, A2, visibility;\n\n\t/* analyze surrounding cells in concentric rings, starting from the center */\n\tfor (var r=1; r<=R; r++) {\n\t\tvar neighbors = this._getCircle(x, y, r);\n\t\tvar neighborCount = neighbors.length;\n\n\t\tfor (var i=0;i<neighborCount;i++) {\n\t\t\tcx = neighbors[i][0];\n\t\t\tcy = neighbors[i][1];\n\t\t\t/* shift half-an-angle backwards to maintain consistency of 0-th cells */\n\t\t\tA1 = [i ? 2*i-1 : 2*neighborCount-1, 2*neighborCount];\n\t\t\tA2 = [2*i+1, 2*neighborCount]; \n\t\t\t\n\t\t\tblocks = !this._lightPasses(cx, cy);\n\t\t\tvisibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\n\t\t\tif (visibility) { callback(cx, cy, r, visibility); }\n\n\t\t\tif (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) { return; } /* cutoff? */\n\n\t\t} /* for all cells in this ring */\n\t} /* for all rings */\n};\n\n/**\n * @param {int[2]} A1 arc start\n * @param {int[2]} A2 arc end\n * @param {bool} blocks Does current arc block visibility?\n * @param {int[][]} SHADOWS list of active shadows\n */\nROT.FOV.PreciseShadowcasting.prototype._checkVisibility = function(A1, A2, blocks, SHADOWS) {\n\tif (A1[0] > A2[0]) { /* split into two sub-arcs */\n\t\tvar v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\n\t\tvar v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\n\t\treturn (v1+v2)/2;\n\t}\n\n\t/* index1: first shadow >= A1 */\n\tvar index1 = 0, edge1 = false;\n\twhile (index1 < SHADOWS.length) {\n\t\tvar old = SHADOWS[index1];\n\t\tvar diff = old[0]*A1[1] - A1[0]*old[1];\n\t\tif (diff >= 0) { /* old >= A1 */\n\t\t\tif (diff == 0 && !(index1 % 2)) { edge1 = true; }\n\t\t\tbreak;\n\t\t}\n\t\tindex1++;\n\t}\n\n\t/* index2: last shadow <= A2 */\n\tvar index2 = SHADOWS.length, edge2 = false;\n\twhile (index2--) {\n\t\tvar old = SHADOWS[index2];\n\t\tvar diff = A2[0]*old[1] - old[0]*A2[1];\n\t\tif (diff >= 0) { /* old <= A2 */\n\t\t\tif (diff == 0 && (index2 % 2)) { edge2 = true; }\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar visible = true;\n\tif (index1 == index2 && (edge1 || edge2)) {  /* subset of existing shadow, one of the edges match */\n\t\tvisible = false; \n\t} else if (edge1 && edge2 && index1+1==index2 && (index2 % 2)) { /* completely equivalent with existing shadow */\n\t\tvisible = false;\n\t} else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */\n\t\tvisible = false;\n\t}\n\t\n\tif (!visible) { return 0; } /* fast case: not visible */\n\t\n\tvar visibleLength, P;\n\n\t/* compute the length of visible arc, adjust list of shadows (if blocking) */\n\tvar remove = index2-index1+1;\n\tif (remove % 2) {\n\t\tif (index1 % 2) { /* first edge within existing shadow, second outside */\n\t\t\tvar P = SHADOWS[index1];\n\t\t\tvisibleLength = (A2[0]*P[1] - P[0]*A2[1]) / (P[1] * A2[1]);\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove, A2); }\n\t\t} else { /* second edge within existing shadow, first outside */\n\t\t\tvar P = SHADOWS[index2];\n\t\t\tvisibleLength = (P[0]*A1[1] - A1[0]*P[1]) / (A1[1] * P[1]);\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove, A1); }\n\t\t}\n\t} else {\n\t\tif (index1 % 2) { /* both edges within existing shadows */\n\t\t\tvar P1 = SHADOWS[index1];\n\t\t\tvar P2 = SHADOWS[index2];\n\t\t\tvisibleLength = (P2[0]*P1[1] - P1[0]*P2[1]) / (P1[1] * P2[1]);\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove); }\n\t\t} else { /* both edges outside existing shadows */\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove, A1, A2); }\n\t\t\treturn 1; /* whole arc visible! */\n\t\t}\n\t}\n\n\tvar arcLength = (A2[0]*A1[1] - A1[0]*A2[1]) / (A1[1] * A2[1]);\n\n\treturn visibleLength/arcLength;\n};\n/**\n * @class Recursive shadowcasting algorithm\n * Currently only supports 4/8 topologies, not hexagonal.\n * Based on Peter Harkins' implementation of Björn Bergström's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting\n * @augments ROT.FOV\n */\nROT.FOV.RecursiveShadowcasting = function(lightPassesCallback, options) {\n\tROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.RecursiveShadowcasting.extend(ROT.FOV);\n\n/** Octants used for translating recursive shadowcasting offsets */\nROT.FOV.RecursiveShadowcasting.OCTANTS = [\n\t[-1,  0,  0,  1],\n\t[ 0, -1,  1,  0],\n\t[ 0, -1, -1,  0],\n\t[-1,  0,  0, -1],\n\t[ 1,  0,  0, -1],\n\t[ 0,  1, -1,  0],\n\t[ 0,  1,  1,  0],\n\t[ 1,  0,  0,  1]\n];\n\n/**\n * Compute visibility for a 360-degree circle\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute = function(x, y, R, callback) {\n\t//You can always see your own tile\n\tcallback(x, y, 0, 1);\n\tfor(var i = 0; i < ROT.FOV.RecursiveShadowcasting.OCTANTS.length; i++) {\n\t\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[i], R, callback);\n\t}\n};\n\n/**\n * Compute visibility for a 180-degree arc\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute180 = function(x, y, R, dir, callback) {\n\t//You can always see your own tile\n\tcallback(x, y, 0, 1);\n\tvar previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 180 degrees\n\tvar nextPreviousOctant = (dir - 2 + 8) % 8; //Need to retrieve the previous two octants to render a full 180 degrees\n\tvar nextOctant = (dir+ 1 + 8) % 8; //Need to grab to next octant to render a full 180 degrees\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextPreviousOctant], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextOctant], R, callback);\n};\n\n/**\n * Compute visibility for a 90-degree arc\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute90 = function(x, y, R, dir, callback) {\n\t//You can always see your own tile\n\tcallback(x, y, 0, 1);\n\tvar previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 90 degrees\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);\n};\n\n/**\n * Render one octant (45-degree arc) of the viewshed\n * @param {int} x\n * @param {int} y\n * @param {int} octant Octant to be rendered\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype._renderOctant = function(x, y, octant, R, callback) {\n\t//Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses\n\tthis._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\n};\n\n/**\n * Actually calculates the visibility\n * @param {int} startX The starting X coordinate\n * @param {int} startY The starting Y coordinate\n * @param {int} row The row to render\n * @param {float} visSlopeStart The slope to start at\n * @param {float} visSlopeEnd The slope to end at\n * @param {int} radius The radius to reach out to\n * @param {int} xx \n * @param {int} xy \n * @param {int} yx \n * @param {int} yy \n * @param {function} callback The callback to use when we hit a block that is visible\n */\nROT.FOV.RecursiveShadowcasting.prototype._castVisibility = function(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\n\tif(visSlopeStart < visSlopeEnd) { return; }\n\tfor(var i = row; i <= radius; i++) {\n\t\tvar dx = -i - 1;\n\t\tvar dy = -i;\n\t\tvar blocked = false;\n\t\tvar newStart = 0;\n\n\t\t//'Row' could be column, names here assume octant 0 and would be flipped for half the octants\n\t\twhile(dx <= 0) {\n\t\t\tdx += 1;\n\n\t\t\t//Translate from relative coordinates to map coordinates\n\t\t\tvar mapX = startX + dx * xx + dy * xy;\n\t\t\tvar mapY = startY + dx * yx + dy * yy;\n\n\t\t\t//Range of the row\n\t\t\tvar slopeStart = (dx - 0.5) / (dy + 0.5);\n\t\t\tvar slopeEnd = (dx + 0.5) / (dy - 0.5);\n\t\t\n\t\t\t//Ignore if not yet at left edge of Octant\n\t\t\tif(slopeEnd > visSlopeStart) { continue; }\n\t\t\t\n\t\t\t//Done if past right edge\n\t\t\tif(slopeStart < visSlopeEnd) { break; }\n\t\t\t\t\n\t\t\t//If it's in range, it's visible\n\t\t\tif((dx * dx + dy * dy) < (radius * radius)) {\n\t\t\t\tcallback(mapX, mapY, i, 1);\n\t\t\t}\n\t\n\t\t\tif(!blocked) {\n\t\t\t\t//If tile is a blocking tile, cast around it\n\t\t\t\tif(!this._lightPasses(mapX, mapY) && i < radius) {\n\t\t\t\t\tblocked = true;\n\t\t\t\t\tthis._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\n\t\t\t\t\tnewStart = slopeEnd;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//Keep narrowing if scanning across a block\n\t\t\t\tif(!this._lightPasses(mapX, mapY)) {\n\t\t\t\t\tnewStart = slopeEnd;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//Block has ended\n\t\t\t\tblocked = false;\n\t\t\t\tvisSlopeStart = newStart;\n\t\t\t}\n\t\t}\n\t\tif(blocked) { break; }\n\t}\n};\n/**\n * @namespace Color operations\n */\nROT.Color = {\n\tfromString: function(str) {\n\t\tvar cached, r;\n\t\tif (str in this._cache) {\n\t\t\tcached = this._cache[str];\n\t\t} else {\n\t\t\tif (str.charAt(0) == \"#\") { /* hex rgb */\n\n\t\t\t\tvar values = str.match(/[0-9a-f]/gi).map(function(x) { return parseInt(x, 16); });\n\t\t\t\tif (values.length == 3) {\n\t\t\t\t\tcached = values.map(function(x) { return x*17; });\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i=0;i<3;i++) {\n\t\t\t\t\t\tvalues[i+1] += 16*values[i];\n\t\t\t\t\t\tvalues.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\tcached = values;\n\t\t\t\t}\n\n\t\t\t} else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) { /* decimal rgb */\n\t\t\t\tcached = r[1].split(/\\s*,\\s*/).map(function(x) { return parseInt(x); });\n\t\t\t} else { /* html name */\n\t\t\t\tcached = [0, 0, 0];\n\t\t\t}\n\n\t\t\tthis._cache[str] = cached;\n\t\t}\n\n\t\treturn cached.slice();\n\t},\n\n\t/**\n\t * Add two or more colors\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tadd: function(color1, color2) {\n\t\tvar result = color1.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tresult[i] += arguments[j][i];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Add two or more colors, MODIFIES FIRST ARGUMENT\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tadd_: function(color1, color2) {\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tcolor1[i] += arguments[j][i];\n\t\t\t}\n\t\t}\n\t\treturn color1;\n\t},\n\n\t/**\n\t * Multiply (mix) two or more colors\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tmultiply: function(color1, color2) {\n\t\tvar result = color1.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tresult[i] *= arguments[j][i] / 255;\n\t\t\t}\n\t\t\tresult[i] = Math.round(result[i]);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tmultiply_: function(color1, color2) {\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tcolor1[i] *= arguments[j][i] / 255;\n\t\t\t}\n\t\t\tcolor1[i] = Math.round(color1[i]);\n\t\t}\n\t\treturn color1;\n\t},\n\n\t/**\n\t * Interpolate (blend) two colors with a given factor\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @param {float} [factor=0.5] 0..1\n\t * @returns {number[]}\n\t */\n\tinterpolate: function(color1, color2, factor) {\n\t\tif (arguments.length < 3) { factor = 0.5; }\n\t\tvar result = color1.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tresult[i] = Math.round(result[i] + factor*(color2[i]-color1[i]));\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Interpolate (blend) two colors with a given factor in HSL mode\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @param {float} [factor=0.5] 0..1\n\t * @returns {number[]}\n\t */\n\tinterpolateHSL: function(color1, color2, factor) {\n\t\tif (arguments.length < 3) { factor = 0.5; }\n\t\tvar hsl1 = this.rgb2hsl(color1);\n\t\tvar hsl2 = this.rgb2hsl(color2);\n\t\tfor (var i=0;i<3;i++) {\n\t\t\thsl1[i] += factor*(hsl2[i]-hsl1[i]);\n\t\t}\n\t\treturn this.hsl2rgb(hsl1);\n\t},\n\n\t/**\n\t * Create a new random color based on this one\n\t * @param {number[]} color\n\t * @param {number[]} diff Set of standard deviations\n\t * @returns {number[]}\n\t */\n\trandomize: function(color, diff) {\n\t\tif (!(diff instanceof Array)) { diff = Math.round(ROT.RNG.getNormal(0, diff)); }\n\t\tvar result = color.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tresult[i] += (diff instanceof Array ? Math.round(ROT.RNG.getNormal(0, diff[i])) : diff);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.\n\t * @param {number[]} color\n\t * @returns {number[]}\n\t */\n\trgb2hsl: function(color) {\n\t\tvar r = color[0]/255;\n\t\tvar g = color[1]/255;\n\t\tvar b = color[2]/255;\n\n\t\tvar max = Math.max(r, g, b), min = Math.min(r, g, b);\n\t\tvar h, s, l = (max + min) / 2;\n\n\t\tif (max == min) {\n\t\t\th = s = 0; // achromatic\n\t\t} else {\n\t\t\tvar d = max - min;\n\t\t\ts = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\n\t\t\tswitch(max) {\n\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\tcase g: h = (b - r) / d + 2; break;\n\t\t\t\tcase b: h = (r - g) / d + 4; break;\n\t\t\t}\n\t\t\th /= 6;\n\t\t}\n\n\t\treturn [h, s, l];\n\t},\n\n\t/**\n\t * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.\n\t * @param {number[]} color\n\t * @returns {number[]}\n\t */\n\thsl2rgb: function(color) {\n\t\tvar l = color[2];\n\n\t\tif (color[1] == 0) {\n\t\t\tl = Math.round(l*255);\n\t\t\treturn [l, l, l];\n\t\t} else {\n\t\t\tvar hue2rgb = function(p, q, t) {\n\t\t\t\tif (t < 0) t += 1;\n\t\t\t\tif (t > 1) t -= 1;\n\t\t\t\tif (t < 1/6) return p + (q - p) * 6 * t;\n\t\t\t\tif (t < 1/2) return q;\n\t\t\t\tif (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t\t\t\treturn p;\n\t\t\t}\n\n\t\t\tvar s = color[1];\n\t\t\tvar q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n\t\t\tvar p = 2 * l - q;\n\t\t\tvar r = hue2rgb(p, q, color[0] + 1/3);\n\t\t\tvar g = hue2rgb(p, q, color[0]);\n\t\t\tvar b = hue2rgb(p, q, color[0] - 1/3);\n\t\t\treturn [Math.round(r*255), Math.round(g*255), Math.round(b*255)];\n\t\t}\n\t},\n\n\ttoRGB: function(color) {\n\t\treturn \"rgb(\" + this._clamp(color[0]) + \",\" + this._clamp(color[1]) + \",\" + this._clamp(color[2]) + \")\";\n\t},\n\n\ttoHex: function(color) {\n\t\tvar parts = [];\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tparts.push(this._clamp(color[i]).toString(16).lpad(\"0\", 2));\n\t\t}\n\t\treturn \"#\" + parts.join(\"\");\n\t},\n\n\t_clamp: function(num) {\n\t\tif (num < 0) {\n\t\t\treturn 0;\n\t\t} else if (num > 255) {\n\t\t\treturn 255;\n\t\t} else {\n\t\t\treturn num;\n\t\t}\n\t},\n\n\t_cache: {\n\t\t\"black\": [0,0,0],\n\t\t\"navy\": [0,0,128],\n\t\t\"darkblue\": [0,0,139],\n\t\t\"mediumblue\": [0,0,205],\n\t\t\"blue\": [0,0,255],\n\t\t\"darkgreen\": [0,100,0],\n\t\t\"green\": [0,128,0],\n\t\t\"teal\": [0,128,128],\n\t\t\"darkcyan\": [0,139,139],\n\t\t\"deepskyblue\": [0,191,255],\n\t\t\"darkturquoise\": [0,206,209],\n\t\t\"mediumspringgreen\": [0,250,154],\n\t\t\"lime\": [0,255,0],\n\t\t\"springgreen\": [0,255,127],\n\t\t\"aqua\": [0,255,255],\n\t\t\"cyan\": [0,255,255],\n\t\t\"midnightblue\": [25,25,112],\n\t\t\"dodgerblue\": [30,144,255],\n\t\t\"forestgreen\": [34,139,34],\n\t\t\"seagreen\": [46,139,87],\n\t\t\"darkslategray\": [47,79,79],\n\t\t\"darkslategrey\": [47,79,79],\n\t\t\"limegreen\": [50,205,50],\n\t\t\"mediumseagreen\": [60,179,113],\n\t\t\"turquoise\": [64,224,208],\n\t\t\"royalblue\": [65,105,225],\n\t\t\"steelblue\": [70,130,180],\n\t\t\"darkslateblue\": [72,61,139],\n\t\t\"mediumturquoise\": [72,209,204],\n\t\t\"indigo\": [75,0,130],\n\t\t\"darkolivegreen\": [85,107,47],\n\t\t\"cadetblue\": [95,158,160],\n\t\t\"cornflowerblue\": [100,149,237],\n\t\t\"mediumaquamarine\": [102,205,170],\n\t\t\"dimgray\": [105,105,105],\n\t\t\"dimgrey\": [105,105,105],\n\t\t\"slateblue\": [106,90,205],\n\t\t\"olivedrab\": [107,142,35],\n\t\t\"slategray\": [112,128,144],\n\t\t\"slategrey\": [112,128,144],\n\t\t\"lightslategray\": [119,136,153],\n\t\t\"lightslategrey\": [119,136,153],\n\t\t\"mediumslateblue\": [123,104,238],\n\t\t\"lawngreen\": [124,252,0],\n\t\t\"chartreuse\": [127,255,0],\n\t\t\"aquamarine\": [127,255,212],\n\t\t\"maroon\": [128,0,0],\n\t\t\"purple\": [128,0,128],\n\t\t\"olive\": [128,128,0],\n\t\t\"gray\": [128,128,128],\n\t\t\"grey\": [128,128,128],\n\t\t\"skyblue\": [135,206,235],\n\t\t\"lightskyblue\": [135,206,250],\n\t\t\"blueviolet\": [138,43,226],\n\t\t\"darkred\": [139,0,0],\n\t\t\"darkmagenta\": [139,0,139],\n\t\t\"saddlebrown\": [139,69,19],\n\t\t\"darkseagreen\": [143,188,143],\n\t\t\"lightgreen\": [144,238,144],\n\t\t\"mediumpurple\": [147,112,216],\n\t\t\"darkviolet\": [148,0,211],\n\t\t\"palegreen\": [152,251,152],\n\t\t\"darkorchid\": [153,50,204],\n\t\t\"yellowgreen\": [154,205,50],\n\t\t\"sienna\": [160,82,45],\n\t\t\"brown\": [165,42,42],\n\t\t\"darkgray\": [169,169,169],\n\t\t\"darkgrey\": [169,169,169],\n\t\t\"lightblue\": [173,216,230],\n\t\t\"greenyellow\": [173,255,47],\n\t\t\"paleturquoise\": [175,238,238],\n\t\t\"lightsteelblue\": [176,196,222],\n\t\t\"powderblue\": [176,224,230],\n\t\t\"firebrick\": [178,34,34],\n\t\t\"darkgoldenrod\": [184,134,11],\n\t\t\"mediumorchid\": [186,85,211],\n\t\t\"rosybrown\": [188,143,143],\n\t\t\"darkkhaki\": [189,183,107],\n\t\t\"silver\": [192,192,192],\n\t\t\"mediumvioletred\": [199,21,133],\n\t\t\"indianred\": [205,92,92],\n\t\t\"peru\": [205,133,63],\n\t\t\"chocolate\": [210,105,30],\n\t\t\"tan\": [210,180,140],\n\t\t\"lightgray\": [211,211,211],\n\t\t\"lightgrey\": [211,211,211],\n\t\t\"palevioletred\": [216,112,147],\n\t\t\"thistle\": [216,191,216],\n\t\t\"orchid\": [218,112,214],\n\t\t\"goldenrod\": [218,165,32],\n\t\t\"crimson\": [220,20,60],\n\t\t\"gainsboro\": [220,220,220],\n\t\t\"plum\": [221,160,221],\n\t\t\"burlywood\": [222,184,135],\n\t\t\"lightcyan\": [224,255,255],\n\t\t\"lavender\": [230,230,250],\n\t\t\"darksalmon\": [233,150,122],\n\t\t\"violet\": [238,130,238],\n\t\t\"palegoldenrod\": [238,232,170],\n\t\t\"lightcoral\": [240,128,128],\n\t\t\"khaki\": [240,230,140],\n\t\t\"aliceblue\": [240,248,255],\n\t\t\"honeydew\": [240,255,240],\n\t\t\"azure\": [240,255,255],\n\t\t\"sandybrown\": [244,164,96],\n\t\t\"wheat\": [245,222,179],\n\t\t\"beige\": [245,245,220],\n\t\t\"whitesmoke\": [245,245,245],\n\t\t\"mintcream\": [245,255,250],\n\t\t\"ghostwhite\": [248,248,255],\n\t\t\"salmon\": [250,128,114],\n\t\t\"antiquewhite\": [250,235,215],\n\t\t\"linen\": [250,240,230],\n\t\t\"lightgoldenrodyellow\": [250,250,210],\n\t\t\"oldlace\": [253,245,230],\n\t\t\"red\": [255,0,0],\n\t\t\"fuchsia\": [255,0,255],\n\t\t\"magenta\": [255,0,255],\n\t\t\"deeppink\": [255,20,147],\n\t\t\"orangered\": [255,69,0],\n\t\t\"tomato\": [255,99,71],\n\t\t\"hotpink\": [255,105,180],\n\t\t\"coral\": [255,127,80],\n\t\t\"darkorange\": [255,140,0],\n\t\t\"lightsalmon\": [255,160,122],\n\t\t\"orange\": [255,165,0],\n\t\t\"lightpink\": [255,182,193],\n\t\t\"pink\": [255,192,203],\n\t\t\"gold\": [255,215,0],\n\t\t\"peachpuff\": [255,218,185],\n\t\t\"navajowhite\": [255,222,173],\n\t\t\"moccasin\": [255,228,181],\n\t\t\"bisque\": [255,228,196],\n\t\t\"mistyrose\": [255,228,225],\n\t\t\"blanchedalmond\": [255,235,205],\n\t\t\"papayawhip\": [255,239,213],\n\t\t\"lavenderblush\": [255,240,245],\n\t\t\"seashell\": [255,245,238],\n\t\t\"cornsilk\": [255,248,220],\n\t\t\"lemonchiffon\": [255,250,205],\n\t\t\"floralwhite\": [255,250,240],\n\t\t\"snow\": [255,250,250],\n\t\t\"yellow\": [255,255,0],\n\t\t\"lightyellow\": [255,255,224],\n\t\t\"ivory\": [255,255,240],\n\t\t\"white\": [255,255,255]\n\t}\n};\n/**\n * @class Lighting computation, based on a traditional FOV for multiple light sources and multiple passes.\n * @param {function} reflectivityCallback Callback to retrieve cell reflectivity (0..1)\n * @param {object} [options]\n * @param {int} [options.passes=1] Number of passes. 1 equals to simple FOV of all light sources, >1 means a *highly simplified* radiosity-like algorithm.\n * @param {int} [options.emissionThreshold=100] Cells with emissivity > threshold will be treated as light source in the next pass.\n * @param {int} [options.range=10] Max light range\n */\nROT.Lighting = function(reflectivityCallback, options) {\n\tthis._reflectivityCallback = reflectivityCallback;\n\tthis._options = {\n\t\tpasses: 1,\n\t\temissionThreshold: 100,\n\t\trange: 10\n\t};\n\tthis._fov = null;\n\n\tthis._lights = {};\n\tthis._reflectivityCache = {};\n\tthis._fovCache = {};\n\n\tthis.setOptions(options);\n};\n\n/**\n * Adjust options at runtime\n * @see ROT.Lighting\n * @param {object} [options]\n */\nROT.Lighting.prototype.setOptions = function(options) {\n\tfor (var p in options) { this._options[p] = options[p]; }\n\tif (options && options.range) { this.reset(); }\n\treturn this;\n};\n\n/**\n * Set the used Field-Of-View algo\n * @param {ROT.FOV} fov\n */\nROT.Lighting.prototype.setFOV = function(fov) {\n\tthis._fov = fov;\n\tthis._fovCache = {};\n\treturn this;\n};\n\n/**\n * Set (or remove) a light source\n * @param {int} x\n * @param {int} y\n * @param {null || string || number[3]} color\n */\nROT.Lighting.prototype.setLight = function(x, y, color) {\n  var key = x + \",\" + y;\n\n  if (color) {\n    this._lights[key] = (typeof(color) == \"string\" ? ROT.Color.fromString(color) : color);\n  } else {\n    delete this._lights[key];\n  }\n  return this;\n};\n\n/**\n * Remove all light sources\n */\nROT.Lighting.prototype.clearLights = function() {\n    this._lights = {};\n};\n\n/**\n * Reset the pre-computed topology values. Call whenever the underlying map changes its light-passability.\n */\nROT.Lighting.prototype.reset = function() {\n\tthis._reflectivityCache = {};\n\tthis._fovCache = {};\n\n\treturn this;\n};\n\n/**\n * Compute the lighting\n * @param {function} lightingCallback Will be called with (x, y, color) for every lit cell\n */\nROT.Lighting.prototype.compute = function(lightingCallback) {\n\tvar doneCells = {};\n\tvar emittingCells = {};\n\tvar litCells = {};\n\n\tfor (var key in this._lights) { /* prepare emitters for first pass */\n\t\tvar light = this._lights[key];\n\t\temittingCells[key] = [0, 0, 0];\n\t\tROT.Color.add_(emittingCells[key], light);\n\t}\n\n\tfor (var i=0;i<this._options.passes;i++) { /* main loop */\n\t\tthis._emitLight(emittingCells, litCells, doneCells);\n\t\tif (i+1 == this._options.passes) { continue; } /* not for the last pass */\n\t\temittingCells = this._computeEmitters(litCells, doneCells);\n\t}\n\n\tfor (var litKey in litCells) { /* let the user know what and how is lit */\n\t\tvar parts = litKey.split(\",\");\n\t\tvar x = parseInt(parts[0]);\n\t\tvar y = parseInt(parts[1]);\n\t\tlightingCallback(x, y, litCells[litKey]);\n\t}\n\n\treturn this;\n};\n\n/**\n * Compute one iteration from all emitting cells\n * @param {object} emittingCells These emit light\n * @param {object} litCells Add projected light to these\n * @param {object} doneCells These already emitted, forbid them from further calculations\n */\nROT.Lighting.prototype._emitLight = function(emittingCells, litCells, doneCells) {\n\tfor (var key in emittingCells) {\n\t\tvar parts = key.split(\",\");\n\t\tvar x = parseInt(parts[0]);\n\t\tvar y = parseInt(parts[1]);\n\t\tthis._emitLightFromCell(x, y, emittingCells[key], litCells);\n\t\tdoneCells[key] = 1;\n\t}\n\treturn this;\n};\n\n/**\n * Prepare a list of emitters for next pass\n * @param {object} litCells\n * @param {object} doneCells\n * @returns {object}\n */\nROT.Lighting.prototype._computeEmitters = function(litCells, doneCells) {\n\tvar result = {};\n\n\tfor (var key in litCells) {\n\t\tif (key in doneCells) { continue; } /* already emitted */\n\n\t\tvar color = litCells[key];\n\n\t\tif (key in this._reflectivityCache) {\n\t\t\tvar reflectivity = this._reflectivityCache[key];\n\t\t} else {\n\t\t\tvar parts = key.split(\",\");\n\t\t\tvar x = parseInt(parts[0]);\n\t\t\tvar y = parseInt(parts[1]);\n\t\t\tvar reflectivity = this._reflectivityCallback(x, y);\n\t\t\tthis._reflectivityCache[key] = reflectivity;\n\t\t}\n\n\t\tif (reflectivity == 0) { continue; } /* will not reflect at all */\n\n\t\t/* compute emission color */\n\t\tvar emission = [];\n\t\tvar intensity = 0;\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tvar part = Math.round(color[i]*reflectivity);\n\t\t\temission[i] = part;\n\t\t\tintensity += part;\n\t\t}\n\t\tif (intensity > this._options.emissionThreshold) { result[key] = emission; }\n\t}\n\n\treturn result;\n};\n\n/**\n * Compute one iteration from one cell\n * @param {int} x\n * @param {int} y\n * @param {number[]} color\n * @param {object} litCells Cell data to by updated\n */\nROT.Lighting.prototype._emitLightFromCell = function(x, y, color, litCells) {\n\tvar key = x+\",\"+y;\n\tif (key in this._fovCache) {\n\t\tvar fov = this._fovCache[key];\n\t} else {\n\t\tvar fov = this._updateFOV(x, y);\n\t}\n\n\tfor (var fovKey in fov) {\n\t\tvar formFactor = fov[fovKey];\n\n\t\tif (fovKey in litCells) { /* already lit */\n\t\t\tvar result = litCells[fovKey];\n\t\t} else { /* newly lit */\n\t\t\tvar result = [0, 0, 0];\n\t\t\tlitCells[fovKey] = result;\n\t\t}\n\n\t\tfor (var i=0;i<3;i++) { result[i] += Math.round(color[i]*formFactor); } /* add light color */\n\t}\n\n\treturn this;\n};\n\n/**\n * Compute FOV (\"form factor\") for a potential light source at [x,y]\n * @param {int} x\n * @param {int} y\n * @returns {object}\n */\nROT.Lighting.prototype._updateFOV = function(x, y) {\n\tvar key1 = x+\",\"+y;\n\tvar cache = {};\n\tthis._fovCache[key1] = cache;\n\tvar range = this._options.range;\n\tvar cb = function(x, y, r, vis) {\n\t\tvar key2 = x+\",\"+y;\n\t\tvar formFactor = vis * (1-r/range);\n\t\tif (formFactor == 0) { return; }\n\t\tcache[key2] = formFactor;\n\t};\n\tthis._fov.compute(x, y, range, cb.bind(this));\n\n\treturn cache;\n};\n/**\n * @class Abstract pathfinder\n * @param {int} toX Target X coord\n * @param {int} toY Target Y coord\n * @param {function} passableCallback Callback to determine map passability\n * @param {object} [options]\n * @param {int} [options.topology=8]\n */\nROT.Path = function(toX, toY, passableCallback, options) {\n\tthis._toX = toX;\n\tthis._toY = toY;\n\tthis._fromX = null;\n\tthis._fromY = null;\n\tthis._passableCallback = passableCallback;\n\tthis._options = {\n\t\ttopology: 8\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\tthis._dirs = ROT.DIRS[this._options.topology];\n\tif (this._options.topology == 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */\n\t\tthis._dirs = [\n\t\t\tthis._dirs[0],\n\t\t\tthis._dirs[2],\n\t\t\tthis._dirs[4],\n\t\t\tthis._dirs[6],\n\t\t\tthis._dirs[1],\n\t\t\tthis._dirs[3],\n\t\t\tthis._dirs[5],\n\t\t\tthis._dirs[7]\n\t\t]\n\t}\n};\n\n/**\n * Compute a path from a given point\n * @param {int} fromX\n * @param {int} fromY\n * @param {function} callback Will be called for every path item with arguments \"x\" and \"y\"\n */\nROT.Path.prototype.compute = function(fromX, fromY, callback) {\n};\n\nROT.Path.prototype._getNeighbors = function(cx, cy) {\n\tvar result = [];\n\tfor (var i=0;i<this._dirs.length;i++) {\n\t\tvar dir = this._dirs[i];\n\t\tvar x = cx + dir[0];\n\t\tvar y = cy + dir[1];\n\t\t\n\t\tif (!this._passableCallback(x, y)) { continue; }\n\t\tresult.push([x, y]);\n\t}\n\t\n\treturn result;\n};\n/**\n * @class Simplified Dijkstra's algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nROT.Path.Dijkstra = function(toX, toY, passableCallback, options) {\n\tROT.Path.call(this, toX, toY, passableCallback, options);\n\n\tthis._computed = {};\n\tthis._todo = [];\n\tthis._add(toX, toY, null);\n};\nROT.Path.Dijkstra.extend(ROT.Path);\n\n/**\n * Compute a path from a given point\n * @see ROT.Path#compute\n */\nROT.Path.Dijkstra.prototype.compute = function(fromX, fromY, callback) {\n\tvar key = fromX+\",\"+fromY;\n\tif (!(key in this._computed)) { this._compute(fromX, fromY); }\n\tif (!(key in this._computed)) { return; }\n\t\n\tvar item = this._computed[key];\n\twhile (item) {\n\t\tcallback(item.x, item.y);\n\t\titem = item.prev;\n\t}\n};\n\n/**\n * Compute a non-cached value\n */\nROT.Path.Dijkstra.prototype._compute = function(fromX, fromY) {\n\twhile (this._todo.length) {\n\t\tvar item = this._todo.shift();\n\t\tif (item.x == fromX && item.y == fromY) { return; }\n\t\t\n\t\tvar neighbors = this._getNeighbors(item.x, item.y);\n\t\t\n\t\tfor (var i=0;i<neighbors.length;i++) {\n\t\t\tvar neighbor = neighbors[i];\n\t\t\tvar x = neighbor[0];\n\t\t\tvar y = neighbor[1];\n\t\t\tvar id = x+\",\"+y;\n\t\t\tif (id in this._computed) { continue; } /* already done */\t\n\t\t\tthis._add(x, y, item); \n\t\t}\n\t}\n};\n\nROT.Path.Dijkstra.prototype._add = function(x, y, prev) {\n\tvar obj = {\n\t\tx: x,\n\t\ty: y,\n\t\tprev: prev\n\t};\n\tthis._computed[x+\",\"+y] = obj;\n\tthis._todo.push(obj);\n};\n/**\n * @class Simplified A* algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nROT.Path.AStar = function(toX, toY, passableCallback, options) {\n\tROT.Path.call(this, toX, toY, passableCallback, options);\n\n\tthis._todo = [];\n\tthis._done = {};\n\tthis._fromX = null;\n\tthis._fromY = null;\n};\nROT.Path.AStar.extend(ROT.Path);\n\n/**\n * Compute a path from a given point\n * @see ROT.Path#compute\n */\nROT.Path.AStar.prototype.compute = function(fromX, fromY, callback) {\n\tthis._todo = [];\n\tthis._done = {};\n\tthis._fromX = fromX;\n\tthis._fromY = fromY;\n\tthis._add(this._toX, this._toY, null);\n\n\twhile (this._todo.length) {\n\t\tvar item = this._todo.shift();\n\t\tvar id = item.x+\",\"+item.y;\n\t\tif (id in this._done) { continue; }\n\t\tthis._done[id] = item;\n\t\tif (item.x == fromX && item.y == fromY) { break; }\n\n\t\tvar neighbors = this._getNeighbors(item.x, item.y);\n\n\t\tfor (var i=0;i<neighbors.length;i++) {\n\t\t\tvar neighbor = neighbors[i];\n\t\t\tvar x = neighbor[0];\n\t\t\tvar y = neighbor[1];\n\t\t\tvar id = x+\",\"+y;\n\t\t\tif (id in this._done) { continue; }\n\t\t\tthis._add(x, y, item); \n\t\t}\n\t}\n\t\n\tvar item = this._done[fromX+\",\"+fromY];\n\tif (!item) { return; }\n\t\n\twhile (item) {\n\t\tcallback(item.x, item.y);\n\t\titem = item.prev;\n\t}\n};\n\nROT.Path.AStar.prototype._add = function(x, y, prev) {\n\tvar h = this._distance(x, y);\n\tvar obj = {\n\t\tx: x,\n\t\ty: y,\n\t\tprev: prev,\n\t\tg: (prev ? prev.g+1 : 0),\n\t\th: h\n\t};\n\t\n\t/* insert into priority queue */\n\t\n\tvar f = obj.g + obj.h;\n\tfor (var i=0;i<this._todo.length;i++) {\n\t\tvar item = this._todo[i];\n\t\tvar itemF = item.g + item.h;\n\t\tif (f < itemF || (f == itemF && h < item.h)) {\n\t\t\tthis._todo.splice(i, 0, obj);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tthis._todo.push(obj);\n};\n\nROT.Path.AStar.prototype._distance = function(x, y) {\n\tswitch (this._options.topology) {\n\t\tcase 4:\n\t\t\treturn (Math.abs(x-this._fromX) + Math.abs(y-this._fromY));\n\t\tbreak;\n\n\t\tcase 6:\n\t\t\tvar dx = Math.abs(x - this._fromX);\n\t\t\tvar dy = Math.abs(y - this._fromY);\n\t\t\treturn dy + Math.max(0, (dx-dy)/2);\n\t\tbreak;\n\n\t\tcase 8: \n\t\t\treturn Math.max(Math.abs(x-this._fromX), Math.abs(y-this._fromY));\n\t\tbreak;\n\t}\n\n        throw new Error(\"Illegal topology\");\n};\n/**\n * @class Terminal backend\n * @private\n */\nROT.Display.Term = function(context) {\n\tROT.Display.Backend.call(this, context);\n\tthis._cx = -1;\n\tthis._cy = -1;\n\tthis._lastColor = \"\";\n\tthis._options = {};\n\tthis._ox = 0;\n\tthis._oy = 0;\n\tthis._termcolor = {};\n}\nROT.Display.Term.extend(ROT.Display.Backend);\n\nROT.Display.Term.prototype.compute = function(options) {\n\tthis._options = options;\n\tthis._ox = Math.floor((process.stdout.columns - options.width) / 2);\n\tthis._oy = Math.floor((process.stdout.rows - options.height) / 2);\n\tthis._termcolor = new ROT.Display.Term[options.termColor.capitalize()](this._context);\n\tthis._context._termcolor = this._termcolor;\n}\n\nROT.Display.Term.prototype.draw = function(data, clearBefore) {\n\t// determine where to draw what with what colors\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\t// determine if we need to move the terminal cursor\n\tvar dx = this._ox + x;\n\tvar dy = this._oy + y;\n\tif (dx < 0 || dx >= process.stdout.columns) { return; }\n\tif (dy < 0 || dy >= process.stdout.rows) { return; }\n\tif (dx !== this._cx || dy !== this._cy) {\n\t\tprocess.stdout.write(this._termcolor.positionToAnsi(dx,dy));\n\t\tthis._cx = dx;\n\t\tthis._cy = dy;\n\t}\n\n\t// terminals automatically clear, but if we're clearing when we're\n\t// not otherwise provided with a character, just use a space instead\n\tif (clearBefore) {\n\t\tif (!ch) {\n\t\t\tch = \" \";\n\t\t}\n\t}\n\t\t\n\t// if we're not clearing and not provided with a character, do nothing\n\tif (!ch) { return; }\n\n\t// determine if we need to change colors\n\tvar newColor = this._termcolor.colorToAnsi(fg,bg);\n\tif (newColor !== this._lastColor) {\n\t\tprocess.stdout.write(newColor);\n\t\tthis._lastColor = newColor;\n\t}\n\n\t// write the provided symbol to the display\n\tvar chars = [].concat(ch);\n\tprocess.stdout.write(chars[0]);\n\n\t// update our position, given that we wrote a character\n\tthis._cx++;\n\tif (this._cx >= process.stdout.columns) {\n\t\tthis._cx = 0;\n\t\tthis._cy++;\n\t}\n}\n\nROT.Display.Term.prototype.computeSize = function(availWidth, availHeight) {\n\treturn [process.stdout.columns, process.stdout.rows];\n}\n\nROT.Display.Term.prototype.computeFontSize = function(availWidth, availHeight) {\n\treturn 12;\n}\n\nROT.Display.Term.prototype.eventToPosition = function(x, y) {\n\treturn [x,y]\n}\n/**\n * @class Abstract terminal code module\n * @private\n */\nROT.Display.Term.Color = function(context) {\n\tthis._context = context;\n}\n\nROT.Display.Term.Color.prototype.clearToAnsi = function(bg) {\n}\n\nROT.Display.Term.Color.prototype.colorToAnsi = function(fg, bg) {\n}\n\nROT.Display.Term.Color.prototype.positionToAnsi = function(x, y) {\n}\n/**\n * @class xterm terminal code module\n * @private\n */\nROT.Display.Term.Xterm = function(context) {\n\tROT.Display.Term.Color.call(this, context);\n}\nROT.Display.Term.Xterm.extend(ROT.Display.Term.Color);\n\nROT.Display.Term.Xterm.prototype.clearToAnsi = function(bg) {\n\treturn \"\\x1b[0;48;5;\"\n\t\t+ this._termcolor(bg)\n\t\t+ \"m\\x1b[2J\";\n}\n\nROT.Display.Term.Xterm.prototype.colorToAnsi = function(fg, bg) {\n\treturn \"\\x1b[0;38;5;\"\n\t\t+ this._termcolor(fg)\n\t\t+ \";48;5;\"\n\t\t+ this._termcolor(bg)\n\t\t+ \"m\";\n}\n\nROT.Display.Term.Xterm.prototype.positionToAnsi = function(x, y) {\n\treturn \"\\x1b[\" + (y+1) + \";\" + (x+1) + \"H\";\n}\n\nROT.Display.Term.Xterm.prototype._termcolor = function(color) {\n\tvar SRC_COLORS = 256.0;\n\tvar DST_COLORS = 6.0;\n\tvar COLOR_RATIO = DST_COLORS / SRC_COLORS;\n\tvar rgb = ROT.Color.fromString(color);\n\tvar r = Math.floor(rgb[0] * COLOR_RATIO);\n\tvar g = Math.floor(rgb[1] * COLOR_RATIO);\n\tvar b = Math.floor(rgb[2] * COLOR_RATIO);\n\treturn r*36 + g*6 + b*1 + 16;\n}\n/**\n * Export to Node.js module\n */\nfor (var p in ROT) {\n\texports[p] = ROT[p];\n}\n  return ROT;\n}));\n","export default {\n  black: \"#000010\",\n  darkBlue: \"#283a6d\",\n  darkPurple: \"#7e2553\",\n  darkGreen: \"#008751\",\n  brown: \"#ab5236\",\n  darkGray: \"#5f574f\",\n  lightGray: \"#c2c3c7\",\n  white: \"#fff1f8\",\n  red: \"#ff0040\",\n  orange: \"#ffa300\",\n  yellow: \"#ffec27\",\n  green: \"#00e436\",\n  blue: \"#29adff\",\n  indigo: \"#83769c\",\n  pink: \"#ff77a8\",\n  peach: \"#ffccaa\"\n};\n","import Colors from \"./colors\";\n\nclass Glyph {\n  constructor({ fg = Colors.white, bg = Colors.black, char = \" \" }) {\n    this.fg = fg;\n    this.bg = bg;\n    this.char = char;\n  }\n  getFg() {\n    return this.fg;\n  }\n  getBg() {\n    return this.bg;\n  }\n  getChar() {\n    return this.char;\n  }\n}\n\nexport default Glyph;\n","import Glyph from \"./glyph\";\n\nclass DynamicGlyph extends Glyph {\n  constructor({ name = \"\", mixins = [] }) {\n    super(...arguments);\n    this.name = name;\n    this.attachedMixins = {};\n    this.attachedMixinGroups = {};\n\n    mixins.forEach(mixinFactory => {\n      const mixin = new mixinFactory(...arguments);\n\n      this.attachedMixins[mixin.name] = true;\n      delete mixin.name;\n      if (mixin.groupName) {\n        this.attachedMixinGroups[mixin.groupName] = true;\n        delete mixin.groupName;\n      }\n      Object.assign(this, mixin);\n    });\n  }\n\n  hasMixin(mixin) {\n    return (\n      this.attachedMixins.hasOwnProperty(mixin) ||\n      this.attachedMixinGroups.hasOwnProperty(mixin)\n    );\n  }\n\n  describe() {\n    return this.name;\n  }\n\n  describeA(capitalize) {\n    const prefixes = capitalize ? [`A`, `An`] : [`a`, `an`];\n    const prefix =\n      \"aeiou\".indexOf(this.describe()[0].toLowerCase()) >= 0 ? 1 : 0;\n    return prefixes[prefix] + \" \" + this.describe();\n  }\n\n  describeThe(capitalize) {\n    const prefix = capitalize ? `The` : `the`;\n    return prefix + \" \" + this.describe();\n  }\n}\n\nexport default DynamicGlyph;\n","import DynamicGlyph from \"../dynamicGlyph\";\n\nclass Entity extends DynamicGlyph {\n  constructor({\n    x = 0,\n    y = 0,\n    name = \" \",\n    level = null,\n    Game = null,\n    speed = 1000\n  }) {\n    super(...arguments);\n    this.x = x;\n    this.y = y;\n    this.name = name;\n    this.level = level;\n    this.game = Game;\n    this.speed = speed;\n    this.alive = true;\n  }\n  isAlive() {\n    return this.alive;\n  }\n  kill() {\n    if (!this.isAlive()) return;\n    this.alive = false;\n    if (this.hasMixin(\"PlayerActor\")) {\n      this.act();\n    } else {\n      this.getLevel().removeEntity(this);\n    }\n  }\n  getSpeed() {\n    let mod = 0;\n    if (this.hasMixin(\"TimedStatusEffects\")) {\n      this.getTimedStatusEffects().forEach(s => {\n        if (s.property == \"speed\") {\n          mod += s.value;\n        }\n      });\n    }\n    if (this.armor && this.armor.length > 1) {\n      mod -= Math.pow(5, this.armor.length);\n    }\n    return Math.max(this.speed + mod, 100);\n  }\n\n  getGame() {\n    return this.game;\n  }\n  getLevel() {\n    return this.level;\n  }\n  setLevel(newLevel) {\n    this.level = newLevel;\n  }\n  getName() {\n    return this.name;\n  }\n  setName(newName) {\n    this.name = newName;\n  }\n  getX() {\n    return this.x;\n  }\n  getY() {\n    return this.y;\n  }\n  setX(newX) {\n    this.x = newX;\n  }\n  setY(newY) {\n    this.y = newY;\n  }\n  setPosition(newX, newY) {\n    if (this.level) {\n      this.level.updateEntityPosition(this.x, this.y, newX, newY);\n    }\n    this.x = newX;\n    this.y = newY;\n  }\n}\n\nexport default Entity;\n","import ROT from \"rot-js\";\nimport startScreen from \"./startScreen\";\n\nclass gameOverScreen {\n  constructor(Game) {\n    this.game = Game;\n  }\n  exit() {}\n  handleInput(inputData) {\n    if (inputData.keyCode == ROT.VK_RETURN) {\n      window.location.reload();\n    }\n  }\n  render(Game) {\n    const display = Game.getDisplay();\n    display.drawText(0, 0, \"game over!\");\n  }\n}\nexport default gameOverScreen;\n","import ROT from \"rot-js\";\nimport startScreen from \"./startScreen\";\n\nclass WinScreen {\n  constructor(Game) {\n    this.game = Game;\n  }\n  exit() {}\n  handleInput(inputData) {\n    if (inputData.keyCode == ROT.VK_RETURN) {\n      this.game.switchScreen(startScreen);\n    }\n  }\n  render(Game) {\n    const display = Game.getDisplay();\n    display.drawText(0, 0, \"YOU WIN.  CONGRATZ\");\n  }\n}\nexport default WinScreen;\n","export function h(name, attributes /*, ...rest*/) {\n  var node\n  var rest = []\n  var children = []\n  var length = arguments.length\n\n  while (length-- > 2) rest.push(arguments[length])\n\n  while (rest.length) {\n    if ((node = rest.pop()) && node.pop /* Array? */) {\n      for (length = node.length; length--; ) {\n        rest.push(node[length])\n      }\n    } else if (node != null && node !== true && node !== false) {\n      children.push(node)\n    }\n  }\n\n  return typeof name === \"function\"\n    ? name(attributes || {}, children)\n    : {\n        nodeName: name,\n        attributes: attributes || {},\n        children: children,\n        key: attributes && attributes.key\n      }\n}\n\nexport function app(state, actions, view, container) {\n  var renderLock\n  var invokeLaterStack = []\n  var rootElement = (container && container.children[0]) || null\n  var oldNode = rootElement && toVNode(rootElement, [].map)\n  var globalState = clone(state)\n  var wiredActions = clone(actions)\n\n  scheduleRender(wireStateToActions([], globalState, wiredActions))\n\n  return wiredActions\n\n  function toVNode(element, map) {\n    return {\n      nodeName: element.nodeName.toLowerCase(),\n      attributes: {},\n      children: map.call(element.childNodes, function(element) {\n        return element.nodeType === 3 // Node.TEXT_NODE\n          ? element.nodeValue\n          : toVNode(element, map)\n      })\n    }\n  }\n\n  function render() {\n    renderLock = !renderLock\n\n    var next = view(globalState, wiredActions)\n    if (container && !renderLock) {\n      rootElement = patch(container, rootElement, oldNode, (oldNode = next))\n    }\n\n    while ((next = invokeLaterStack.pop())) next()\n  }\n\n  function scheduleRender() {\n    if (!renderLock) {\n      renderLock = !renderLock\n      setTimeout(render)\n    }\n  }\n\n  function clone(target, source) {\n    var obj = {}\n\n    for (var i in target) obj[i] = target[i]\n    for (var i in source) obj[i] = source[i]\n\n    return obj\n  }\n\n  function set(path, value, source) {\n    var target = {}\n    if (path.length) {\n      target[path[0]] =\n        path.length > 1 ? set(path.slice(1), value, source[path[0]]) : value\n      return clone(source, target)\n    }\n    return value\n  }\n\n  function get(path, source) {\n    for (var i = 0; i < path.length; i++) {\n      source = source[path[i]]\n    }\n    return source\n  }\n\n  function wireStateToActions(path, state, actions) {\n    for (var key in actions) {\n      typeof actions[key] === \"function\"\n        ? (function(key, action) {\n            actions[key] = function(data) {\n              if (typeof (data = action(data)) === \"function\") {\n                data = data(get(path, globalState), actions)\n              }\n\n              if (\n                data &&\n                data !== (state = get(path, globalState)) &&\n                !data.then // Promise\n              ) {\n                scheduleRender(\n                  (globalState = set(path, clone(state, data), globalState))\n                )\n              }\n\n              return data\n            }\n          })(key, actions[key])\n        : wireStateToActions(\n            path.concat(key),\n            (state[key] = state[key] || {}),\n            (actions[key] = clone(actions[key]))\n          )\n    }\n  }\n\n  function getKey(node) {\n    return node ? node.key : null\n  }\n\n  function setElementProp(element, name, value, isSVG, oldValue) {\n    if (name === \"key\") {\n    } else if (name === \"style\") {\n      for (var i in clone(oldValue, value)) {\n        element[name][i] = value == null || value[i] == null ? \"\" : value[i]\n      }\n    } else {\n      if (typeof value === \"function\" || (name in element && !isSVG)) {\n        element[name] = value == null ? \"\" : value\n      } else if (value != null && value !== false) {\n        element.setAttribute(name, value)\n      }\n\n      if (value == null || value === false) {\n        element.removeAttribute(name)\n      }\n    }\n  }\n\n  function createElement(node, isSVG) {\n    var element =\n      typeof node === \"string\" || typeof node === \"number\"\n        ? document.createTextNode(node)\n        : (isSVG = isSVG || node.nodeName === \"svg\")\n          ? document.createElementNS(\n              \"http://www.w3.org/2000/svg\",\n              node.nodeName\n            )\n          : document.createElement(node.nodeName)\n\n    if (node.attributes) {\n      if (node.attributes.oncreate) {\n        invokeLaterStack.push(function() {\n          node.attributes.oncreate(element)\n        })\n      }\n\n      for (var i = 0; i < node.children.length; i++) {\n        element.appendChild(createElement(node.children[i], isSVG))\n      }\n\n      for (var name in node.attributes) {\n        setElementProp(element, name, node.attributes[name], isSVG)\n      }\n    }\n\n    return element\n  }\n\n  function updateElement(element, oldProps, attributes, isSVG) {\n    for (var name in clone(oldProps, attributes)) {\n      if (\n        attributes[name] !==\n        (name === \"value\" || name === \"checked\"\n          ? element[name]\n          : oldProps[name])\n      ) {\n        setElementProp(element, name, attributes[name], isSVG, oldProps[name])\n      }\n    }\n\n    if (attributes.onupdate) {\n      invokeLaterStack.push(function() {\n        attributes.onupdate(element, oldProps)\n      })\n    }\n  }\n\n  function removeChildren(element, node, attributes) {\n    if ((attributes = node.attributes)) {\n      for (var i = 0; i < node.children.length; i++) {\n        removeChildren(element.childNodes[i], node.children[i])\n      }\n\n      if (attributes.ondestroy) {\n        attributes.ondestroy(element)\n      }\n    }\n    return element\n  }\n\n  function removeElement(parent, element, node, cb) {\n    function done() {\n      parent.removeChild(removeChildren(element, node))\n    }\n\n    if (node.attributes && (cb = node.attributes.onremove)) {\n      cb(element, done)\n    } else {\n      done()\n    }\n  }\n\n  function patch(parent, element, oldNode, node, isSVG, nextSibling) {\n    if (node === oldNode) {\n    } else if (oldNode == null) {\n      element = parent.insertBefore(createElement(node, isSVG), element)\n    } else if (node.nodeName && node.nodeName === oldNode.nodeName) {\n      updateElement(\n        element,\n        oldNode.attributes,\n        node.attributes,\n        (isSVG = isSVG || node.nodeName === \"svg\")\n      )\n\n      var oldElements = []\n      var oldKeyed = {}\n      var newKeyed = {}\n\n      for (var i = 0; i < oldNode.children.length; i++) {\n        oldElements[i] = element.childNodes[i]\n\n        var oldChild = oldNode.children[i]\n        var oldKey = getKey(oldChild)\n\n        if (null != oldKey) {\n          oldKeyed[oldKey] = [oldElements[i], oldChild]\n        }\n      }\n\n      var i = 0\n      var j = 0\n\n      while (j < node.children.length) {\n        var oldChild = oldNode.children[i]\n        var newChild = node.children[j]\n\n        var oldKey = getKey(oldChild)\n        var newKey = getKey(newChild)\n\n        if (newKeyed[oldKey]) {\n          i++\n          continue\n        }\n\n        if (newKey == null) {\n          if (oldKey == null) {\n            patch(element, oldElements[i], oldChild, newChild, isSVG)\n            j++\n          }\n          i++\n        } else {\n          var recyledNode = oldKeyed[newKey] || []\n\n          if (oldKey === newKey) {\n            patch(element, recyledNode[0], recyledNode[1], newChild, isSVG)\n            i++\n          } else if (recyledNode[0]) {\n            patch(\n              element,\n              element.insertBefore(recyledNode[0], oldElements[i]),\n              recyledNode[1],\n              newChild,\n              isSVG\n            )\n          } else {\n            patch(element, oldElements[i], null, newChild, isSVG)\n          }\n\n          j++\n          newKeyed[newKey] = newChild\n        }\n      }\n\n      while (i < oldNode.children.length) {\n        var oldChild = oldNode.children[i]\n        if (getKey(oldChild) == null) {\n          removeElement(element, oldElements[i], oldChild)\n        }\n        i++\n      }\n\n      for (var i in oldKeyed) {\n        if (!newKeyed[oldKeyed[i][1].key]) {\n          removeElement(element, oldKeyed[i][0], oldKeyed[i][1])\n        }\n      }\n    } else if (node.nodeName === oldNode.nodeName) {\n      element.nodeValue = node\n    } else {\n      element = parent.insertBefore(\n        createElement(node, isSVG),\n        (nextSibling = element)\n      )\n      removeElement(parent, nextSibling, oldNode)\n    }\n    return element\n  }\n}\n","import ROT from \"rot-js\";\nimport { h, app } from \"hyperapp\";\nimport Colors from \"../colors\";\n\nclass ItemDetailDialog {\n  constructor(item) {\n    this.item = item;\n    this.display = document.createElement(\"div\");\n    this.display.classList.add(\"item-detail-dialog\");\n    this.actions = {};\n    this.state = { item: this.item };\n    this.functions = app(this.state, this.actions, this.view, this.display);\n  }\n\n  view({ item }, actions) {\n    return (\n      <div>\n        <h1>{item.name}</h1>\n        <p>{item.description}</p>\n        <div>Actions:</div>\n        <div>(d)rop</div>\n        <div>\n          {item.equipped\n            ? \"(u)nequip\"\n            : item.wieldable\n              ? \"(w)ield\"\n              : item.wearable\n                ? \"(w)ear\"\n                : item.hasMixin(\"Usable\") ? \"(a)pply\" : \"\"}\n        </div>\n        <p>Press key to use, press 'q' to go back</p>\n        <p>\n          hint: you can use the letter shortcuts above from the main inventory\n          screen\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default ItemDetailDialog;\n","import ROT from \"rot-js\";\nimport { h, app } from \"hyperapp\";\nimport Colors from \"../colors\";\nimport ItemDetailDialog from \"./itemDetailDialog\";\n\nclass ItemListDialog {\n  constructor(items, masterScreen, player, title = \"INVENTORY\") {\n    this.items = items;\n    this.masterScreen = masterScreen;\n    this.player = player;\n    this.subscreen = null;\n    this.display = document.createElement(\"div\");\n    this.display.classList.add(\"subscreen\");\n    this.display.classList.add(\"item-list-dialog\");\n    this.title = title;\n    this.actions = {\n      inc: this.incSelectedItem.bind(this),\n      dec: this.decSelectedItem.bind(this),\n      getIndex: value => state => state.selectedItemIndex,\n      getItems: valie => state => state.items,\n      getState: value => state => state,\n      getSelectedItem: value => state => state.items[state.selectedItemIndex],\n      removeItem: itemToRemove => state => {\n        const items = state.items.filter(item => item !== itemToRemove);\n        let selectedItemIndex = Math.min(\n          state.selectedItemIndex,\n          items.length - 1\n        );\n        return { items, selectedItemIndex };\n      }\n    };\n    this.state = {\n      player: this.player,\n      title: this.title,\n      items: this.items,\n      selectedItemIndex: 0\n    };\n    this.functions = app(this.state, this.actions, this.view, this.display);\n  }\n\n  view({ player, items, selectedItemIndex, title }, actions) {\n    return (\n      <div>\n        <h1>\n          {title}\n          {title == \"INVENTORY\"\n            ? `- ${items.length}/${player.getInventorySize()}`\n            : \"\"}\n        </h1>\n        {items.map((item, i) => {\n          return (\n            <div class={i == selectedItemIndex ? \"selected\" : \"\"}>\n              {item.name}\n              {item == player.weapon ? \" (wielding)\" : \"\"}\n              {player.isWearing(item) ? \" (wearing)\" : \"\"}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    document.body.appendChild(this.display);\n  }\n\n  incSelectedItem() {\n    return ({ selectedItemIndex, items }) => ({\n      selectedItemIndex: (selectedItemIndex + 1) % items.length\n    });\n  }\n  decSelectedItem() {\n    return ({ selectedItemIndex, items }) => {\n      let newValue = selectedItemIndex - 1;\n      if (newValue < 0) {\n        newValue = items.length - 1;\n      }\n\n      return {\n        selectedItemIndex: newValue\n      };\n    };\n  }\n  exit() {\n    this.masterScreen.exitSubscreen();\n    this.display.remove();\n  }\n\n  renderItemList() {\n    this.functions = app(\n      this.functions.getState(),\n      this.functions,\n      this.view,\n      this.display\n    );\n  }\n\n  handleInput(inputData) {\n    const item = this.functions.getSelectedItem();\n\n    if (inputData.keyCode === ROT.VK_ESCAPE) {\n      this.exit();\n    }\n\n    if (!item) {\n      return;\n    }\n\n    if (inputData.keyCode === ROT.VK_RETURN) {\n      // view selected item\n      const equipped = item == this.player.armor || item == this.player.weapon;\n      const detailDialog = new ItemDetailDialog(\n        Object.assign(item, { equipped })\n      );\n      this.display.innerHTML = \"\";\n      this.display.appendChild(detailDialog.display);\n    } else if (inputData.keyCode == ROT.VK_Q) {\n      this.display.innerHTML = \"\";\n      this.renderItemList();\n    } else if (\n      inputData.keyCode === ROT.VK_J ||\n      inputData.keyCode === ROT.VK_DOWN ||\n      inputData.keyCode === ROT.VK_2\n    ) {\n      this.functions.inc();\n    } else if (\n      inputData.keyCode === ROT.VK_K ||\n      inputData.keyCode === ROT.VK_UP ||\n      inputData.keyCode === ROT.VK_8\n    ) {\n      this.functions.dec();\n    } else if (inputData.keyCode === ROT.VK_W) {\n      if (item.wieldable) {\n        this.player.wield(item);\n        this.player.getGame().messageDisplay.add(`You wield the ${item.name}`);\n        this.exit();\n      }\n      if (item.wearable) {\n        this.player.wear(item);\n        this.player.getGame().messageDisplay.add(`You put on the ${item.name}`);\n        this.exit();\n      }\n    } else if (inputData.keyCode === ROT.VK_A) {\n      if (item.hasMixin(\"Usable\")) {\n        item.use(this.player);\n        this.player.removeItem(item);\n        this.functions.removeItem(item);\n        this.player.getGame().messageDisplay.add(`You apply the ${item.name}`);\n        this.exit();\n      }\n    } else if (inputData.keyCode === ROT.VK_U) {\n      this.player.unequip(item);\n      this.renderItemList();\n    } else if (inputData.keyCode === ROT.VK_D) {\n      this.player.removeItem(item);\n      this.functions.removeItem(item);\n      this.masterScreen.level.addItem(\n        item,\n        this.player.getX(),\n        this.player.getY()\n      );\n      this.renderItemList();\n    }\n  }\n}\n\nexport default ItemListDialog;\n","import ItemListDialog from \"./itemListDialog\";\nimport ROT from \"rot-js\";\n\nclass PickUpScreen extends ItemListDialog {\n  constructor() {\n    super(...arguments, \"Pick Up What?\");\n    this.title = \"Pick up what?\";\n  }\n\n  handleInput(inputData) {\n    if (inputData.keyCode == ROT.VK_D || inputData.keyCode == ROT.VK_W) {\n      return;\n    }\n    if (inputData.keyCode == ROT.VK_RETURN) {\n      const item = this.functions.getSelectedItem();\n      this.player.addItem(item);\n      this.functions.removeItem(item);\n      const items = this.functions.getItems();\n      this.masterScreen.level.setItemsAt(\n        this.player.getX(),\n        this.player.getY(),\n        items\n      );\n      if (items.length == 0) {\n        this.exit();\n      }\n      return;\n    }\n    super.handleInput(inputData);\n  }\n}\n\nexport default PickUpScreen;\n","import { h, app } from \"hyperapp\";\nimport ROT from \"rot-js\";\n\nclass Confirmation {\n  constructor(text, func, masterScreen) {\n    this.text = text;\n    this.masterScreen = masterScreen;\n    this.function = func;\n    this.display = document.createElement(\"div\");\n    this.display.classList.add(\"subscreen\");\n    this.display.classList.add(\"confirmation\");\n    app(\n      {\n        text: this.text,\n        confirm: this.confirm.bind(this),\n        cancel: this.cancel.bind(this)\n      },\n      {},\n      this.view,\n      this.display\n    );\n  }\n\n  view({ text, confirm, cancel }) {\n    return (\n      <div>\n        {text}\n        <div>\n          <button onclick={confirm}>YES (ENTER)</button>\n          <button onclick={cancel}>NO (ESCAPE)</button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    document.body.appendChild(this.display);\n  }\n\n  confirm() {\n    this.masterScreen.exitSubscreen();\n    this.display.remove();\n    this.function();\n  }\n\n  cancel() {\n    this.masterScreen.exitSubscreen();\n    this.display.remove();\n  }\n\n  handleInput(inputData) {\n    if (inputData.keyCode === ROT.VK_ESCAPE) {\n      this.cancel();\n    }\n    if (inputData.keyCode === ROT.VK_RETURN) {\n      this.confirm();\n    }\n  }\n}\n\nexport default Confirmation;\n","import { h, app } from \"hyperapp\";\nimport ROT from \"rot-js\";\n\nclass StoryScreen {\n  constructor(masterScreen, text, func) {\n    this.func = func;\n    this.masterScreen = masterScreen;\n    this.text = text;\n    this.display = document.createElement(\"div\");\n    this.display.classList.add(\"subscreen\");\n    this.display.classList.add(\"story-screen\");\n    this.actions = {};\n    this.app = app(\n      { text: this.text },\n      this.actions,\n      this.view.bind(this),\n      this.display\n    );\n  }\n\n  view({ text }) {\n    return (\n      <div>\n        {text.map(p => <p>{p}</p>)}\n        <p>Press [Enter] to continue</p>\n      </div>\n    );\n  }\n\n  render() {\n    this.display.remove();\n    document.body.appendChild(this.display);\n  }\n\n  handleInput(inputData) {\n    if (\n      inputData.keyCode === ROT.VK_ESCAPE ||\n      inputData.keyCode === ROT.VK_RETURN\n    ) {\n      this.masterScreen.exitSubscreen();\n      this.display.remove();\n      if (this.func) {\n        this.func();\n      }\n    }\n  }\n}\n\nexport default StoryScreen;\n","import { h, app } from \"hyperapp\";\nimport ROT from \"rot-js\";\n\nclass HelpScreen {\n  constructor(masterScreen) {\n    this.masterScreen = masterScreen;\n    this.display = document.createElement(\"div\");\n    this.display.classList.add(\"subscreen\");\n    this.screens = [\n      \"movement\",\n      \"otherKeys\",\n      \"inventory\",\n      \"weaponsAndArmor\",\n      \"blasters\"\n    ];\n    this.actions = {\n      switchScreen: value => state => ({\n        screen: value\n      })\n    };\n    this.app = app(\n      { screen: this.screens[0] },\n      this.actions,\n      this.view.bind(this),\n      this.display\n    );\n  }\n\n  view({ screen }) {\n    switch (screen) {\n      case \"movement\":\n        return <this.movementScreen />;\n      case \"otherKeys\":\n        return <this.otherKeys />;\n      case \"inventory\":\n        return <this.inventory />;\n      case \"weaponsAndArmor\":\n        return <this.weaponsAndArmor />;\n      case \"blasters\":\n        return <this.blasters />;\n      default:\n        return <div>error</div>;\n    }\n  }\n\n  weaponsAndArmor() {\n    return (\n      <div>\n        <h1>HELP - WEAPONS AND ARMOR</h1>\n        <p>\n          You can wield or wear certain items from the inventory screen. Weapons\n          and Armor items can give you stat boosts or special abilities. Check\n          your player status (press 'p') to see how various weapons and armor\n          affect your attack and defense values.\n        </p>\n        <p>\n          You may only wield one weapon at a time, but wielding weapons does not\n          use up a turn, so feel free to switch often during combat.\n        </p>\n        <p>\n          Multiple pieces of Armor may be worn, but wearing more than one piece\n          will negatively affect your speed... so use with care!\n        </p>\n        <p class=\"gray\">(press &lt; or &gt; to view more help topics)</p>\n      </div>\n    );\n  }\n\n  blasters() {\n    return (\n      <div>\n        <h1>HELP - GUNS</h1>\n        <p>\n          Blasters can be fired by pressing 'f' and then one of the direction\n          keys while wielding the weapon. Blasters can only be fired in one of\n          the 8 movement directions and may or may not have a limited range.\n          Blasters have a limited amount of charges and once they have run out\n          will no longer fire. It is possible to find \"blaster chargers\"\n          throughout the game that can recharge the wielded weapon.\n        </p>\n        <p class=\"gray\">(press &lt; or &gt; to view more help topics)</p>\n      </div>\n    );\n  }\n\n  inventory() {\n    return (\n      <div>\n        <h1>HELP - INVENTORY</h1>\n        <p>\n          Press 'i' to interact with you inventory. On the inventory screen, the\n          various items can be selected using \"up\" or \"down\" from any set of\n          movement keys (see HELP-MOVEMENT).\n        </p>\n        <p>\n          Be aware that you can only carry a few items at a time, and this\n          includes items that you might be wearing or wielding. It <em>may</em>{\" \"}\n          be possible to find items that increase your inventory size... but\n          whether or not that happens lies in the hands of the Gods of RNG.\n        </p>\n        <p>\n          Items can be examined by pressing enter, and can be used by pressing\n          any of the keys shown on the details view. You do not need to go to\n          the details view to use an item. Simply pressing the correct key from\n          the main inventory screen will perform the action specified. For\n          example, pressing 'd' from the main inventory screen will drop the\n          selected item.\n        </p>\n        <p class=\"gray\">(press &lt; or &gt; to view more help topics)</p>\n      </div>\n    );\n  }\n\n  otherKeys() {\n    return (\n      <div>\n        <h1>HELP - OTHER KEYS</h1>\n        <div>i - inventory</div>\n        <div>g - pick up item</div>\n        <div>p - view player status</div>\n        <div>c - close door</div>\n        <div>f - fire weapon</div>\n        <p class=\"gray\">(press &lt; or &gt; to view more help topics)</p>\n      </div>\n    );\n  }\n\n  movementScreen() {\n    const movement = `\n  y k u    7 8 9\n   \\\\|/      \\\\|/\n  h- -l    4- -6\n   /|\\\\      /|\\\\\n  b j m    1 2 3\n `;\n    return (\n      <div>\n        <h1>HELP - MOVEMENT</h1>\n        <div>\n          You can move your character with the arrow-keys, numpad or \"vi-keys\"\n          as seen below\n        </div>\n        <pre style={{ margin: 0 }}>{movement}</pre>\n        <div>press 5 or . to wait for one turn</div>\n        <p class=\"gray\">(press &lt; or &gt; to view more help topics)</p>\n      </div>\n    );\n  }\n\n  render() {\n    this.display.remove();\n    document.body.appendChild(this.display);\n  }\n\n  handleInput(inputData) {\n    if (inputData.keyCode === ROT.VK_ESCAPE) {\n      this.masterScreen.exitSubscreen();\n      this.display.remove();\n    }\n    if (inputData.keyCode === ROT.VK_PERIOD) {\n      this.screens.push(this.screens.shift());\n      this.app.switchScreen(this.screens[0]);\n    }\n    if (inputData.keyCode === ROT.VK_COMMA) {\n      this.screens.unshift(this.screens.pop());\n      this.app.switchScreen(this.screens[0]);\n    }\n  }\n}\n\nexport default HelpScreen;\n","import { h, app } from \"hyperapp\";\nimport ROT from \"rot-js\";\n\nclass PlayerStatusScreen {\n  constructor(masterScreen) {\n    this.masterScreen = masterScreen;\n    this.display = document.createElement(\"div\");\n    this.display.classList.add(\"subscreen\");\n    this.actions = {};\n    this.app = app(\n      { player: this.masterScreen.player },\n      this.actions,\n      this.view.bind(this),\n      this.display\n    );\n  }\n\n  view({ player }) {\n    return (\n      <div>\n        <h1>player status</h1>\n        <p>name: {player.name}</p>\n        <p>attack: {player.getAttackValue()}</p>\n        <p>defense: {player.getDefenseValue()}</p>\n        <p>speed: {player.getSpeed() / 10}%</p>\n      </div>\n    );\n  }\n\n  render() {\n    this.display.remove();\n    document.body.appendChild(this.display);\n  }\n\n  handleInput(inputData) {\n    if (inputData.keyCode === ROT.VK_ESCAPE) {\n      this.masterScreen.exitSubscreen();\n      this.display.remove();\n    }\n  }\n}\n\nexport default PlayerStatusScreen;\n","import ROT from \"rot-js\";\n\nclass Repository {\n  constructor({ name = \"repository\", ctor = null }) {\n    this.templates = {};\n    this.randomTemplates = {};\n    this.ctor = ctor;\n  }\n\n  define(template) {\n    this.templates[template.name] = template;\n    if (!template.disableRandomCreation) {\n      this.randomTemplates[template.name] = template;\n    }\n  }\n\n  create(name) {\n    const template = this.templates[name];\n    if (!template) {\n      throw new Error(`no template named ${name}`);\n    }\n    if (template) {\n      return new this.ctor(template);\n    }\n  }\n\n  createRandom(level) {\n    const weightMap = Object.keys(\n      this.randomTemplates\n    ).reduce((obj, template) => {\n      const item = this.randomTemplates[template];\n      if ((level && item.level == level) || !level) {\n        obj[template] = item.rngWeight || 1;\n      }\n      return obj;\n    }, {});\n    const item = ROT.RNG.getWeightedValue(weightMap);\n    return this.create(item);\n  }\n}\n\nexport default Repository;\n","import DynamicGlyph from \"../dynamicGlyph\";\n\nclass Item extends DynamicGlyph {\n  constructor({\n    name = \"item\",\n    canPickUp = true,\n    description = \"\",\n    level = 1\n  }) {\n    super(...arguments);\n    this.level = level;\n    this.name = name;\n    this.canPickUp = canPickUp;\n    this.description = description;\n  }\n}\n\nexport default Item;\n","import blipfile from \"./blip.mp3\";\nimport hit00file from \"./hit-00.wav\";\nimport hit01file from \"./hit-01.wav\";\nimport hit02file from \"./hit-02.wav\";\n\nexport const blip = new Audio(blipfile);\nexport const hit00 = new Audio(hit00file);\nexport const hit01 = new Audio(hit01file);\nexport const hit02 = new Audio(hit02file);\n","import game from \"../game\";\nimport Colors from \"../colors\";\nimport { hit00, hit01, hit02, blip } from \"../sounds/sounds\";\n\nexport class Equippable {\n  constructor({\n    attackValue = 0,\n    defenseValue = 0,\n    sightBoost = 0,\n    inventoryBoost = 0,\n    wieldable = false,\n    wearable = false\n  }) {\n    this.attackValue = attackValue;\n    this.defenseValue = defenseValue;\n    this.wieldable = wieldable;\n    this.wearable = wearable;\n    this.sightBoost = sightBoost;\n    this.inventoryBoost = inventoryBoost;\n    this.name = \"Equippable\";\n  }\n}\n\nexport class StatusBooster {\n  constructor({ hpUp = 0, statusEffect = null }) {\n    this.name = \"StatusBooster\";\n    this.groupName = \"Usable\";\n    this.hpUp = hpUp;\n    this.use = this._use;\n    this.statusEffect = statusEffect;\n  }\n\n  _use(entity) {\n    entity.addHp(this.hpUp);\n    if (this.statusEffect) {\n      entity.addTimedStatusEffect(this.statusEffect);\n    }\n  }\n}\n\nexport class Fireable {\n  constructor({ charges, maxCharges = 20, rangeDamage = 10 }) {\n    this.name = \"Fireable\";\n    this.maxCharges = maxCharges;\n    this.charges = charges || this.maxCharges;\n    this.rangeDamage = rangeDamage;\n    this.fire = this._fire;\n  }\n\n  _fire(targetObj) {\n    if (this.charges <= 0) {\n      game.messageDisplay.add({\n        color: \"blue\",\n        text: \"Your weapon is out of charges\"\n      });\n      return;\n    }\n    this.charges -= 1;\n    const targetArray = targetObj.coords;\n    const displayArray = [];\n    for (let i = 0; i < targetArray.length; i++) {\n      const target = targetArray[i];\n      if (targetArray[i] && targetArray[i].constructor.name == \"Entity\") {\n        if (target.hasMixin(\"Destructible\")) {\n          const attack = this.rangeDamage;\n          const defense = target.getDefenseValue();\n          const damage = Math.max(attack - defense, 0);\n          game.messageDisplay.add({\n            color: \"white\",\n            text: `You hit the ${target.name} for ${damage} damage.`\n          });\n          target.takeDamage(damage, this.fg);\n          break;\n        }\n      } else if (!target.blocksLight) {\n        console.log(target);\n        displayArray.push(target.x + \",\" + target.y);\n      } else {\n        break;\n      }\n    }\n    return { coords: displayArray, xMod: targetObj.xMod, yMod: targetObj.yMod };\n  }\n}\n","import Repository from \"../repository\";\nimport Colors from \"../colors\";\nimport Item from \"./item\";\nimport { Fireable, Equippable, StatusBooster } from \"./itemMixins\";\n\nexport const ItemRepository = new Repository({ name: \"Items\", ctor: Item });\n\nItemRepository.define({\n  name: \"med pack\",\n  description: \"Will restore a moderate amount of health.  Single use.\",\n  char: \"+\",\n  fg: Colors.pink,\n  hpUp: 5,\n  mixins: [StatusBooster]\n});\n\nItemRepository.define({\n  name: \"strength stim syringe\",\n  description:\n    \"A syringe filled with a thick, dark liquid.  Will temporarily increase your strength. May reduce HP.\",\n  char: \"!\",\n  fg: Colors.darkPurple,\n  hpDown: 3,\n  statusEffect: {\n    property: \"strength\",\n    value: 10,\n    label: \"Strength boost\",\n    timer: 25\n  },\n  mixins: [StatusBooster]\n});\n\nItemRepository.define({\n  name: \"speed-boost syringe\",\n  description:\n    \"A syringe filled with a dark liquid that smells of coffee.  Will temporarily increase your speed.\",\n  char: \"!\",\n  fg: Colors.darkGreen,\n  statusEffect: {\n    property: \"speed\",\n    value: 1000,\n    label: \"Speed boost\",\n    timer: 25\n  },\n  mixins: [StatusBooster]\n});\n\nItemRepository.define({\n  name: \"armor-boost syringe\",\n  description:\n    \"No clue how this tech is supposed to work.. but shooting this baby up will temporarily increase your defense value.  It's a game, get over it.\",\n  char: \"!\",\n  fg: Colors.darkGreen,\n  statusEffect: {\n    property: \"speed\",\n    value: 10,\n    label: \"Armor boost\",\n    timer: 25\n  },\n  mixins: [StatusBooster]\n});\n\nItemRepository.define({\n  name: \"Space Ship\",\n  char: \"§\",\n  description:\n    \"Your personal mining rig, large enough for one person and a handful of tools. Equipped with heavy blasters meant for breaking rock.\",\n  fg: Colors.blue,\n  canPickUp: false,\n  disableRandomCreation: true\n});\n\nItemRepository.define({\n  name: \"keys\",\n  char: '\"',\n  description: \"Your keys!  You can't get off this rock without them!\",\n  fg: Colors.blue,\n  disableRandomCreation: true\n});\n\nItemRepository.define({\n  name: \"backpack\",\n  description:\n    \"Increases your inventory size and provides a teeny-tiny amount of defense, might slow you down a bit though.\",\n  char: \"[\",\n  fg: Colors.blue,\n  wearable: true,\n  defenseValue: 2,\n  inventoryBoost: 5,\n  mixins: [Equippable]\n});\n\nItemRepository.define({\n  name: \"night-vision goggles\",\n  char: \"[\",\n  fg: Colors.green,\n  description:\n    \"Increases your sight-radius while worn, and offers a small amount of protection. Could be useful in these caverns.\",\n  wearable: true,\n  sightBoost: 8,\n  defenseValue: 3,\n  mixins: [Equippable]\n});\n\nItemRepository.define({\n  name: \"techno chain mail shirt\",\n  char: \"[\",\n  fg: Colors.indigo,\n  description:\n    \"Huh... why do these aliens have bits of armor just randomly strewn about their weirdo cave system?  No matter, I guess I'll take the defense boost.\",\n  wearable: true,\n  defenseValue: 8,\n  mixins: [Equippable]\n});\n\nexport const WeaponRepository = new Repository({ name: \"Weapons\", ctor: Item });\n\nWeaponRepository.define({\n  name: \"crowbar\",\n  char: \"(\",\n  description: \"Not the best weapon, but it'll get the job done.\",\n  fg: Colors.blue,\n  wieldable: true,\n  attackValue: 5,\n  mixins: [Equippable]\n});\n\nWeaponRepository.define({\n  name: \"hammer\",\n  char: \"(\",\n  description: \"Not the best weapon, but it'll get the job done.\",\n  fg: Colors.gray,\n  wieldable: true,\n  attackValue: 3,\n  level: 1,\n  mixins: [Equippable]\n});\n\nWeaponRepository.define({\n  name: \"monkey wrench\",\n  char: \"(\",\n  description:\n    \"Heavy, rusty, not particularly useful as a tool anymore--but if you need to bash someone's brains in....\",\n  fg: Colors.gray,\n  wieldable: true,\n  attackValue: 3,\n  level: 1,\n  mixins: [Equippable]\n});\n\nWeaponRepository.define({\n  name: \"lazer sword\",\n  char: \"(\",\n  description: \"Now we're talking, this thing will really mess up some aliens.\",\n  fg: Colors.pink,\n  wieldable: true,\n  attackValue: 15,\n  level: 2,\n  mixins: [Equippable]\n});\n\nWeaponRepository.define({\n  name: \"pocket knife\",\n  description:\n    \"Old trusty pocket knife.. it's not worth much, but it's better than bare hands.\",\n  char: \")\",\n  fg: Colors.brown,\n  wieldable: true,\n  attackValue: 3,\n  level: 1,\n  mixins: [Equippable]\n});\n\nWeaponRepository.define({\n  name: \"small blaster\",\n  char: \"(\",\n  description: \"doesn't pack much punch, but holds 100 charges... not bad!\",\n  fg: Colors.green,\n  wieldable: true,\n  maxCharges: 100,\n  attackValue: 1,\n  rangeDamage: 3,\n  level: 1,\n  mixins: [Equippable, Fireable]\n});\n","import Glyph from \"./glyph\";\nimport Colors from \"./colors\";\n\nclass Tile extends Glyph {\n  constructor({ isWalkable = false, blocksLight = false }) {\n    super(...arguments);\n    this.isWalkable = isWalkable;\n    this.blocksLight = blocksLight;\n  }\n}\n\nexport const stairsUpTile = new Tile({\n  char: \"<\",\n  fg: Colors.gray,\n  isWalkable: true\n});\n\nexport const stairsDownTile = new Tile({\n  char: \">\",\n  fg: Colors.gray,\n  isWalkable: true\n});\n\nexport const floorTile = new Tile({\n  char: \".\",\n  fg: Colors.darkGray,\n  isWalkable: true\n});\n\nexport const wallTile = new Tile({\n  char: \"#\",\n  fg: Colors.brown,\n  blocksLight: true\n});\n\nexport const closedDoorTile = new Tile({\n  char: \"+\",\n  fg: Colors.peach,\n  blocksLight: true,\n  isWalkable: false\n});\n\nexport const openDoorTile = new Tile({\n  char: \"-\",\n  fg: Colors.peach,\n  blocksLight: false,\n  isWalkable: true\n});\n","import ROT from \"rot-js\";\nimport { closedDoorTile } from \"../tile\";\n\nexport class PlayerActor {\n  constructor() {\n    this.name = \"PlayerActor\";\n    this.groupName = \"Actor\";\n    this.act = this._act;\n  }\n  _act() {\n    const Game = this.getGame();\n    this.incrementTimedStatusEffects();\n    Game.refresh();\n    Game.getEngine().lock();\n  }\n}\n\nexport class Destructible {\n  constructor({ maxHp = 10, hp, defenseValue = 0 }) {\n    this.name = \"Destructible\";\n    this.maxHp = maxHp;\n    this.hp = hp || this.maxHp;\n    this.defenseValue = defenseValue;\n    this.takeDamage = this._takeDamage;\n    this.addHp = this._addHp;\n    this.getDefenseValue = this._getDefenseValue;\n    this.hit = false;\n  }\n\n  _getDefenseValue() {\n    let mod = 0;\n    if (this.hasMixin(\"TimedStatusEffects\")) {\n      this.getTimedStatusEffects().forEach(s => {\n        if (s.property == \"defense\") {\n          mod += s.value;\n        }\n      });\n    }\n    if (this.armor) {\n      this.armor.forEach(a => {\n        mod += a.defenseValue;\n      });\n    }\n    return this.defenseValue + mod;\n  }\n\n  _addHp(value) {\n    this.hp = Math.min(this.hp + value, this.maxHp);\n  }\n\n  _takeDamage(damage, color) {\n    this.hp -= damage;\n    this.hit = color;\n    if (this.hp <= 0) {\n      if (this.hasMixin(\"PlayerActor\")) {\n        this.game.messageDisplay.add({ text: `You DIE`, color: \"red\" });\n      } else {\n        this.game.messageDisplay.add({\n          color: \"white\",\n          text: `You kill the ${this.name}.`\n        });\n      }\n      this.kill();\n    }\n  }\n}\n\nexport class Sight {\n  constructor({ sightRadius = 15 }) {\n    this.name = \"Sight\";\n    this.sightRadius = sightRadius;\n    this.canSee = this._canSee;\n    this.getSightRadius = this._getSightRadius;\n  }\n\n  _getSightRadius() {\n    let mod = 0;\n    if (this.hasMixin(\"TimedStatusEffects\")) {\n      this.getTimedStatusEffects().forEach(s => {\n        if (s.property == \"sight\") {\n          mod += s.value;\n        }\n      });\n    }\n\n    if (this.armor) {\n      this.armor.forEach(a => {\n        mod += a.sightBoost;\n      });\n    }\n\n    return this.sightRadius + mod;\n  }\n\n  _canSee(entity) {\n    const otherX = entity.getX();\n    const otherY = entity.getY();\n    if (\n      (otherX - this.getX()) * (otherX - this.getX()) +\n        (otherY - this.getY()) * (otherY - this.getY()) >\n      this.sightRadius * this.sightRadius\n    ) {\n      return false;\n    }\n    let found = false;\n    const fov = new ROT.FOV.PreciseShadowcasting((x, y) => {\n      if (this.level.map.getTile(x, y)) {\n        return !this.level.map.getTile(x, y).blocksLight;\n      }\n      return false;\n    });\n\n    fov.compute(this.getX(), this.getY(), this.sightRadius, function(\n      x,\n      y,\n      radius,\n      visibility\n    ) {\n      if (x === otherX && y === otherY) {\n        found = true;\n      }\n    });\n    return found;\n    return true;\n  }\n}\n\nexport class TaskActor {\n  constructor({ tasks = [\"hunt\", \"wander\"] }) {\n    this.huntingTarget = null;\n    this.tasks = tasks;\n    this.name = \"TaskActor\";\n    this.groupName = \"Actor\";\n    this.act = this._act;\n    this.canDoTask = this._canDoTask;\n    this.wander = this._wander;\n    this.hunt = this._hunt;\n  }\n  _act() {\n    if (this.level.gameWorld.currentLevel !== this.level) {\n      return false;\n    }\n    for (let i = 0; i < this.tasks.length; i++) {\n      const task = this.tasks[i];\n      if (this.canDoTask(task)) {\n        this[task]();\n        break;\n      }\n    }\n  }\n\n  _canDoTask(task) {\n    if (task === \"hunt\") {\n      return (\n        this.hasMixin(\"Sight\") &&\n        (this.canSee(this.getLevel().player) || this.huntingTarget)\n      );\n    } else if (task === \"wander\") {\n      return true;\n    } else {\n      throw new Error(\"tried to perform undefined task\");\n    }\n  }\n\n  _hunt() {\n    const player = this.getLevel().player;\n    const offsets =\n      Math.abs(player.getX() - this.getX()) +\n      Math.abs(player.getY() - this.getY());\n    if (offsets === 1 && this.hasMixin(\"Attacker\")) {\n      this.attack(player);\n      return;\n    }\n\n    if (this.canSee(player)) {\n      this.huntingTarget = { x: player.getX(), y: player.getY() };\n    }\n\n    const source = this;\n    const path = new ROT.Path.AStar(\n      this.huntingTarget.x,\n      this.huntingTarget.y,\n      function(x, y) {\n        var entity = source.getLevel().getEntityAt(x, y);\n        if (entity && entity !== player && entity !== source) {\n          return false;\n        }\n        return source\n          .getLevel()\n          .getMap()\n          .getTile(x, y).isWalkable;\n      }\n    );\n    let count = 0;\n    path.compute(source.getX(), source.getY(), function(x, y) {\n      if (count == 1) {\n        source.tryMove(x, y, source.getLevel());\n      }\n      count++;\n    });\n  }\n\n  _wander() {\n    const dX = Math.floor(Math.random() * 3) - 1;\n    const dY = Math.floor(Math.random() * 3) - 1;\n    if (this.level.player && this.canSee(this.level.player)) {\n      this.tryMove(this.getX() + dX, this.getY() + dY, this.getLevel());\n    }\n  }\n}\n\nexport class InventoryHolder {\n  constructor({ inventorySize = 8 }) {\n    this.name = \"InventoryHolder\";\n    this.inventorySize = inventorySize;\n    this.inventory = [];\n    this.addItem = this._addItem;\n    this.removeItem = this._removeItem;\n    this.hasItem = this._hasItem;\n    this.getInventorySize = this._getInventorySize;\n  }\n\n  _getInventorySize() {\n    let mod = 0;\n    if (this.armor) {\n      this.armor.forEach(a => {\n        mod += a.inventoryBoost;\n      });\n    }\n    return this.inventorySize + mod;\n  }\n  _hasItem(item) {\n    return this.inventory.filter(i => i.name == item).length > 0;\n  }\n  _addItem(item) {\n    if (this.inventory.length < this.getInventorySize()) {\n      this.inventory.push(item);\n      return true;\n    }\n    this.game.messageDisplay.add({\n      color: \"blue\",\n      text: \"Your inventory seems to be full!\"\n    });\n    return false;\n  }\n  _removeItem(itemToRemove) {\n    this.unequip(itemToRemove);\n    this.inventory = this.inventory.filter(item => item !== itemToRemove);\n  }\n}\n\nexport class MonsterActor {\n  constructor() {\n    this.name = \"MonsterActor\";\n    this.groupName = \"Actor\";\n    this.act = this._act;\n  }\n  _act() {\n    const dX = Math.floor(Math.random() * 3) - 1;\n    const dY = Math.floor(Math.random() * 3) - 1;\n    if (this.level.player && this.canSee(this.level.player)) {\n      this.tryMove(this.getX() + dX, this.getY() + dY, this.getLevel());\n    }\n  }\n}\n\nexport class Movable {\n  constructor() {\n    this.name = \"Movable\";\n    this.tryMove = this._tryMove;\n  }\n  _tryMove(x, y, level) {\n    const tile = level.getMap().getTile(x, y);\n\n    const target = level.getEntityAt(x, y);\n    if (target) {\n      if (this.hasMixin(\"Attacker\")) {\n        this.attack(target);\n      }\n      return false;\n    }\n\n    if (tile.isWalkable) {\n      this.setPosition(x, y);\n      return true;\n    }\n\n    if (tile == closedDoorTile) {\n      level.getMap().openDoor(x, y);\n    }\n    return false;\n  }\n}\n\nexport class Attacker {\n  constructor({ strength = 1 }) {\n    this.name = \"Attacker\";\n    this.strength = strength;\n    this.attack = this._attack;\n    this.getAttackValue = this._getAttackValue;\n  }\n  _getAttackValue() {\n    let mod = 0;\n    if (this.hasMixin(\"Equipper\")) {\n      if (this.weapon) {\n        mod += this.weapon.attackValue;\n      }\n    }\n    if (this.hasMixin(\"TimedStatusEffects\")) {\n      this.getTimedStatusEffects().forEach(s => {\n        if (s.property == \"strength\") {\n          mod += s.value;\n        }\n      });\n    }\n    return this.strength + mod;\n  }\n  _attack(target) {\n    const game = this.getGame();\n    if (target.hasMixin(\"PlayerActor\")) {\n      const attack = this.getAttackValue();\n      const defense = target.getDefenseValue();\n      const damage = Math.max(attack - defense, 0);\n      if (game) {\n        game.messageDisplay.add({\n          color: \"red\",\n          text: `The ${this.name} hits you for ${damage} damage.`\n        });\n      }\n      target.takeDamage(damage);\n    }\n    if (this.hasMixin(\"PlayerActor\") && target.hasMixin(\"Destructible\")) {\n      const attack = this.getAttackValue();\n      const defense = target.getDefenseValue();\n      const damage = Math.max(attack - defense, 0);\n      if (game && this.hasMixin(\"PlayerActor\")) {\n        game.messageDisplay.add({\n          color: \"white\",\n          text: `You hit the ${target.name} for ${damage} damage.`\n        });\n      }\n      target.takeDamage(damage);\n    }\n  }\n}\n\nexport class Equipper {\n  constructor({ weapon = null, armor = [] }) {\n    this.name = \"Equipper\";\n    this.weapon = weapon;\n    this.armor = armor;\n    this.wield = this._wield;\n    this.unwield = this._unwield;\n    this.wear = this._wear;\n    this.takeOff = this._takeOff;\n    this.unequip = this._unequip;\n    this.isWearing = this._isWearing;\n  }\n\n  _isWearing(item) {\n    return this.armor.includes(item);\n  }\n\n  _wield(weapon) {\n    this.weapon = weapon;\n  }\n  _unwield() {\n    this.weapon = null;\n  }\n  _wear(armor) {\n    this.armor.push(armor);\n  }\n  _takeOff(item) {\n    this.armor.splice(this.armor.indexOf(item), 1);\n  }\n  _unequip(item) {\n    if (item === this.armor) {\n      this.takeOff(item);\n    }\n    if (item === this.weapon) {\n      this.unwield();\n    }\n  }\n}\n\nexport class TimedStatusEffects {\n  constructor() {\n    this.name = \"TimedStatusEffects\";\n    //array of objects\n    // {property, label, value, timer}\n    this.statusEffects = [\n      // { property: \"speed\", label: \"Speed up\", value: 1000, timer: 135 }\n    ];\n    this.incrementTimedStatusEffects = this._incrementTimedStatusEffects;\n    this.getTimedStatusEffects = this._getTimedStatusEffects;\n    this.addTimedStatusEffect = this._addTimedStatusEffect;\n  }\n\n  _addTimedStatusEffect(effect) {\n    this.statusEffects.push(effect);\n  }\n\n  _getTimedStatusEffects() {\n    return this.statusEffects;\n  }\n\n  _incrementTimedStatusEffects() {\n    this.statusEffects.forEach(s => {\n      s.timer -= 1;\n      if (s.timer <= 0) {\n        const i = this.statusEffects.indexOf(s);\n        this.statusEffects.splice(i, 1);\n      }\n    });\n  }\n}\n","import Colors from \"../colors\";\nimport {\n  InventoryHolder,\n  PlayerActor,\n  Movable,\n  Destructible,\n  Sight,\n  TaskActor,\n  Attacker,\n  Equipper,\n  TimedStatusEffects\n} from \"./entityMixins\";\n\nexport const PlayerTemplate = {\n  name: \"ME\",\n  char: \"@\",\n  fg: Colors.white,\n  sightRadius: 6,\n  strength: 6,\n  mixins: [\n    PlayerActor,\n    Destructible,\n    Movable,\n    InventoryHolder,\n    Attacker,\n    Equipper,\n    Sight,\n    TimedStatusEffects\n  ]\n};\n\nexport const MonsterTemplate = {\n  name: \"Small Alien\",\n  char: \"a\",\n  fg: Colors.indigo,\n  speed: 800,\n  mixins: [Movable, TaskActor, Destructible, Sight, Attacker]\n};\n","import ROT from \"rot-js\";\nimport { floorTile, wallTile, openDoorTile, closedDoorTile } from \"./tile\";\n\nclass DungeonMap {\n  constructor({ width = 40, height = 20, Game }) {\n    this.game = Game;\n    this.width = width;\n    this.height = height;\n    this.tiles = new Array(width);\n\n    for (let w = 0; w < width; w++) {\n      this.tiles[w] = new Array(height);\n    }\n\n    const maxRoomWidth = Math.random() > 0.3 ? 10 : 22;\n    const maxRoomHeight = maxRoomWidth !== 32 && Math.random() > 0.8 ? 22 : 12;\n\n    const generator = new ROT.Map.Digger(width, height, {\n      roomWidth: [6, maxRoomWidth],\n      roomHeight: [6, maxRoomHeight],\n      dugPercentage: 0.3\n    });\n\n    generator.create(\n      function(x, y, value) {\n        this.tiles[x][y] = value == 1 ? wallTile : floorTile;\n      }.bind(this)\n    );\n    this.rooms = generator.getRooms();\n    this.rooms.forEach((room, i) => {\n      room.getDoors((x, y) => {\n        this.tiles[x][y] =\n          i == 0\n            ? closedDoorTile\n            : Math.random() > 0.8\n              ? openDoorTile\n              : Math.random() > 0.8 ? closedDoorTile : floorTile;\n      });\n    });\n  }\n\n  openDoor(x, y) {\n    if (this.tiles[x][y] === closedDoorTile) {\n      this.tiles[x][y] = openDoorTile;\n    }\n  }\n  closeDoor(x, y) {\n    if (this.tiles[x][y] === openDoorTile) {\n      this.tiles[x][y] = closedDoorTile;\n      this.game.messageDisplay.add(\"You close the door\");\n    }\n  }\n\n  getRooms() {\n    return this.rooms;\n  }\n\n  getTiles() {\n    return this.tiles;\n  }\n\n  setTile(x, y, tile) {\n    try {\n      this.tiles[x][y] = tile;\n      return tile;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  getTile(x, y) {\n    try {\n      return this.tiles[x][y];\n    } catch (e) {}\n  }\n}\n\nexport default DungeonMap;\n","import DungeonMap from \"./dungeonMap\";\nimport Entity from \"./entity/entity\";\nimport { WeaponRepository, ItemRepository } from \"./item/items\";\nimport { MonsterTemplate, PlayerTemplate } from \"./entity/entities\";\nimport { floorTile, wallTile, stairsUpTile, stairsDownTile } from \"./tile\";\n\nclass Level {\n  constructor({ Game, gameWorld, topLevel = false, bottomLevel = false }) {\n    this.game = Game;\n    this.gameWorld = gameWorld;\n    this.width = this.game.getScreenWidth();\n    this.height = this.game.getScreenHeight();\n    this.entities = {};\n    this.map = new DungeonMap({\n      width: this.width,\n      height: this.height,\n      Game: this.game\n    });\n    this.exploredTiles = {};\n    this.items = {};\n    this.player = null;\n\n    this.firstRoom = this.map.getRooms()[0];\n\n    if (topLevel) {\n      this.playerStartPosition = this.getRandomRoomPosition(this.firstRoom);\n    }\n\n    if (!topLevel) {\n      this.stairsUp = this.getRandomFloorPosition();\n      this.map.setTile(this.stairsUp.x, this.stairsUp.y, stairsUpTile);\n    }\n    if (!bottomLevel) {\n      this.stairsDown = this.getRandomFloorPosition();\n      this.map.setTile(this.stairsDown.x, this.stairsDown.y, stairsDownTile);\n    }\n\n    // add Entities to Map\n    for (let i = 0; i < 10; i++) {\n      this.addEntityAtRandomPosition(\n        new Entity(\n          Object.assign(MonsterTemplate, { level: this, Game: this.game })\n        )\n      );\n    }\n\n    for (let i = 0; i < 2; i++) {\n      this.addItemAtRandomPosition(ItemRepository.createRandom());\n    }\n    this.addItemAtRandomPosition(WeaponRepository.createRandom());\n\n    if (topLevel) {\n      let firstRoomPosition = this.getRandomRoomPosition(this.firstRoom);\n      this.addItem(\n        WeaponRepository.createRandom(1),\n        firstRoomPosition.x,\n        firstRoomPosition.y\n      );\n\n      const otherRoomPosition = this.getRandomRoomPosition();\n      const ship = ItemRepository.create(\"Space Ship\");\n      this.addItem(ship, otherRoomPosition.x, otherRoomPosition.y);\n    }\n    if (bottomLevel) {\n      this.addItemAtRandomPosition(ItemRepository.create(\"keys\"));\n    }\n  }\n\n  lookInDirection(xMod, yMod, range = 25) {\n    const coords = [];\n    for (let i = 1; i < range + 1; i++) {\n      const x = this.player.getX() + xMod * i;\n      const y = this.player.getY() + yMod * i;\n      if (this.getEntityAt(x, y)) {\n        coords.push(this.getEntityAt(x, y));\n      } else if (this.map.getTile(x, y)) {\n        coords.push({ x, y, blocksLight: this.map.getTile(x, y).blocksLight });\n      }\n    }\n    return { coords, xMod, yMod };\n  }\n\n  getRandomRoomPosition(room = this.map.getRooms().random()) {\n    return {\n      y:\n        Math.floor(Math.random() * (room.getBottom() - room.getTop())) +\n        room.getTop(),\n      x:\n        Math.floor(Math.random() * (room.getLeft() - room.getRight())) +\n        room.getRight()\n    };\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  getEntities() {\n    return this.entities;\n  }\n\n  getRandomFloorPosition() {\n    const x = Math.floor(Math.random() * this.width);\n    const y = Math.floor(Math.random() * this.height);\n    if (this.map.getTile(x, y) === floorTile && !this.getEntityAt(x, y)) {\n      return { x, y };\n    } else {\n      return this.getRandomFloorPosition();\n    }\n  }\n\n  addItemAtRandomPosition(item) {\n    const coords = this.getRandomFloorPosition();\n    this.addItem(item, coords.x, coords.y);\n  }\n\n  addItem(item, x, y) {\n    const key = x + \",\" + y;\n    if (this.items[key]) {\n      this.items[key].push(item);\n    } else {\n      this.items[key] = [item];\n    }\n  }\n\n  getItemsAt(x, y) {\n    const key = x + \",\" + y;\n    return this.items[key];\n  }\n\n  setItemsAt(x, y, items) {\n    const key = `${x},${y}`;\n    if (items.length === 0) {\n      if (this.items[key]) {\n        delete this.items[key];\n      }\n    } else {\n      this.items[key] = items;\n    }\n  }\n\n  addEntityAtRandomPosition(entity) {\n    const coords = this.getRandomFloorPosition();\n    entity.setPosition(coords.x, coords.y);\n    this.addEntity(entity);\n  }\n\n  getEntityAt(x, y) {\n    if (this.player && this.player.getX() == x && this.player.getY() == y) {\n      return this.player;\n    }\n    return this.entities[x + \",\" + y];\n  }\n\n  updateEntityPosition(oldX, oldY, newX, newY) {\n    this.entities[newX + \",\" + newY] = this.entities[oldX + \",\" + oldY];\n    delete this.entities[oldX + \",\" + oldY];\n  }\n\n  addEntity(entity) {\n    this.entities[entity.getX() + \",\" + entity.getY()] = entity;\n    if (entity.hasMixin(\"Actor\")) {\n      this.game.getScheduler().add(entity, true);\n    }\n  }\n\n  removeEntity(entityToRemove) {\n    const key = entityToRemove.getX() + \",\" + entityToRemove.getY();\n    if (this.entities[key] == entityToRemove) {\n      delete this.entities[key];\n      if (entityToRemove.hasMixin(\"Actor\")) {\n        this.game.getScheduler().remove(entityToRemove);\n      }\n    }\n  }\n\n  getMap() {\n    return this.map;\n  }\n}\n\nexport default Level;\n","import Level from \"./level\";\n\nclass GameWorld {\n  constructor(Game) {\n    const firstLevel = new Level({ Game, gameWorld: this, topLevel: true });\n    const secondLevel = new Level({ Game, gameWorld: this });\n    const thirdLevel = new Level({ Game, gameWorld: this, bottomLevel: true });\n    this.levels = [firstLevel, secondLevel, thirdLevel];\n    this.currentLevel = this.levels[0];\n  }\n\n  getCurrentLevel() {\n    return this.currentLevel;\n  }\n\n  goDownLevel() {\n    const index = this.levels.indexOf(this.currentLevel);\n    if (index < this.levels.length) {\n      this.currentLevel = this.levels[index + 1];\n      return this.currentLevel;\n    }\n    return false;\n  }\n\n  goUpLevel() {\n    const index = this.levels.indexOf(this.currentLevel);\n    if (index > 0) {\n      this.currentLevel = this.levels[index - 1];\n      return this.currentLevel;\n    }\n    return false;\n  }\n}\n\nexport default GameWorld;\n","const text = {\n  introduction: [\n    \"You wake up in a dimly lit room struggling to remember where you are and how you got there.  \",\n    \"Slowly it comes to you...\",\n    \"You are the pilot of a small mining ship, and you were on your way back to the main station when you came across a large undocumented asteroid. You, the grand opportunist you are, undocked your drilling rig and floated over to check it out. Turns out it was occupied. You're a bit foggy on what came next, but you need to get to your rig and get off this rock.\",\n    \"Fast.\"\n  ],\n  foundShipNoKeys: [\n    \"Great!  Your rig!\",\n    \"You jump into the one-man mining rig and start to fire it up only to discover that your keys have gone missing.  Frantically you check your pockets but come up with nothing but lint.  These alien monsters must have taken the keys when they ripped you from the cockpit.  Fortunately, the thing seems to be in working order.\",\n    \"You find an old crowbar in the back. Wielding that should help as you explore the strange caverns that have been carved into this asteroid.\",\n    \"Let's find those keys.\"\n  ],\n  foundKeys: [\"Your keys... now don't lose them.\", \"Back to the ship!\"],\n  foundKeysAndShip: [\n    \"You jam your keys into the ignition and the rig fires up.\",\n    \"Now that you're back in the cockpit blasting yourself free from this cavern is a simple task, and this time you won't let those slimy space-bugs surround you.\",\n    \"You blast yourself free, turn on your navigational systems and head home.\",\n    \"You win.\"\n  ]\n};\n\nexport default text;\n","import ROT from \"rot-js\";\nimport Colors from \"../colors\";\nimport Entity from \"../entity/entity\";\nimport gameOverScreen from \"./gameOverScreen\";\nimport WinScreen from \"./winScreen\";\nimport ItemListDialog from \"./itemListDialog\";\nimport PickUpDialog from \"./pickUpDialog\";\nimport Confirmation from \"./confirmation\";\nimport StoryScreen from \"./storyScreen\";\nimport HelpScreen from \"./helpScreen\";\nimport PlayerStatusScreen from \"./playerStatusScreen\";\nimport { WeaponRepository, ItemRepository } from \"../item/items\";\nimport { MonsterTemplate, PlayerTemplate } from \"../entity/entities\";\nimport GameWorld from \"../gameWorld\";\nimport { stairsUpTile, stairsDownTile } from \"../tile\";\nimport text from \"../text\";\n\nclass playScreen {\n  constructor(Game) {\n    this.game = Game;\n    this.gameWorld = new GameWorld(this.game);\n    this.level = this.gameWorld.getCurrentLevel();\n    this.map = this.level.getMap();\n    this.subscreen = null;\n    this.closing = false;\n    this.firing = false;\n    this.foundShip = false;\n    this.gameOver = false;\n    this.win = false;\n    this.rangeWeaponDisplay = null;\n\n    this.game.messageDisplay.add({\n      color: \"white\",\n      text: \"Press ? at any time for help\"\n    });\n\n    this.game.player = new Entity(\n      Object.assign(PlayerTemplate, { map: this.map, Game: this.game })\n    );\n    this.player = this.game.player;\n    this.player.alive = true;\n    this.level.player = this.game.player;\n\n    this.game.messageDisplay.clear();\n\n    this.game.messageDisplay.add({\n      color: \"white\",\n      text: \"Press ? at any time for help\"\n    });\n\n    const position = this.level.playerStartPosition;\n    this.player.setPosition(position.x, position.y);\n    this.game.getScheduler().add(this.player, true);\n    this.game.getEngine().start();\n\n    this.enterSubscreen(new StoryScreen(this, text.introduction));\n  }\n\n  exit() {\n    console.log(\"exit play screen\");\n  }\n\n  handleInput(inputData) {\n    if (this.subscreen) {\n      this.subscreen.handleInput(inputData);\n      return;\n    }\n    if (inputData.keyCode === ROT.VK_ESCAPE) {\n      const exitFunction = () => {\n        this.game.switchScreen(gameOverScreen);\n      };\n      this.enterSubscreen(\n        new Confirmation(\n          \"Are you SURE you want to INSTA-LOSE?\",\n          exitFunction,\n          this\n        )\n      );\n    }\n    //movement\n    const move = function(dX, dY) {\n      if (this.firing) {\n        const array = this.level.lookInDirection(dX, dY);\n        this.rangeWeaponDisplay = this.player.weapon.fire(array);\n        console.log(this.rangeWeaponDisplay);\n        this.firing = false;\n        this.game.getEngine().unlock();\n        return;\n      }\n      if (this.closing) {\n        closeDoor(dX, dY);\n        this.game.getEngine().unlock();\n        return;\n      }\n      this.player.tryMove(\n        this.player.getX() + dX,\n        this.player.getY() + dY,\n        this.level\n      );\n      this.game.getEngine().unlock();\n    }.bind(this);\n\n    const closeDoor = function(dX, dY) {\n      this.level\n        .getMap()\n        .closeDoor(this.player.getX() + dX, this.player.getY() + dY);\n      this.closing = false;\n      this.game.getEngine().unlock();\n    }.bind(this);\n\n    if (\n      inputData.keyCode === ROT.VK_H ||\n      inputData.keyCode == ROT.VK_4 ||\n      inputData.keyCode == ROT.VK_LEFT\n    ) {\n      move(-1, 0);\n    } else if (\n      inputData.keyCode === ROT.VK_L ||\n      inputData.keyCode == ROT.VK_6 ||\n      inputData.keyCode == ROT.VK_RIGHT\n    ) {\n      move(1, 0);\n    } else if (\n      inputData.keyCode === ROT.VK_K ||\n      inputData.keyCode == ROT.VK_8 ||\n      inputData.keyCode == ROT.VK_UP\n    ) {\n      move(0, -1);\n    } else if (\n      inputData.keyCode === ROT.VK_J ||\n      inputData.keyCode == ROT.VK_2 ||\n      inputData.keyCode == ROT.VK_DOWN\n    ) {\n      move(0, 1);\n    } else if (\n      inputData.keyCode === ROT.VK_Y ||\n      inputData.keyCode == ROT.VK_7\n    ) {\n      move(-1, -1);\n    } else if (\n      inputData.keyCode === ROT.VK_U ||\n      inputData.keyCode == ROT.VK_9\n    ) {\n      move(1, -1);\n    } else if (\n      inputData.keyCode === ROT.VK_B ||\n      inputData.keyCode == ROT.VK_1\n    ) {\n      move(-1, 1);\n    } else if (\n      inputData.keyCode === ROT.VK_N ||\n      inputData.keyCode == ROT.VK_3\n    ) {\n      move(1, 1);\n    } else if (\n      inputData.keyCode === ROT.VK_5 ||\n      inputData.keyCode === ROT.VK_PERIOD\n    ) {\n      if (inputData.shiftKey) {\n        // go down level\n        if (\n          this.level\n            .getMap()\n            .getTile(this.player.getX(), this.player.getY()) !== stairsDownTile\n        ) {\n          return false;\n        }\n        const newLevel = this.gameWorld.goDownLevel();\n        if (newLevel) {\n          this.level = newLevel;\n          this.player.setPosition(this.level.stairsUp.x, this.level.stairsUp.y);\n          this.level.player = this.player;\n          this.map = this.level.getMap();\n          this.game.refresh();\n        }\n        return;\n      }\n\n      // if no shift key, then wait\n      this.game.getEngine().unlock();\n    } else if (inputData.keyCode === ROT.VK_COMMA && inputData.shiftKey) {\n      // go up level\n      if (\n        this.level.getMap().getTile(this.player.getX(), this.player.getY()) !==\n        stairsUpTile\n      ) {\n        return false;\n      }\n      const newLevel = this.gameWorld.goUpLevel();\n      if (newLevel) {\n        this.level = newLevel;\n        this.player.setPosition(\n          this.level.stairsDown.x,\n          this.level.stairsDown.y\n        );\n        this.level.player = this.player;\n        this.map = this.level.getMap();\n        this.game.refresh();\n        return;\n      }\n    } else if (inputData.keyCode == ROT.VK_C) {\n      this.game.messageDisplay.add({ text: \"Close where?\", color: \"white\" });\n      this.closing = true;\n      return;\n    }\n    if (this.closing) {\n      this.game.messageDisplay.add(\"Nevermind\");\n      this.closing = false;\n    }\n    if (this.firing) {\n      this.game.messageDisplay.add(\"Nevermind\");\n      this.firing = false;\n    }\n    // fire weapon\n\n    if (inputData.keyCode === ROT.VK_F) {\n      if (this.player.weapon && this.player.weapon.hasMixin(\"Fireable\")) {\n        this.game.messageDisplay.add({\n          text: \"Fire weapon where?\",\n          color: \"white\"\n        });\n        this.firing = true;\n      }\n    }\n    // pick up item\n    if (inputData.keyCode === ROT.VK_G || inputData.keyCode == ROT.VK_COMMA) {\n      const item = this.level.getItems()[\n        this.player.getX() + \",\" + this.player.getY()\n      ];\n      if (\n        item.length == 1 &&\n        item[0].canPickUp &&\n        this.player.addItem(item[0])\n      ) {\n        this.level.setItemsAt(this.player.getX(), this.player.getY(), []);\n        this.game.messageDisplay.add(\"you pick up \" + item[0].describeA());\n      }\n      if (item.length > 1) {\n        this.enterSubscreen(new PickUpDialog(item, this, this.player));\n      }\n    }\n    // subscreens\n    if (inputData.keyCode == ROT.VK_I) {\n      this.enterSubscreen(\n        new ItemListDialog(this.player.inventory, this, this.player)\n      );\n    }\n    if (inputData.keyCode == ROT.VK_SLASH) {\n      this.enterSubscreen(new HelpScreen(this));\n    }\n    if (inputData.keyCode == ROT.VK_P) {\n      this.enterSubscreen(new PlayerStatusScreen(this));\n    }\n  }\n\n  enterSubscreen(subscreen) {\n    this.subscreen = subscreen;\n    this.game.refresh();\n  }\n\n  exitSubscreen() {\n    this.subscreen = null;\n    this.game.refresh();\n  }\n\n  render(Game) {\n    if (!this.player.isAlive()) {\n      this.game.switchScreen(gameOverScreen);\n    }\n    const playerStatusDisplay = Game.playerStatusDisplay;\n    const display = Game.getDisplay();\n    const map = this.level.getMap();\n\n    playerStatusDisplay.render({\n      name: this.player.name,\n      hp: this.player.hp,\n      maxHp: this.player.maxHp,\n      statusEffects: this.player.getTimedStatusEffects(),\n      weapon: this.player.weapon\n    });\n\n    const items = this.level.getItems();\n    if (items[this.player.getX() + \",\" + this.player.getY()]) {\n      const item = items[this.player.getX() + \",\" + this.player.getY()];\n      if (\n        !this.foundShip &&\n        item.filter(i => i.name == \"Space Ship\").length > 0\n      ) {\n        this.foundShip = true;\n        this.enterSubscreen(\n          new StoryScreen(this, text.foundShipNoKeys, () => {\n            this.player.addItem(WeaponRepository.create(\"crowbar\"));\n            this.game.messageDisplay.add(\n              \"You have found your rig, don't forget where it is!\"\n            );\n            this.game.messageDisplay.add({\n              text:\n                \"crowbar added to inventory (go wield it. or don't. whatever)\",\n              color: \"blue\"\n            });\n          })\n        );\n        return;\n      }\n      if (!this.foundKeys && item.filter(i => i.name == \"keys\").length > 0) {\n        this.foundKeys = true;\n        this.enterSubscreen(new StoryScreen(this, text.foundKeys));\n        return;\n      }\n      if (\n        !this.win &&\n        this.player.hasItem(\"keys\") &&\n        item.filter(i => i.name == \"Space Ship\").length > 0\n      ) {\n        this.win = true;\n        this.enterSubscreen(\n          new StoryScreen(this, text.foundKeysAndShip, () => {\n            this.game.switchScreen(WinScreen);\n          })\n        );\n        return;\n      }\n      if (item.length == 1) {\n        this.game.messageDisplay.add({\n          text: \"you see \" + item[0].describeA(),\n          color: \"light-gray\"\n        });\n      } else {\n        this.game.messageDisplay.add({\n          text: \"you see several items here\",\n          color: \"light-gray\"\n        });\n      }\n    }\n\n    const screenWidth = Game.getScreenWidth();\n    const screenHeight = Game.getScreenHeight();\n    let topLeftX = Math.max(0, this.player.getX() - screenWidth / 2);\n    topLeftX = Math.min(topLeftX, this.level.width - screenWidth);\n\n    let topLeftY = Math.max(0, this.player.getY() - screenHeight / 2);\n    topLeftY = Math.min(topLeftY, this.level.height - screenHeight);\n\n    const fov = new ROT.FOV.PreciseShadowcasting((x, y) => {\n      if (map.getTile(x, y)) {\n        return !map.getTile(x, y).blocksLight;\n      }\n\n      return false;\n    });\n\n    const visibleTiles = {};\n    const exploredTiles = this.level.exploredTiles;\n    fov.compute(\n      this.player.getX(),\n      this.player.getY(),\n      this.player.getSightRadius(),\n      function(x, y, r, visibility) {\n        visibleTiles[x + \",\" + y] = true;\n        exploredTiles[x + \",\" + y] = true;\n      }\n    );\n\n    for (var x = topLeftX; x < topLeftX + screenWidth; x++) {\n      for (var y = topLeftY; y < topLeftY + screenHeight; y++) {\n        const tile = map.getTile(x, y);\n        if (visibleTiles[x + \",\" + y]) {\n          display.draw(\n            x - topLeftX,\n            y - topLeftY,\n            tile.getChar(),\n            tile.getFg(),\n            tile.getBg()\n          );\n        } else if (this.level.exploredTiles[x + \",\" + y]) {\n          display.draw(\n            x - topLeftX,\n            y - topLeftY,\n            tile.getChar(),\n            Colors.darkBlue,\n            Colors.black\n          );\n        }\n      }\n    }\n\n    Object.keys(items).forEach(itemKey => {\n      const [x, y] = itemKey.split(\",\");\n      const item = items[itemKey];\n      if (visibleTiles[x + \",\" + y]) {\n        display.draw(\n          parseInt(x) - topLeftX,\n          parseInt(y) - topLeftY,\n          item[0].getChar(),\n          item[0].getFg(),\n          item[0].getBg()\n        );\n      }\n    });\n\n    if (this.rangeWeaponDisplay) {\n      const xMod = this.rangeWeaponDisplay.xMod;\n      const yMod = this.rangeWeaponDisplay.yMod;\n      console.log(xMod, yMod);\n      let char = \"\"; //\"/\" : \"|\" : \"\\\\\" :\n      if ((xMod == 1 && yMod == -1) || (xMod == -1 && yMod == 1)) {\n        char = \"/\";\n      } else if ((xMod == -1 && yMod == -1) || (xMod == 1 && yMod == 1)) {\n        char = \"\\\\\";\n      } else if (xMod == 0) {\n        char = \"|\";\n      } else if (yMod == 0) {\n        char = \"-\";\n      }\n      this.rangeWeaponDisplay.coords.forEach(coord => {\n        const xy = coord.split(\",\");\n        display.draw(\n          xy[0] - topLeftX,\n          xy[1] - topLeftY,\n          char,\n          this.player.weapon.fg || Colors.blue,\n          this.player.getBg()\n        );\n      });\n\n      setTimeout(() => {\n        this.rangeWeaponDisplay = null;\n        this.render(this.game);\n      }, 300);\n    }\n\n    const entities = this.level.getEntities();\n    Object.values(entities).forEach(entity => {\n      if (visibleTiles[entity.getX() + \",\" + entity.getY()]) {\n        display.draw(\n          entity.getX() - topLeftX,\n          entity.getY() - topLeftY,\n          entity.getChar(),\n          entity.hit ? Colors.black : entity.getFg(),\n          entity.hit || entity.getBg()\n        );\n        entity.hit = false;\n      }\n    });\n    display.draw(\n      this.player.getX() - topLeftX,\n      this.player.getY() - topLeftY,\n      this.player.getChar(),\n      this.player.getFg(),\n      this.player.getBg()\n    );\n    if (this.subscreen) {\n      this.subscreen.render(Game);\n      return;\n    }\n  }\n}\n\nexport default playScreen;\n","import ROT from \"rot-js\";\nimport playScreen from \"./playScreen\";\n\nclass startScreen {\n  constructor(Game) {\n    this.game = Game;\n    this.game.player = null;\n  }\n  exit() {}\n  handleInput(inputData) {\n    if (inputData.keyCode == ROT.VK_RETURN) {\n      this.game.switchScreen(playScreen);\n    }\n  }\n  render(Game) {\n    const display = Game.getDisplay();\n    display.drawText(0, 0, \"press enter to start\");\n  }\n}\n\nexport default startScreen;\n","import Colors from \"./colors\";\n\nclass MessageDisplay {\n  constructor(width = \"800px\") {\n    this.messages = [];\n    this.messageScreen = document.createElement(\"div\");\n    Object.assign(this.messageScreen.style, {\n      width: width,\n      \"font-size\": \"15px\",\n      \"letter-spacing\": \"1px\",\n      background: Colors.black,\n      color: Colors.white,\n      \"font-family\": \"Courier, monospace\",\n      height: \"88px\",\n      overflow: \"hidden\",\n      \"margin-top\": \"-8px\",\n      \"border-top\": \"8px solid \" + Colors.black\n    });\n\n    this.messageScreen.textContent = \"  \";\n  }\n  getDisplay() {\n    return this.messageScreen;\n  }\n\n  add(message) {\n    this.messages.push(message);\n    this.render();\n  }\n\n  clear() {\n    this.messages = [];\n    this.render();\n  }\n\n  render() {\n    this.messageScreen.innerHTML = \"\";\n    this.messages\n      .slice(Math.max(this.messages.length - 5, 0))\n      .forEach(message => {\n        let color = \"gray\";\n        if (typeof message == \"object\") {\n          color = message.color;\n          message = message.text;\n        }\n        this.messageScreen.innerHTML += `<div class=\"${color}\">${message}</div>`;\n      });\n  }\n}\n\nexport default MessageDisplay;\n","import Colors from \"./colors\";\n\nclass PlayerStatusDisplay {\n  constructor(width = 800) {\n    this.playerStatus = document.createElement(\"div\");\n    Object.assign(this.playerStatus.style, {\n      width: \"800px\",\n      \"font-size\": \"15px\",\n      \"letter-spacing\": \"1px\",\n      background: Colors.black,\n      color: Colors.white,\n      \"font-family\": \"Courier, monospace\",\n      height: \"18px\",\n      overflow: \"hidden\",\n      display: \"flex\"\n    });\n\n    this.playerStatus.textContent = \"  \";\n  }\n  getDisplay() {\n    return this.playerStatus;\n  }\n\n  render({ name = \"Player Name\", hp, maxHp, statusEffects, weapon }) {\n    this.playerStatus.innerHTML = \"\";\n    this.playerStatus.innerHTML = `<div style=\"flex: 1\">${name} ♥${hp}/${maxHp}</div>`;\n    this.playerStatus.innerHTML += \"<div>\";\n    statusEffects.forEach(s => {\n      this.playerStatus.innerHTML += `${s.label}/${s.timer} `;\n    });\n    if (weapon && (weapon.charges == 0 || weapon.charges)) {\n      this.playerStatus.innerHTML += ` Weapon charges remaining: ${weapon.charges}`;\n    }\n    this.playerStatus.innerHTML += \"</div>\";\n  }\n}\n\nexport default PlayerStatusDisplay;\n","import ROT from \"rot-js\";\nimport Colors from \"./colors\";\nimport startScreen from \"./screens/startScreen\";\nimport MessageDisplay from \"./messageDisplay\";\nimport PlayerStatusDisplay from \"./playerStatusDisplay\";\nimport Confirmation from \"./screens/confirmation\";\n\nclass Game {\n  constructor() {\n    this.screenWidth = 80;\n    this.screenHeight = 30;\n    this.scheduler = new ROT.Scheduler.Speed();\n    this.engine = new ROT.Engine(this.scheduler);\n    this.display = new ROT.Display({\n      width: this.screenWidth,\n      height: this.screenHeight,\n      fontFamily: \"Courier, monospace\",\n      fg: Colors.white,\n      bg: Colors.black\n    });\n    this.currentScreen;\n    this.player = null;\n    this.messageDisplay = new MessageDisplay();\n    this.playerStatusDisplay = new PlayerStatusDisplay();\n\n    window.addEventListener(\"keydown\", e => {\n      if (this.currentScreen) {\n        this.currentScreen.handleInput(e);\n      }\n    });\n  }\n\n  getScheduler() {\n    return this.scheduler;\n  }\n  getEngine() {\n    return this.engine;\n  }\n  getDisplay() {\n    return this.display;\n  }\n  getScreenWidth() {\n    return this.screenWidth;\n  }\n  getScreenHeight() {\n    return this.screenHeight;\n  }\n  switchScreen(screen, options = {}) {\n    if (this.currentScreen) {\n      this.currentScreen.exit();\n    }\n    this.currentScreen = new screen(this, options);\n    this.refresh();\n  }\n  refresh() {\n    this.display.clear();\n    this.currentScreen.render(this);\n  }\n}\n\nconst game = new Game();\nexport default game;\n\nwindow.onload = function() {\n  if (!ROT.isSupported()) {\n    alert(\"The rot.js library isn't supported by your browser.\");\n  } else {\n    document.body.appendChild(game.playerStatusDisplay.getDisplay());\n    document.body.appendChild(game.getDisplay().getContainer());\n    document.body.appendChild(game.messageDisplay.getDisplay());\n    game.switchScreen(startScreen);\n  }\n};\n"]}